{"version":3,"sources":["src/app/main/setting/setting.page.html","src/app/main/setting/update-password/update-password.component.html","src/app/main/setting/update-user/update-user.component.html","src/app/main/setting/setting-routing.module.ts","src/app/main/setting/setting.module.ts","src/app/main/setting/setting.page.scss","src/app/main/setting/setting.page.ts","src/app/main/setting/update-password/update-password.component.ts","src/app/main/setting/update-user/update-user.component.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-menu-button slot=\\\"start\\\"></ion-menu-button>\\n    <ion-title>Setting</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n <ion-grid class=\\\"gradient\\\" style=\\\"height: 100%;\\\">\\n   <ion-row>\\n     <ion-col size-sm=\\\"8\\\" offset-sm=\\\"2\\\" class=\\\"mt-5\\\">\\n      <ion-item (click)=\\\"onupdateUser()\\\" style=\\\"border-radius: 5px;margin-bottom: 5px;\\\" *ngIf=\\\"userRole !== 'admin'\\\">\\n     \\n        <ion-icon name=\\\"person-add-sharp\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label *ngIf=\\\"user!==null\\\" class=\\\"text-primary\\\">Update Profile</ion-label>\\n      \\n       </ion-item>\\n       <ion-item (click)=\\\"onPasswordUpdate()\\\" style=\\\"border-radius: 5px;margin-bottom: 5px;\\\">\\n    \\n        <ion-icon name=\\\"cloud-upload-sharp\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label *ngIf=\\\"user!==null\\\" class=\\\"text-primary\\\">Change Password</ion-label>\\n      \\n       </ion-item>\\n       \\n     </ion-col>\\n   </ion-row>\\n </ion-grid>\\n</ion-content>\\n\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Update Profile</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-icon name=\\\"close-outline\\\" slot=\\\"icon-only\\\" (click)=\\\"onDismiss()\\\"></ion-icon>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid class=\\\"gradient\\\" style=\\\"height: 100%;\\\">\\n    <ion-row class=\\\"mt-5\\\">\\n      <ion-col size-sm=\\\"8\\\" offset-sm=\\\"2\\\">\\n        <form  class=\\\"ion-padding-horizontal\\\" [formGroup]=\\\"updatePassword\\\" (ngSubmit)=\\\"onSubmit(updatePassword)\\\">\\n          <div class=\\\"d-flex column\\\">\\n      \\n            <div class=\\\"mb-2\\\">\\n              <input type=\\\"password\\\" \\n              placeholder=\\\"Current Password\\\" \\n              class=\\\"form-control\\\" \\n              formControlName=\\\"passwordCurrent\\\"\\n              [ngClass]=\\\"{ 'is-invalid': submitted && updatePassword.get('passwordCurrent').errors }\\\" \\n               >\\n               <div *ngIf=\\\"submitted && updatePassword.get('passwordCurrent').hasError('required')\\\"\\n               class=\\\"invalid-feedback\\\">\\n                User name required !</div>\\n            </div>\\n            \\n              \\n          \\n           \\n            <div class=\\\"mb-2\\\">\\n              <input type=\\\"password\\\"\\n               placeholder=\\\"Password\\\" \\n               class=\\\"form-control\\\"  \\n               formControlName=\\\"password\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && updatePassword.get('password').errors }\\\" \\n               >\\n               <div *ngIf=\\\"submitted && updatePassword.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\n               <div *ngIf=\\\"updatePassword.get('password').hasError('required')\\\">\\n                   Password is required !\\n               </div>\\n               <div *ngIf=\\\" updatePassword.get('password').hasError('minLength')\\\">\\n                 Password must be at least 6 characters !\\n               </div>\\n              </div>\\n            \\n            </div>\\n\\n            <div class=\\\"mb-2\\\">\\n              <input type=\\\"password\\\"\\n               placeholder=\\\"Confirm Password\\\"\\n               class=\\\"form-control\\\" \\n               formControlName=\\\"passwordConfirm\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && updatePassword.get('passwordConfirm').errors }\\\" \\n               >\\n               <div\\n               *ngIf=\\\"submitted && updatePassword.get('passwordConfirm').errors\\\"\\n               class=\\\"invalid-feedback\\\">\\n              <div \\n              *ngIf=\\\"updatePassword.get('passwordConfirm').hasError('required')\\\">\\n               Confirm password is required !\\n              </div>\\n              <div \\n              *ngIf=\\\" updatePassword.get('passwordConfirm').hasError('mustMatch')\\\">\\n              Confirm password must match !\\n              </div>\\n             </div>\\n            </div>\\n      \\n      \\n            \\n           \\n            <ion-button type=\\\"submit\\\">Update Password</ion-button>\\n        \\n          </div>\\n      \\n        </form>\\n        <div class=\\\"alert alert-success mt-2 text-center\\\" role=\\\"alert\\\" *ngIf=\\\"updated\\\">\\n         Successfully updated !\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n</ion-content>\"","export default \"<style>\\n   .icon-color{\\n    color: var(--ion-color-primary);\\n  }\\n  .text{\\n    font-size:12px\\n  }\\n</style>\\n\\n<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Update Profile</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-icon name=\\\"close-outline\\\" slot=\\\"icon-only\\\" (click)=\\\"onDismiss()\\\"></ion-icon>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid style=\\\"height:100%\\\" class=\\\"gradient\\\">\\n    <ion-row>\\n      <ion-col size-sm=\\\"8\\\" offset-sm=\\\"2\\\" class=\\\"mt-5\\\">\\n        <form  class=\\\"ion-padding-horizontal\\\" [formGroup]=\\\"updateUser\\\" (ngSubmit)=\\\"onSubmit(updateUser)\\\">\\n          <div class=\\\"d-flex column\\\">\\n      \\n            <div class=\\\"mb-2\\\">\\n              <input type=\\\"text\\\" \\n              placeholder=\\\"User Name\\\" \\n              class=\\\"form-control\\\" \\n              formControlName=\\\"name\\\"\\n              [ngClass]=\\\"{ 'is-invalid': submitted && updateUser.get('name').errors }\\\" \\n               >\\n               <div *ngIf=\\\"submitted && updateUser.get('name').hasError('required')\\\"\\n               class=\\\"invalid-feedback\\\">\\n                User name required !</div>\\n            </div>\\n            \\n              \\n          \\n           \\n            <div class=\\\"mb-2\\\">\\n              <input type=\\\"text\\\"\\n               placeholder=\\\"Email Address \\\" \\n               class=\\\"form-control\\\"  \\n               formControlName=\\\"email\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && updateUser.get('email').errors }\\\" \\n               >\\n               <div\\n                *ngIf=\\\"submitted && updateUser.get('email').errors\\\"\\n                class=\\\"invalid-feedback\\\">\\n               <div \\n               *ngIf=\\\"updateUser.get('email').hasError('required')\\\">\\n                Email address is required !\\n               </div>\\n               <div \\n               *ngIf=\\\" updateUser.get('email').hasError('email')\\\">\\n                Please enter valid email address !\\n               </div>\\n              </div>\\n            \\n            \\n            </div>\\n            <div class=\\\"mb-2\\\">\\n              <input type=\\\"number\\\"\\n               placeholder=\\\"Mobile\\\"\\n               class=\\\"form-control\\\" \\n               formControlName=\\\"mobile\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && updateUser.get('mobile').errors }\\\" \\n               >\\n               <div\\n               *ngIf=\\\"submitted && updateUser.get('mobile').errors\\\"\\n               class=\\\"invalid-feedback\\\">\\n              <div \\n              *ngIf=\\\"updateUser.get('mobile').hasError('required')\\\">\\n              Mobile no. is required !\\n              </div>\\n              <div \\n              *ngIf=\\\" updateUser.get('mobile').hasError('pattern')\\\">\\n              Mobile no. must be 10 digits !\\n              </div>\\n             </div>\\n            </div>\\n            <div class=\\\"mb-2\\\">\\n              <textarea\\n              type=\\\"text\\\"\\n              formControlName=\\\"address\\\"\\n              [ngClass]=\\\"{ 'is-invalid': submitted && updateUser.get('address').errors }\\\" \\n               placeholder=\\\"Address\\\"\\n               class=\\\"form-control\\\">\\n              </textarea>\\n              <div\\n              *ngIf=\\\"submitted && updateUser.get('address').errors\\\"\\n              class=\\\"invalid-feedback\\\">\\n             <div \\n             *ngIf=\\\"updateUser.get('address').hasError('required')\\\">\\n              Address is required !\\n             </div>\\n            \\n            </div>\\n            </div>\\n      \\n            <div style=\\\"border-radius: 5px; background: white;\\\" class=\\\"mb-2\\\">\\n              <span for=\\\"files\\\" class=\\\"btn\\\" (click)=\\\"pancard.click()\\\" [ngClass]=\\\"{'icon-color': panCard_selected}\\\">Select Pancard</span>\\n              <input #pancard style=\\\"display: none;\\\" type=\\\"file\\\" (change)=\\\"getPancard($event)\\\">\\n          </div>\\n\\n          <div style=\\\"border-radius: 5px; background: white;\\\">\\n            <span for=\\\"files\\\" class=\\\"btn\\\" (click)=\\\"adhaarcard.click()\\\"[ngClass]=\\\"{'icon-color': adhaarCard_selected}\\\">Select Adhaarcard</span>\\n            <input #adhaarcard style=\\\"display: none;\\\" type=\\\"file\\\" (change)=\\\"getAdhaar($event)\\\">\\n          </div>\\n           \\n            <ion-button type=\\\"submit\\\" class=\\\"mt-3\\\">Update</ion-button>\\n        \\n          </div>\\n      \\n        </form>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingPage } from './setting.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingPageRoutingModule } from './setting-routing.module';\n\nimport { SettingPage } from './setting.page';\nimport { UpdateUserComponent } from './update-user/update-user.component';\nimport { UpdatePasswordComponent } from './update-password/update-password.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    IonicModule,\n    SettingPageRoutingModule,\n    HttpClientModule\n  ],\n  declarations: [SettingPage,UpdateUserComponent,UpdatePasswordComponent],\n  entryComponents:[UpdateUserComponent,UpdatePasswordComponent]\n})\nexport class SettingPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21haW4vc2V0dGluZy9zZXR0aW5nLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { ModalController, LoadingController } from '@ionic/angular';\nimport { UpdateUserComponent } from './update-user/update-user.component';\nimport { UpdatePasswordComponent } from './update-password/update-password.component';\nimport { SharedService } from '../services/shared.service';\n\n@Component({\n  selector: 'app-setting',\n  templateUrl: './setting.page.html',\n  styleUrls: ['./setting.page.scss'],\n})\nexport class SettingPage implements OnInit {\n    user:any = null;\n    userRole;\n  constructor(\n        private auth:AuthService,\n        private service: SharedService,\n        private modalCtrl: ModalController,\n        private loading:LoadingController\n        )\n         { \n          this.userRole = this.auth.userRole;\n         }\n\n  ngOnInit() {\n  }\n\n  ionViewWillEnter(){\n    this.loading.create({\n      message:'Loading...'\n    }).then(el=>{el.present()})\n    if(this.auth.user){\n      this.service.getUser().subscribe(res => {\n        this.user = res.user;\n        this.loading.dismiss();\n      },\n      err=>{\n        this.auth.showAlert(err.error.message);\n        this.loading.dismiss();\n      }\n      )\n     }\n  }\n  \n  onupdateUser(){\n    this.modalCtrl.create({\n      component:UpdateUserComponent,\n      componentProps:{\n        name:this.user.name,\n        email:this.user.email,\n        mobile:this.user.mobile,\n        address:this.user.address,\n        pancard:this.user.panCard,\n        adhaarcard:this.user.adhaar\n      }\n    }).then( modal =>{\n      modal.present();\n      return modal.onDidDismiss()\n    }).then(user=>{\n     if(user.data!==undefined){\n      this.user = {...user.data};\n     }\n    })\n  }\n\n\n  onPasswordUpdate(){\n    this.modalCtrl.create({\n      component:UpdatePasswordComponent\n    }).then(modal =>{\n      modal.present();\n    })\n  }\n\n  \n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ModalController } from '@ionic/angular';\nimport { AuthService } from '../../../services/auth.service';\nimport { MustMatch } from '../../../services/helper';\nimport { Storage } from '@ionic/storage';\nimport { SharedService } from '../../services/shared.service';\n@Component({\n  selector: 'app-update-password',\n  templateUrl: './update-password.component.html'\n})\nexport class UpdatePasswordComponent implements OnInit {\n  updated = false ;\n  updatePassword:FormGroup;\n  submitted = false;\n  constructor(\n    private auth: AuthService,\n    private modal:ModalController,\n    private formBuilder: FormBuilder,\n    private service: SharedService,\n    private storage:Storage\n    ) { \n     \n    }\n\n  ngOnInit() {\n    this.updatePassword = this.formBuilder.group({\n      passwordCurrent:[null,[Validators.required,Validators.minLength(6)]],\n      password:[null, [Validators.required,Validators.minLength(6)]],\n      passwordConfirm:[null,[Validators.required]]\n    },\n    {\n      validator: MustMatch('password', 'confirmPassword')\n  }\n    );\n  }\n async onSubmit(form:FormGroup){\n    this.submitted = true;\n   console.log(this.updatePassword.value);\n    // stop here if form is invalid\n    if (this.updatePassword.invalid) {\n        return;\n    }\n    this.service.updatePassword(this.updatePassword.value).subscribe(async res=>{\n      this.storage.remove('access_token');\n      this.updated = true;\n       setTimeout(()=>{\n        this.updated = false;\n        this.auth.logout();\n       this.modal.dismiss();\n       \n       },2000);\n       \n    },\n    err=>{\n      this.auth.showAlert(err.error.message);\n    });\n    \n}\n\nonDismiss(){\n  this.modal.dismiss();\n}\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { SharedService } from '../../services/shared.service';\nimport { environment } from 'src/environments/environment';\n@Component({\n  selector: 'app-update-user',\n  templateUrl: './update-user.component.html'\n})\nexport class UpdateUserComponent implements OnInit {\n  url = environment.url;\n  // Data passed in by componentProps\n  @Input() name: string;\n  @Input() email: string;\n  @Input() mobile: number ;\n  @Input() address: string;\n  @Input() pancard: string ;\n  @Input() adhaarcard: number ;\n  updateUser:FormGroup;\n  panCard_selected;\n  adhaarCard_selected;\n  submitted = false;\n  constructor(\n    private modal:ModalController,\n    private formBuilder: FormBuilder,\n    private auth: AuthService,\n    private service: SharedService\n    ) { }\n\n  ngOnInit() {\n    this.updateUser = this.formBuilder.group({\n      name:[this.name,[Validators.required]],\n      email:[this.email, [Validators.required,Validators.email]],\n      mobile:[this.mobile,[Validators.required,Validators.pattern(/^\\d{10}$/)]],\n      address:[this.address,[Validators.required]],\n      panCard:[this.pancard,[Validators.required]],\n      adhaar:[this.adhaarcard,[Validators.required]]\n    }\n    );\n  }\n  onSubmit(form:FormGroup){\n    this.submitted = true;\n    if (this.updateUser.invalid) return;\n    const userData = new FormData();\n    if(typeof(this.updateUser.get('panCard').value) === 'object' || typeof(this.updateUser.get('adhaar').value)==='object'){\n    userData.append(\"name\",this.updateUser.value.name);\n    userData.append(\"email\",this.updateUser.value.email);\n    userData.append(\"password\", this.updateUser.value.password);\n    userData.append(\"passwordConfirm\", this.updateUser.value.passwordConfirm);\n    userData.append(\"mobile\", this.updateUser.value.mobile);\n    userData.append(\"address\", this.updateUser.value.address);\n    userData.append(\"panCard\", this.updateUser.value.panCard);\n    userData.append(\"adhaar\", this.updateUser.value.adhaar);\n    this.service.updateUser(userData)\n      .subscribe(res=>{\n      this.modal.dismiss(res.user);\n      },\n      err=>{\n        this.auth.showAlert(err.error.message);\n      });\n    } else{\n      this.service.updateUser(this.updateUser.value)\n      .subscribe(res=>{\n      this.modal.dismiss(res.user);\n      },\n      err=>{\n        this.auth.showAlert(err.error.message);\n      });\n    }\n\n   \n}\n\ngetPancard(event:Event){\n  const file = (event.target as HTMLInputElement).files[0];\n  this.panCard_selected = file;\n  this.updateUser.patchValue({panCard:file});\n\n}\ngetAdhaar(event:Event){\n  const file = (event.target as HTMLInputElement).files[0];\n  this.adhaarCard_selected = file;\n  this.updateUser.patchValue({adhaar:file});\n\n}\n\n  onDismiss(){\n    this.modal.dismiss();\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"setting-setting-module-es5.js"}