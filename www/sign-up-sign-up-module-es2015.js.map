{"version":3,"sources":["./node_modules/@rxweb/reactive-form-validators/fesm2015/rxweb-reactive-form-validators.js","./src/app/auth/sign-up/sign-up.page.html","./src/app/auth/sign-up/sign-up-routing.module.ts","./src/app/auth/sign-up/sign-up.module.ts","./src/app/auth/sign-up/sign-up.page.scss","./src/app/auth/sign-up/sign-up.page.ts"],"names":[],"mappingswD;AACoG;AAC3D;AACyF;;AAE1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,mEAAmE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,EAAE;AACvE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,0FAA0F;AACxI;AACA,8CAA8C,uGAAuG;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,kCAAkC,gCAAgC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,2BAA2B,aAAa;AACjH;AACA;AACA;AACA,4CAA4C,EAAE,GAAG,SAAS,qBAAqB,EAAE;AACjF;AACA;AACA,uCAAuC,wBAAwB,EAAE,SAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA,6CAA6C,sBAAsB;AACnE;AACA,6CAA6C,sBAAsB;AACnE;AACA,6CAA6C,sBAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qCAAqC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,gBAAgB,EAAE,OAAO,EAAE,qBAAqB,OAAO,sBAAsB,GAAG,gBAAgB,EAAE,OAAO,EAAE,qBAAqB;AAC/L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH;AACnH;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,uCAAuC;AACvC;AACA,iBAAiB;AACjB,8CAA8C;AAC9C,uCAAuC;AACvC;AACA,iBAAiB;AACjB,8CAA8C;AAC9C,uCAAuC;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oEAAoE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,2GAA2G;AAC7K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA,yCAAyC;AACzC,+CAA+C,EAAE,gCAAgC,KAAK,6CAA6C,KAAK;AACxI,4DAA4D,6BAA6B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,gCAAgC,GAAG;AACpK;AACA;AACA,4BAA4B,EAAE,UAAU,EAAE;AAC1C,kCAAkC,EAAE,UAAU,EAAE;AAChD;AACA;AACA;AACA,0HAA0H,EAAE,+MAA+M,EAAE;AAC7U;AACA;AACA,mFAAmF,GAAG,iDAAiD,GAAG,gDAAgD,GAAG,yBAAyB,GAAG;AACzN,uDAAuD,IAAI,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,kDAAkD,IAAI,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,6DAA6D,IAAI,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE;AACzT;AACA;AACA,2CAA2C,kBAAkB,wBAAwB,WAAW,2BAA2B;AAC3H;AACA,oDAAoD,IAAI;AACxD,gBAAgB,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI;AACrD,2BAA2B,IAAI,GAAG,EAAE,cAAc,IAAI,kBAAkB,IAAI,GAAG,EAAE,oFAAoF,EAAE,aAAa,IAAI,kBAAkB,IAAI,GAAG,EAAE,qFAAqF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,wBAAwB,IAAI,EAAE,IAAI,kFAAkF,EAAE,gBAAgB,IAAI,EAAE,IAAI,mBAAmB,GAAG;AAC5mC;AACA;AACA,sBAAsB,EAAE;AACxB,8BAA8B,EAAE,iBAAiB,EAAE,iBAAiB,GAAG,iBAAiB,EAAE;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE,QAAQ;AAC3D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,wDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA,gDAAgD,4BAA4B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;;AAE7C;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kEAAkE;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,wDAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,0CAA0C,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,0CAA0C,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2BAA2B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;;AAEA,6BAA6B,EAAE,IAAI,IAAI,IAAI,IAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA,+EAA+E,EAAE,QAAQ,EAAE;AAC3F;AACA;AACA,+EAA+E,EAAE,QAAQ,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,kCAAkC;AAClC,kCAAkC;AAClC,gCAAgC;AAChC,gCAAgC;AAChC,mCAAmC;AACnC,mCAAmC;AACnC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,kBAAkB,KAAK,EAAE,MAAM;AAC/B;AACA;AACA;AACA;AACA,kBAAkB,MAAM,EAAE,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qCAAqC;AAC1E,sDAAsD,kBAAkB,UAAU,GAAG,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,WAAW,EAAE,OAAO;AACvE;AACA;AACA;AACA;AACA,sDAAsD,KAAK,EAAE,OAAO;AACpE;AACA,2BAA2B,0BAA0B;AACrD;AACA,iCAAiC,gBAAgB,YAAY,QAAQ,EAAE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B,SAAS,GAAG,EAAE,uIAAuI;AAClO,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK,GAAG,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sHAAsH,KAAK,GAAG,OAAO,OAAO,OAAO;AACnJ;AACA,8GAA8G,KAAK,GAAG,OAAO,OAAO,OAAO;AAC3I;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAa,EAAE,OAAO;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU,GAAG,WAAW;AAC5E;AACA;AACA,kCAAkC,WAAW,GAAG,MAAM;AACtD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C,mCAAmC,SAAS,GAAG,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0DAAW;AAC5D;AACA;AACA,iDAAiD,0DAAW,uBAAuB,wDAAS;AAC5F;AACA;AACA,iDAAiD,wDAAS;AAC1D;AACA;AACA,iDAAiD,wDAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,wDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,wDAAS;AACvE;AACA;AACA,mCAAmC,uCAAuC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,wDAAS,mCAAmC,wDAAS;AACtG;AACA;AACA;AACA;AACA,oDAAoD,wDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wDAAS;AAC5D;AACA,wDAAwD,wDAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wDAAS;AACxD;AACA,oDAAoD,wDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wDAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wDAAS;AAC9D;AACA;AACA;AACA;AACA,0DAA0D,wDAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uDAAuD,wDAAS,gGAAgG,wDAAS,oGAAoG,0DAAW;AACxR,mFAAmF,sBAAsB;AACzG;AACA,2DAA2D,wDAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uDAAuD,wDAAS,gGAAgG,wDAAS;AACzK;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uDAAuD,wDAAS,gGAAgG,wDAAS;AACzK;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wDAAS;AAC9D;AACA;AACA;AACA;AACA,0DAA0D,wDAAS;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,+DAA+D,gFAAgF,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wDAAwD,6EAA6E;AACrI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,KAAK,sBAAsB,WAAW;AAC/F,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA,gEAAgE,mDAAmD,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW;AAClaAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,yBAAyB,EAAE;AACtF;AACA;AACA;AACA,sDAAsD,yBAAyB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,oBAAoB,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,IAAI;AAC3E;AACA;AACA,oCAAoC,eAAe;AACnD,8BAA8B,0DAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gJAAgJ,6BAA6B;AAC7K;AACA;AACA;AACA,4IAA4I,6BAA6B;AACzK;AACA;AACA;AACA,oCAAoC,wDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,0DAAW;AAClF,iDAAiD,wDAAS;AAC1D,yDAAyD,wDAAS;AAClE;AACA;AACA,oCAAoC,wDAAS;AAC7C;AACA;AACA;AACA,yCAAyC,wDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oKAAoK,6BAA6B;AACjM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,0DAAW,wDAAwD,wDAAS;AAC5K;AACA;AACA,qCAAqC,wDAAS;AAC9C;AACA;AACA,qCAAqC,0DAAW;AAChD;AACA,gIAAgI,6BAA6B;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,0DAAW;AAChF;AACA,iOAAiO;AACjO;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA,6JAA6J;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,wDAAS;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,cAAc;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wDAAS;AACjE;AACA;AACA;AACA;AACA,mHAAmH,wDAAS;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,cAAc,OAAO,cAAc,GAAG,MAAM;AACrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,wFAAwF,sDAAsD,UAAU;AAC/N;AACA;AACA,uDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,wDAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,gEAAU;AACd,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,wDAAS;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC,wDAAS;AAClD;AACA,8CAA8C,wDAAS;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,4CAA4C,wDAAS;AACrD,kEAAkE,UAAU;AAC5E;AACA,4CAA4C,wDAAS;AACrD;AACA;AACA;AACA,oEAAoE,UAAU;AAC9E,qBAAqB;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,oDAAoD,wDAAS;AAC7D;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,wDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,qBAAqB,wDAAU;AAC/B,IAAI,+DAAS;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6EAAqB,WAAW,4DAAY;AAC5E,8BAA8B,6EAAqB,WAAW,4DAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,gEAAU;AACd,IAAI,qDAAO,IAAI,4DAAM,CAAC,uDAAS;AAC/B,IAAI,wDAAU,uBAAuB,2DAAW;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,+BAA+B,wDAAU;AACzC,IAAI,+DAAS;AACb;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,yDAAW;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,uBAAuB,wDAAU;AACjC,IAAI,+DAAS;AACb;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,8DAAgB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,cAAc;AACjuBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,4DAAa;AAC1B,iBAAiB,gEAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc,iFAAiF,cAAc;AACxI,wEAAwE,cAAc;AACtF;AACA,mFAAmF,cAAc;AACjG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,yBAAyB,wDAAU;AACnC,IAAI,+DAAS;AACb;AACA;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C,QAAQ,uDAAS;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,kCAAkC,4BAA4B;AAC9D,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,gDAAgD,wDAAU;AAC1D,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB,UAAU,gEAAiB,oDAAoD;AACpG,yBAAyB,4DAAa;AACtC,6BAA6B,gEAAU;AACvC;AACA,aAAa;AACb,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe,EAAE;AAClE;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,0DAA0D,wDAAU;AACpE,IAAI,+DAAS;AACb;AACA;AACA,yBAAyB,kEAAmB;AAC5C,6BAA6B,gEAAU;AACvC;AACA,aAAa;AACb,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe,EAAE;AAClE;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAwD,wDAAU;AAClE,IAAI,+DAAS;AACb;AACA;AACA,yBAAyB,kEAAmB;AAC5C,6BAA6B,gEAAU;AACvC;AACA,aAAa;AACb,KAAK;AACL;;AAEA;AACA;AACA,sBAAsB,SAAS,oDAAoD;AACnF;AACA,kDAAkD,wDAAU;AAC5D,IAAI,8DAAQ;AACZ;AACA,kBAAkB,4DAAY,EAAE,0DAAW,EAAE,kEAAmB;AAChE,oDAAoD,2DAAW;AAC/D;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbmDAAmD,0BAA0B;AAC7E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0EAA0E,aAAa,EAAE;AACzF;;AAEA;AACA,yEAAyE,aAAa,EAAE;AACxF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qEAAqE,aAAa,EAAE;AACpF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sEAAsE,aAAa,EAAE;AACre;AAC9C;;AAE2kD;AAC3kD;;;;;;;;;;;;;AC//LA;AAAe,qrBAAsnB,6DAA6D,+ZAA+Z,8DAA8D,ipBAAipB,+DAA+D,0nBAA0nB,iEAAiE,0pBAA0pB,wEAAwE,2lBAA2lB,gEAAgE,+xBAA+xB,4BAA4B,ycAAyc,gCAAgC,mWAAmW,eAAe,iS;;;;;;;;;;;;;;;;;;;ACAphL;AACc;AAEX;AAE5C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wDAAU;KACtB;CACF,CAAC;AAMF,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;CAAG;AAA1B,uBAAuB;IAJnC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;AChBK;AACM;AACM;AACE;AACV;AAEsB;AACK;AAC5B;AAa5C,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;CAAG;AAAnB,gBAAgB;IAX5B,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,kEAAmB;YACnB,qEAAgB;YAChB,qFAAqB;YACrB,0DAAW;YACX,+EAAuB;SACxB;QACD,YAAY,EAAE,CAAC,wDAAU,CAAC;KAC3B,CAAC;GACW,gBAAgB,CAAG;AAAH;;;;;;;;;;;;;ACrB7B;AAAe,2EAAY,kBAAkB,qBAAqB,GAAG,YAAY,qBAAqB,GAAG,cAAc,kCAAkC,GAAG,cAAc,oBAAoB,GAAG,iBAAiB,oCAAoC,GAAG,WAAW,oBAAoB,GAAG,WAAW,uBAAuB,GAAG,6CAA6C,+6C;;;;;;;;;;;;;;;;;;;;;;;;ACA5T;AACmB;AAClB;AACU;AACnB;AACS;AACC;AACG;AACtD,MAAM,SAAS,GAAG,cAAc,CAAC;AACjC,MAAM,SAAS,GAAG,aAAa,CAAC;AAOhC,IAAa,UAAU,GAAvB,MAAa,UAAU;IAOrB,YACU,WAAwB,EACxB,IAAgB,EAChB,IAAgB,EAChB,OAAe,EACf,MAAwB,EACxB,OAAyB;QALzB,gBAAW,GAAX,WAAW,CAAa;QACxB,SAAI,GAAJ,IAAI,CAAY;QAChB,SAAI,GAAJ,IAAI,CAAY;QAChB,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAkB;QACxB,YAAO,GAAP,OAAO,CAAkB;QAXlC,cAAS,GAAG,KAAK,CAAC;QAElB,YAAO,GAAO,IAAI,CAAC;QACnB,eAAU,GAAO,IAAI,CAAC;IASjB,CAAC;IAEP,QAAQ;QACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC1C,IAAI,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC/B,KAAK,EAAC,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,EAAC,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACjE,QAAQ,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,eAAe,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC1C,OAAO,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAClC,OAAO,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAClC,EACD;YACE,SAAS,EAAE,kEAAS,CAAC,UAAU,EAAE,iBAAiB,CAAC;SACtD,CACE,CAAC;IACJ,CAAC;IAKD,QAAQ,CAAC,IAAc;QACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,OAAO,EAAC,WAAW,EAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YACjD,EAAE,CAAC,OAAO,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QACL,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrD,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvD,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9D,QAAQ,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC5E,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC1D,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5D,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5D,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE1D,+BAA+B;QAC/B,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACrB,OAAO;SACV;QAEC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,sBAAsB,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YACpF,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC5B,CAAC,EAAC,GAAG,GAAE;YACL,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvC,CAAC,CAAC,CAAC;IACT,CAAC;IAGD,aAAa,CAAC,KAAW;QACvB,MAAM,IAAI,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAC,OAAO,EAAC,IAAI,EAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,sBAAsB,EAAE,CAAC;IAE5D,CAAC;IAED,QAAQ,CAAC,KAAW;QAElB,MAAM,IAAI,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,IAAI,EAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,sBAAsB,EAAE,CAAC;IAE3D,CAAC;CAIA;;YAxFwB,0DAAW;YACnB,yEAAW;YACV,+DAAU;YACR,sDAAO;YACP,mEAAgB;YAChB,gEAAiB;;AAbxB,UAAU;IANtB,+DAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,oNAAkC;;KAEnC,CAAC;2EAUuB,0DAAW;QACnB,yEAAW;QACV,+DAAU;QACR,sDAAO;QACP,mEAAgB;QAChB,gEAAiB;GAbxB,UAAU,CAgGtB;AAhGsB","file":"sign-up-sign-up-module-es2015.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { Injectable, Input, Directive, Inject, LOCALE_ID, TemplateRef, ViewContainerRef, forwardRef, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { getLocaleNumberSymbol, NumberSymbol, DecimalPipe, CommonModule } from '@angular/common';\nimport { FormArray, FormControl, FormGroup, FormBuilder, NG_VALIDATORS, NG_VALUE_ACCESSOR, NG_ASYNC_VALIDATORS, FormsModule, ReactiveFormsModule, AbstractControl } from '@angular/forms';\n\nconst CONTROLS_ERROR = \"controlsError\";\r\nconst VALUE_CHANGED_SYNC = \"valueChangedSync\";\r\nconst FUNCTION_STRING = \"function\";\r\nconst OBJECT_STRING = \"object\";\r\nconst RX_WEB_VALIDATOR = \"rxwebValidator\";\r\nconst NUMBER = \"number\";\r\nconst BOOLEAN = \"boolean\";\r\nconst TEMPLATE_VALIDATION_CONFIG = \"template-validation-config\";\r\nconst CONDITIONAL_VALIDATOR = \"conditionalValidator\";\r\nconst VALIDATOR_CONFIG = \"validatorConfig\";\r\nconst THIS = \"this\";\r\nconst RXCODE = \"-rxw-\";\r\nconst MODEL = \"model\";\r\nconst MODEL_INSTANCE = \"modelInstance\";\r\nconst PATCH = \"patch\";\n\nclass Linq {\r\n    static functionCreator(expression) {\r\n        var functionSetter = [];\r\n        var match = expression.match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=>(.*)/);\r\n        var splitSelect = match[2].split(\",\");\r\n        for (var i = 0; i < splitSelect.length; i++) {\r\n            var equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);\r\n            if (equalToOperator !== null) {\r\n                functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\r\n            }\r\n            else {\r\n                equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=(.*)/);\r\n                if (equalToOperator === null) {\r\n                    functionSetter = new Function(match[1], \"return \" + splitSelect.input);\r\n                }\r\n                else {\r\n                    functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\r\n                }\r\n            }\r\n        }\r\n        if (splitSelect.length == 0)\r\n            functionSetter = { accessFunction: new Function(match[1], \"return \" + match[2]) };\r\n        return functionSetter;\r\n    }\r\n    static execute(jObject, config, parentObject, modelInstance, isDynamicConfig) {\r\n        let expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;\r\n        let lastParam = isDynamicConfig ? config : modelInstance;\r\n        if (parentObject && typeof expressionFunction == \"string\")\r\n            expressionFunction = Linq.functionCreator(expressionFunction);\r\n        if (parentObject && expressionFunction)\r\n            return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);\r\n        return true;\r\n    }\r\n    static getConditionPath(texts) {\r\n        let path = \"\";\r\n        for (var i = 1; i < texts.length; i++)\r\n            path += (texts.length - 1) == i ? texts[i].trim() : `${texts[i].trim()}.`;\r\n        return path;\r\n    }\r\n    static expressionParser(expression, isNonValidationExpression) {\r\n        let columns = [];\r\n        let expressionString = expression.toString();\r\n        let expressionArguments = Linq.extractArguments(expressionString);\r\n        if (expressionArguments.length > 0) {\r\n            let splitTexts = [];\r\n            expressionString.replace(/\\s/g, '').replace(new RegExp(/{|}/, \"g\"), \"\").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(t => {\r\n                let texts = t.replace(/\\(|\\)/g, \"\").split(\"||\");\r\n                for (let text of texts)\r\n                    splitTexts.push(text);\r\n            });\r\n            splitTexts.forEach(t => {\r\n                expressionArguments.forEach((x, i) => {\r\n                    t = t.trim();\r\n                    if (t.startsWith(x + '.')) {\r\n                        var splitText = t.split('.');\r\n                        if (splitText.length == 2 || (splitText.length >= 2 && isNonValidationExpression))\r\n                            if (!isNonValidationExpression)\r\n                                columns.push({ propName: splitText[1].trim(), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });\r\n                            else\r\n                                columns.push({ propName: this.getConditionPath(splitText), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });\r\n                        else {\r\n                            var arrayProp = splitText[1].split('[');\r\n                            let jObject = {\r\n                                propName: splitText[splitText.length - 1].trim(),\r\n                                objectPropName: arrayProp[0],\r\n                                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\r\n                                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i\r\n                            };\r\n                            columns.push(jObject);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return columns;\r\n    }\r\n    static extractArguments(splitText) {\r\n        let expressionArguments = [THIS];\r\n        if (splitText[0].trim() !== \"(\" && !splitText.trim().startsWith(\"function\")) {\r\n            let text = splitText[0].split(\"=>\")[0];\r\n            expressionArguments.push(text.trim().replace(\"(\", \"\").replace(\")\", \"\"));\r\n        }\r\n        else {\r\n            let splitTexts = splitText.match(/\\(([^)]+)\\)/g);\r\n            if (splitTexts && splitTexts[0])\r\n                splitTexts[0].split(\",\").forEach(t => expressionArguments.push(t.trim().replace(\"(\", \"\").replace(\")\", \"\")));\r\n        }\r\n        return expressionArguments;\r\n    }\r\n    static expressionColumns(expression, isNonValidationExpression = false) {\r\n        var columns = [];\r\n        let splitExpressions = [];\r\n        if (typeof expression == \"string\") {\r\n            expression.split(\"=>\")[1].split(\" && \").forEach(t => {\r\n                t.split(\" || \").forEach(x => {\r\n                    splitExpressions.push(x.trim().split(' ')[0]);\r\n                });\r\n            });\r\n            splitExpressions.forEach(t => {\r\n                var splitText = t.split('.');\r\n                if (splitText.length == 2)\r\n                    columns.push({ propName: splitText[1].trim() });\r\n                else {\r\n                    var arrayProp = splitText[1].split('[');\r\n                    let jObject = {\r\n                        propName: splitText[splitText.length - 1].trim(),\r\n                        objectPropName: arrayProp[0],\r\n                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined\r\n                    };\r\n                    columns.push(jObject);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            columns = Linq.expressionParser(expression, isNonValidationExpression);\r\n        }\r\n        return columns;\r\n    }\r\n    static dynamicConfigParser(expression, propName) {\r\n        let controlNames = [];\r\n        let expressionString = expression.toString();\r\n        let expressionArguments = Linq.extractArguments(expressionString);\r\n        let splitString = expressionString.replace(new RegExp(/\\r?\\n|\\r|;/g), ' ').replace(/[\"%()\\{}=\\\\?�`'#<>|,;:+-]+/g, \" \").split(/ /g);\r\n        if (expressionArguments.length > 3)\r\n            expressionArguments.splice(expressionArguments.length - 1, 1);\r\n        expressionArguments.forEach(t => {\r\n            splitString.filter(x => x != `${t}.${propName}` && x.startsWith(`${t}.`)).forEach(x => {\r\n                let split = x.split('.');\r\n                if (split.length == 2)\r\n                    controlNames.push({ propName: x.replace(`${t}.`, '') });\r\n                else {\r\n                    var arrayProp = split[1].split('[');\r\n                    let jObject = {\r\n                        propName: split[split.length - 1].trim(),\r\n                        objectPropName: arrayProp[0],\r\n                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\r\n                    };\r\n                    controlNames.push(jObject);\r\n                }\r\n            });\r\n        });\r\n        return controlNames;\r\n    }\r\n}\n\nconst AnnotationTypes = {\r\n    numeric: 'numeric',\r\n    required: 'required',\r\n    minLength: 'minLength',\r\n    maxLength: 'maxLength',\r\n    minNumber: 'minNumber',\r\n    maxNumber: 'maxNumber',\r\n    pattern: 'pattern',\r\n    password: 'password',\r\n    compare: 'compare',\r\n    minDate: 'minDate',\r\n    maxDate: 'maxDate',\r\n    alpha: 'alpha',\r\n    alphaNumeric: 'alphaNumeric',\r\n    email: 'email',\r\n    hexColor: 'hexColor',\r\n    lowerCase: 'lowerCase',\r\n    url: 'url',\r\n    upperCase: 'upperCase',\r\n    nested: 'nested',\r\n    propArray: 'propArray',\r\n    propObject: 'propObject',\r\n    contains: 'contains',\r\n    range: 'range',\r\n    custom: 'custom',\r\n    digit: \"digit\",\r\n    creditCard: \"creditCard\",\r\n    time: \"time\",\r\n    json: \"json\",\r\n    greaterThan: \"greaterThan\",\r\n    greaterThanEqualTo: \"greaterThanEqualTo\",\r\n    lessThan: \"lessThan\",\r\n    lessThanEqualTo: \"lessThanEqualTo\",\r\n    choice: \"choice\",\r\n    different: \"different\",\r\n    even: \"even\",\r\n    odd: \"odd\",\r\n    factor: \"factor\",\r\n    leapYear: \"leapYear\",\r\n    allOf: \"allOf\",\r\n    oneOf: \"oneOf\",\r\n    noneOf: \"noneOf\",\r\n    mac: \"mac\",\r\n    ascii: \"ascii\",\r\n    dataUri: \"dataUri\",\r\n    port: \"port\",\r\n    latLong: \"latLong\",\r\n    extension: \"extension\",\r\n    fileSize: \"fileSize\",\r\n    endsWith: \"endsWith\",\r\n    startsWith: \"startsWith\",\r\n    primeNumber: \"primeNumber\",\r\n    latitude: \"latitude\",\r\n    longitude: \"longitude\",\r\n    compose: \"compose\",\r\n    rule: \"rule\",\r\n    file: \"file\",\r\n    image: \"image\",\r\n    unique: \"unique\",\r\n    notEmpty: \"notEmpty\",\r\n    ip: \"ip\",\r\n    cusip: \"cusip\",\r\n    grid: \"grid\",\r\n    date: 'date',\r\n    and: 'and',\r\n    or: 'or',\r\n    not: 'not',\r\n    minTime: 'minTime',\r\n    maxTime: 'maxTime',\r\n    requiredTrue: 'requiredTrue',\r\n    mask: 'mask'\r\n};\n\nconst PROPERTY = \"property\";\r\nconst OBJECT_PROPERTY = \"objectProperty\";\r\nconst ARRAY_PROPERTY = \"arrayProperty\";\r\nconst STRING = \"string\";\r\nconst MESSAGE = \"message\";\r\nconst BLANK = \"\";\n\nconst ELEMENT_VALUE = \"value\";\r\nconst BLUR = \"blur\";\r\nconst FOCUS = \"focus\";\r\nconst CHANGE = \"change\";\r\nconst KEY_DOWN = \"keydown\";\r\nconst KEY_PRESS = \"keypress\";\r\nconst PASTE = \"paste\";\n\nconst INPUT = \"INPUT\";\r\nconst SELECT = \"SELECT\";\r\nconst CHECKBOX = \"checkbox\";\r\nconst RADIO = \"radio\";\r\nconst FILE = \"file\";\r\nconst TEXTAREA = \"textarea\";\n\nconst ValidationAlphabetLocale = {\r\n    'danish': 'danish',\r\n    'french': 'french',\r\n    'german': 'german',\r\n    'greek': 'greek',\r\n    'spanish': 'spanish',\r\n    'russian': 'russian'\r\n};\n\nconst DECORATORS = {\r\n    disabled: 'disabled',\r\n    error: 'error',\r\n    trim: 'trim',\r\n    ltrim: 'ltrim',\r\n    rtrim: 'rtrim',\r\n    blacklist: 'blacklist',\r\n    stripLow: 'stripLow',\r\n    toBoolean: 'toBoolean',\r\n    toDate: 'toDate',\r\n    toDouble: 'toDouble',\r\n    toFloat: 'toFloat',\r\n    toInt: 'toInt',\r\n    string: 'toString',\r\n    whitelist: 'whitelist',\r\n    escape: 'escape',\r\n    prefix: 'prefix',\r\n    suffix: 'suffix',\r\n    sanitize: 'sanitize',\r\n    elementClass: 'elementClass'\r\n};\n\nconst defaultContainer = new (class {\r\n    constructor() {\r\n        this.instances = [];\r\n        this.modelIncrementCount = 0;\r\n    }\r\n    get(instanceFunc) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        return instance;\r\n    }\r\n    getInstance(target, parameterIndex, propertyKey, decoratorType) {\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        let instanceFunc = !isPropertyKey ? target : target.constructor;\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (!instance)\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n        return instance;\r\n    }\r\n    addPropsConfig(target, configs) {\r\n        let instanceContainer = this.instances.filter(instance => instance.instance == target)[0];\r\n        if (instanceContainer) {\r\n            for (let config of configs) {\r\n                for (let prop of config.propNames) {\r\n                    let propertyInfo = instanceContainer.properties.filter(t => t.name == prop && (t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY))[0];\r\n                    if (propertyInfo) {\r\n                        this.addPropConfig(target, [propertyInfo], config);\r\n                    }\r\n                    else if (prop === \":all:\")\r\n                        this.addPropConfig(target, instanceContainer.properties.filter(t => t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY), config);\r\n                }\r\n            }\r\n        }\r\n        else if (configs === undefined)\r\n            this.addInstanceContainer(target);\r\n    }\r\n    addPropConfig(target, properties, config) {\r\n        for (var propertyInfo of properties) {\r\n            let excludeProp = false;\r\n            if (config.excludePropNames)\r\n                excludeProp = config.excludePropNames.filter(t => t == propertyInfo.name)[0] !== undefined;\r\n            if (!excludeProp) {\r\n                if (config.validationConfig)\r\n                    for (let typeName in config.validationConfig) {\r\n                        this.init({ constructor: target }, 0, propertyInfo.name, typeName, config.validationConfig[typeName] === true ? undefined : config.validationConfig[typeName], false);\r\n                    }\r\n                if (config.error)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.error, DECORATORS.error);\r\n                if (config.disable)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.disable, DECORATORS.disabled);\r\n                if (config.elementClass)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.elementClass, DECORATORS.elementClass);\r\n                if (config.ignore)\r\n                    propertyInfo.ignore = config.ignore;\r\n            }\r\n        }\r\n    }\r\n    addSanitizer(target, parameterIndex, propertyKey, decoratorType, value) {\r\n        let instance = this.getInstance(target, parameterIndex, propertyKey, decoratorType);\r\n        if (instance) {\r\n            if (!instance.sanitizers[propertyKey])\r\n                instance.sanitizers[propertyKey] = [];\r\n            instance.sanitizers[propertyKey].push({ name: decoratorType, config: value });\r\n        }\r\n    }\r\n    addDecoratorConfig(target, parameterIndex, propertyKey, config, decoratorType) {\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        let instanceFunc = !isPropertyKey ? target : target.constructor;\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (!instance)\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n        instance.nonValidationDecorators[decoratorType].conditionalExpressions[propertyKey] = config.conditionalExpression;\r\n        let columns = Linq.expressionColumns(config.conditionalExpression, true);\r\n        columns.forEach(column => {\r\n            if (column.argumentIndex !== -1) {\r\n                let columnName = (!column.objectPropName) ? `${column.propName}${RXCODE}${column.argumentIndex}` : `${column.objectPropName}.${column.propName}${RXCODE}${column.argumentIndex}`;\r\n                if (!instance.nonValidationDecorators[decoratorType].changeDetection[columnName])\r\n                    instance.nonValidationDecorators[decoratorType].changeDetection[columnName] = [];\r\n                let disabledColumns = instance.nonValidationDecorators[decoratorType].changeDetection[columnName];\r\n                if (disabledColumns.indexOf(columnName) === -1)\r\n                    disabledColumns.push(propertyKey);\r\n            }\r\n            else {\r\n                if (!instance.nonValidationDecorators[decoratorType].controlProp[propertyKey])\r\n                    instance.nonValidationDecorators[decoratorType].controlProp[propertyKey] = {};\r\n                instance.nonValidationDecorators[decoratorType].controlProp[propertyKey][column.propName.replace(\";\", \"\")] = true;\r\n            }\r\n        });\r\n    }\r\n    init(target, parameterIndex, propertyKey, annotationType, config, isAsync) {\r\n        var decoratorConfiguration = {\r\n            propertyIndex: parameterIndex,\r\n            propertyName: propertyKey,\r\n            annotationType: annotationType,\r\n            config: config,\r\n            isAsync: isAsync\r\n        };\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        this.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);\r\n    }\r\n    initPropertyObject(name, propertyType, entity, target, config) {\r\n        var propertyInfo = {\r\n            name: name,\r\n            propertyType: propertyType,\r\n            entity: entity,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            entityProvider: config ? config.entityProvider : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    }\r\n    addInstanceContainer(instanceFunc) {\r\n        let instanceContainer = {\r\n            instance: instanceFunc,\r\n            propertyAnnotations: [],\r\n            properties: [],\r\n            nonValidationDecorators: {\r\n                disabled: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }, error: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }, elementClass: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }\r\n            },\r\n            sanitizers: {}\r\n        };\r\n        this.instances.push(instanceContainer);\r\n        return instanceContainer;\r\n    }\r\n    addProperty(instanceFunc, propertyInfo, isFromAnnotation = false) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance) {\r\n            this.addPropertyInfo(instance, propertyInfo, !isFromAnnotation);\r\n        }\r\n        else {\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n            this.addPropertyInfo(instance, propertyInfo);\r\n        }\r\n    }\r\n    addPropertyInfo(instance, propertyInfo, isAddProperty = false) {\r\n        var property = this.getProperty(instance, propertyInfo);\r\n        if (!property)\r\n            instance.properties.push(propertyInfo);\r\n        else if (isAddProperty)\r\n            this.updateProperty(property, propertyInfo);\r\n    }\r\n    addAnnotation(instanceFunc, decoratorConfiguration) {\r\n        this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName }, true);\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance)\r\n            instance.propertyAnnotations.push(decoratorConfiguration);\r\n        else {\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n            instance.propertyAnnotations.push(decoratorConfiguration);\r\n        }\r\n        if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpression) {\r\n            let columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpression);\r\n            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\r\n        }\r\n        if (decoratorConfiguration.config && decoratorConfiguration.config.dynamicConfig) {\r\n            let columns = Linq.dynamicConfigParser(decoratorConfiguration.config.dynamicConfig, decoratorConfiguration.propertyName);\r\n            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\r\n        }\r\n        this.setConditionalColumns(instance, decoratorConfiguration);\r\n    }\r\n    setConditionalColumns(instance, decoratorConfiguration) {\r\n        if (instance && decoratorConfiguration.config) {\r\n            if (decoratorConfiguration.annotationType == AnnotationTypes.and || decoratorConfiguration.annotationType == AnnotationTypes.or || decoratorConfiguration.annotationType == AnnotationTypes.not) {\r\n                Object.keys(decoratorConfiguration.config.validation).forEach(t => {\r\n                    if (typeof decoratorConfiguration.config.validation[t] !== \"boolean\")\r\n                        this.setLogicalConditional(instance, t, decoratorConfiguration.config.validation[t].fieldName, decoratorConfiguration.propertyName);\r\n                });\r\n            }\r\n            else\r\n                this.setLogicalConditional(instance, decoratorConfiguration.annotationType, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);\r\n        }\r\n    }\r\n    setLogicalConditional(instance, annotationType, fieldName, propertyName) {\r\n        if (instance && ((annotationType == AnnotationTypes.compare || annotationType == AnnotationTypes.greaterThan || annotationType == AnnotationTypes.greaterThanEqualTo || annotationType == AnnotationTypes.lessThan || annotationType == AnnotationTypes.lessThanEqualTo || annotationType == AnnotationTypes.different || annotationType == AnnotationTypes.factor || annotationType == AnnotationTypes.minTime || annotationType == AnnotationTypes.maxTime) || (annotationType == AnnotationTypes.creditCard && fieldName) || ((annotationType == AnnotationTypes.minDate || annotationType == AnnotationTypes.maxDate) && fieldName))) {\r\n            this.setConditionalValueProp(instance, fieldName, propertyName);\r\n        }\r\n    }\r\n    setConditionalValueProp(instance, propName, refPropName) {\r\n        if (propName) {\r\n            let splitProps = propName.split ? propName.split('.') : '';\r\n            if (splitProps.length < 2) {\r\n                if (!instance.conditionalValidationProps)\r\n                    instance.conditionalValidationProps = {};\r\n                if (!instance.conditionalValidationProps[propName])\r\n                    instance.conditionalValidationProps[propName] = [];\r\n                if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)\r\n                    instance.conditionalValidationProps[propName].push(refPropName);\r\n            }\r\n            else\r\n                this.addChangeValidation(instance, refPropName, [{ argumentIndex: 1, objectPropName: splitProps[0], propName: splitProps[1], referencePropName: refPropName }]);\r\n        }\r\n    }\r\n    addChangeValidation(instance, propertyName, columns) {\r\n        if (instance) {\r\n            if (!instance.conditionalValidationProps)\r\n                instance.conditionalValidationProps = {};\r\n            columns.forEach(t => {\r\n                if (t.propName && !t.objectPropName) {\r\n                    if (!instance.conditionalValidationProps[t.propName])\r\n                        instance.conditionalValidationProps[t.propName] = [];\r\n                    if (instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)\r\n                        instance.conditionalValidationProps[t.propName].push(propertyName);\r\n                }\r\n                else {\r\n                    if (t.propName && t.objectPropName) {\r\n                        if (!instance.conditionalObjectProps)\r\n                            instance.conditionalObjectProps = [];\r\n                        t.referencePropName = propertyName;\r\n                        instance.conditionalObjectProps.push(t);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    clearInstance(instanceFunc) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance) {\r\n            let indexOf = this.instances.indexOf(instance);\r\n            this.instances.splice(indexOf, 1);\r\n        }\r\n    }\r\n    getProperty(instance, propertyInfo) {\r\n        return instance.properties.filter(t => t.name == propertyInfo.name)[0];\r\n    }\r\n    updateProperty(property, currentProperty) {\r\n        property.dataPropertyName = currentProperty.dataPropertyName;\r\n        property.defaultValue = currentProperty.defaultValue;\r\n    }\r\n})();\n\nconst RegExRule = {\r\n    alpha: /^[a-zA-Z]+$/,\r\n    alphaExits: /[a-zA-Z]/,\r\n    alphaWithSpace: /^[a-zA-Z\\s]+$/,\r\n    macId: /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/,\r\n    onlyDigit: /^[0-9]+$/,\r\n    isDigitExits: /[0-9]/,\r\n    lowerCase: /[a-z]/,\r\n    upperCase: /[A-Z]/,\r\n    specialCharacter: /[!@#$%^&*(),.?\":{}|<>]/,\r\n    advancedEmail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n    basicEmail: /^(([^<>()\\[\\]\\\\.,,:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    alphaNumeric: /^[0-9a-zA-Z]+$/,\r\n    alphaNumericWithSpace: /^[0-9a-zA-Z\\s]+$/,\r\n    hexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\r\n    strictHexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\r\n    float: /^(?:[-+]?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/,\r\n    decimal: /^[-+]?([0-9]+|\\.[0-9]+|[0-9]+\\.[0-9]+)$/,\r\n    hexaDecimal: /^[0-9A-F]+$/i,\r\n    date: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/,\r\n    time: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,\r\n    timeWithSeconds: /^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/,\r\n    url: /^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/,\r\n    localhostUrl: /^(https?:\\/\\/localhost\\:([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|https?:\\/\\/localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))$/,\r\n    interanetUrl: /^(https?:\\/\\/[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9])$/,\r\n    ascii: /^[\\x00-\\x7F]+$/,\r\n    dataUri: /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*?)$/i,\r\n    lat: /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/,\r\n    long: /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/,\r\n    ipV4: /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/,\r\n    ipV6: /^((?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(:[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(:[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(:[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(:[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,6}|:)|(?::((?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(%[0-9a-zA-Z]{1,})?$/,\r\n    cidrV4: /^(3[0-2]|[12]?[0-9])$/,\r\n    cidrV6: /^(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\r\n    cusip: /^[0-9A-Z]{9}$/,\r\n    grid: /^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g\r\n};\n\nconst ALPHABET = \"alphabet\";\r\nconst DIGIT = \"digit\";\r\nconst CONTAINS = \"contains\";\r\nconst LOWERCASE = \"lowerCase\";\r\nconst UPPERCASE = \"upperCase\";\r\nconst SPECIAL_CHARACTER = \"specialCharacter\";\r\nconst MIN_LENGTH = \"minLength\";\r\nconst MAX_LENGTH = \"maxLength\";\r\nclass RegexValidator {\r\n    static isExits(value, regex) {\r\n        return value.match(regex) != null;\r\n    }\r\n    static isValid(value, regex) {\r\n        return regex.test(value);\r\n    }\r\n    static isNotBlank(value, isRemoveSpace = false) {\r\n        return !isRemoveSpace ?\r\n            (value === 0) || (value !== undefined && value !== null && value !== \"\") :\r\n            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== \"\");\r\n    }\r\n    static isValidPassword(passwordValidation, value) {\r\n        let isValid = false;\r\n        let keyName = \"status\";\r\n        let objectProperties = Object.getOwnPropertyNames(passwordValidation);\r\n        for (let propertyName of objectProperties) {\r\n            switch (propertyName) {\r\n                case ALPHABET:\r\n                    isValid = RegexValidator.isExits(value, RegExRule.alphaExits);\r\n                    keyName = ALPHABET;\r\n                    break;\r\n                case DIGIT:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);\r\n                    keyName = DIGIT;\r\n                    break;\r\n                case CONTAINS:\r\n                    isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;\r\n                    keyName = CONTAINS;\r\n                    break;\r\n                case LOWERCASE:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.lowerCase);\r\n                    keyName = LOWERCASE;\r\n                    break;\r\n                case UPPERCASE:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.upperCase);\r\n                    keyName = UPPERCASE;\r\n                    break;\r\n                case SPECIAL_CHARACTER:\r\n                    isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);\r\n                    keyName = SPECIAL_CHARACTER;\r\n                    break;\r\n                case MIN_LENGTH:\r\n                    isValid = value.length >= passwordValidation[propertyName];\r\n                    keyName = MIN_LENGTH;\r\n                    break;\r\n                case MAX_LENGTH:\r\n                    isValid = value.length <= passwordValidation[propertyName];\r\n                    keyName = MAX_LENGTH;\r\n                    break;\r\n            }\r\n            if (!isValid)\r\n                break;\r\n        }\r\n        return { isValid: isValid, keyName: keyName };\r\n    }\r\n    static isZero(value) {\r\n        return value == 0;\r\n    }\r\n    static commaRegex() {\r\n        return new RegExp(\",\", \"g\");\r\n    }\r\n}\n\nclass ReactiveFormConfig {\r\n    static set(jObject) {\r\n        if (jObject)\r\n            ReactiveFormConfig.json = jObject;\r\n    }\r\n    static get(path) {\r\n        let jObject;\r\n        if (ReactiveFormConfig.json) {\r\n            let splitPath = path.split('.');\r\n            for (let columnName of splitPath) {\r\n                jObject = (!jObject) ? ReactiveFormConfig.json[columnName] : jObject[columnName];\r\n                if (!jObject)\r\n                    break;\r\n            }\r\n        }\r\n        return jObject;\r\n    }\r\n}\r\nReactiveFormConfig.number = {};\r\nReactiveFormConfig.json = {};\r\nReactiveFormConfig.autoInstancePush = false;\n\nfunction isObjectType(value) {\r\n    return !(typeof value == \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value instanceof Date);\r\n}\r\nfunction isObject(value) {\r\n    return Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\nfunction clone(jsonObject) {\r\n    let jObject = {};\r\n    if (isObjectType(jsonObject)) {\r\n        for (var columnName in jsonObject) {\r\n            if (Array.isArray(jsonObject[columnName])) {\r\n                jObject[columnName] = [];\r\n                for (let row of jsonObject[columnName]) {\r\n                    if (isObject(row))\r\n                        jObject[columnName].push(clone(row));\r\n                    else\r\n                        jObject[columnName].push(row);\r\n                }\r\n            }\r\n            else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp))\r\n                jObject[columnName] = clone(jsonObject[columnName]);\r\n            else\r\n                jObject[columnName] = jsonObject[columnName];\r\n        }\r\n        return jObject;\r\n    }\r\n    else\r\n        return jsonObject;\r\n}\r\nfunction merge(firstObject, secondObject) {\r\n    for (var columnName in secondObject) {\r\n        if (Array.isArray(secondObject[columnName])) {\r\n            if (!firstObject[columnName])\r\n                firstObject[columnName] = [];\r\n            for (let row of secondObject[columnName])\r\n                firstObject[columnName].push(clone(row));\r\n        }\r\n        else if (typeof firstObject[columnName] == \"object\" && !(firstObject[columnName] instanceof RegExp))\r\n            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);\r\n        else\r\n            firstObject[columnName] = secondObject[columnName];\r\n    }\r\n    return firstObject;\r\n}\r\nfunction isMatched(jsonObject, compareObject) {\r\n    let isModified = false;\r\n    for (var columnName in compareObject) {\r\n        if (Array.isArray(jsonObject[columnName])) {\r\n            for (var i = 0; i < jsonObject[columnName].length; i++) {\r\n                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);\r\n            }\r\n        }\r\n        else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp))\r\n            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);\r\n        else\r\n            isModified = !(jsonObject[columnName] == compareObject[columnName]);\r\n        if (isModified)\r\n            break;\r\n    }\r\n    return isModified;\r\n}\n\nclass ObjectMaker {\r\n    static toJson(key, config, values) {\r\n        let message = config ? config.message : null;\r\n        let messageKey = undefined;\r\n        if (!message && config && config.messageKey)\r\n            messageKey = config.messageKey;\r\n        let messageText = (message) ? message : (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey || key]) ? ReactiveFormConfig.json.validationMessage[messageKey || key] : '';\r\n        values.forEach((t, index) => {\r\n            messageText = messageText.replace(`{{${index}}}`, t);\r\n        });\r\n        let jObject = {};\r\n        jObject[key] = {\r\n            message: messageText, refValues: values\r\n        };\r\n        if (config && config.isAddMessageKey)\r\n            jObject[\"messageKey\"] = messageKey;\r\n        return jObject;\r\n    }\r\n    static null() {\r\n        return null;\r\n    }\r\n    static getPasswordMessage() {\r\n        let messageKey = \"password\";\r\n        return (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey]) ? ReactiveFormConfig.json.validationMessage[messageKey] : '';\r\n    }\r\n}\n\nconst PROP_ARRAY = \"propArray\";\r\nclass RxFormArray extends FormArray {\r\n    constructor(arrayObject, controls, validatorOrOpts, asyncValidator, arrayConfig) {\r\n        super(controls, validatorOrOpts, asyncValidator);\r\n        this.arrayObject = arrayObject;\r\n        this.arrayConfig = arrayConfig;\r\n        this._isModified = false;\r\n        this._modified = [];\r\n        this.cloneObject(arrayObject);\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    push(control, isAddedInstance = false) {\r\n        let formGroup = this.root;\r\n        if (this.arrayObject)\r\n            if (control.modelInstance) {\r\n                if (!isAddedInstance)\r\n                    this.arrayObject.push(control.modelInstance);\r\n                else\r\n                    this.arrayObject[this.arrayObject.length] = control.modelInstance;\r\n            }\r\n        super.push(control);\r\n        if (formGroup[VALUE_CHANGED_SYNC])\r\n            formGroup.valueChangedSync();\r\n        this.patch();\r\n        this.checkValidation();\r\n    }\r\n    patch() {\r\n        this.checkModification();\r\n        if (this.parent)\r\n            this.parent[PATCH]();\r\n    }\r\n    resetForm(options) {\r\n        if (options && options.index >= 0 && options.groupOption) {\r\n            this.controls[options.index].resetForm(options.groupOption);\r\n        }\r\n        else {\r\n            for (var i = 0; i < this._baseValue.length; i++) {\r\n                if (this.controls[i] !== undefined)\r\n                    this.controls[i].resetForm({ value: this._baseValue[i] });\r\n                else if (options && options.pushFunction) {\r\n                    let formGroup = options.pushFunction(this._baseValue[i]);\r\n                    this.push(formGroup);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    commit() {\r\n        this._baseValue = [];\r\n        for (let formGroup of this.controls) {\r\n            formGroup.commit();\r\n            this._baseValue.push(clone(formGroup.value));\r\n        }\r\n        this.patch();\r\n    }\r\n    removeAt(index, isRemovedInstance = false) {\r\n        let formGroup = this.root;\r\n        if (!isRemovedInstance)\r\n            this.arrayObject.splice(index, 1);\r\n        else {\r\n            for (var i = index; i < this.arrayObject.length - 1; i++)\r\n                this.arrayObject[i] = this.arrayObject[i + 1];\r\n            this.arrayObject.pop();\r\n        }\r\n        super.removeAt(index);\r\n        if (formGroup[VALUE_CHANGED_SYNC])\r\n            formGroup.valueChangedSync();\r\n        this.patch();\r\n        this.checkValidation();\r\n    }\r\n    checkValidation() {\r\n        setTimeout(() => {\r\n            if (this.arrayConfig != undefined && this.arrayConfig.allowMaxIndex && this.length > this.arrayConfig.allowMaxIndex)\r\n                this.setErrors(ObjectMaker.toJson(PROP_ARRAY, this.arrayConfig, [this.length, this.arrayConfig.allowMaxIndex]));\r\n            else if (this.errors && this.errors[PROP_ARRAY])\r\n                delete this.errors[PROP_ARRAY];\r\n        });\r\n    }\r\n    checkModification() {\r\n        this._isModified = !(this._baseValue.length == this.controls.length);\r\n        if (!this._isModified)\r\n            for (var i = 0; i < this.controls.length; i++) {\r\n                this._isModified = isMatched(this._baseValue[i], this.controls[i].value);\r\n                if (this._isModified)\r\n                    break;\r\n            }\r\n    }\r\n    cloneObject(value) {\r\n        this._baseValue = [];\r\n        for (let row of value) {\r\n            this._baseValue.push(clone(row));\r\n        }\r\n    }\r\n}\n\nvar NumericValueType;\r\n(function (NumericValueType) {\r\n    NumericValueType[NumericValueType[\"PositiveNumber\"] = 1] = \"PositiveNumber\";\r\n    NumericValueType[NumericValueType[\"NegativeNumber\"] = 2] = \"NegativeNumber\";\r\n    NumericValueType[NumericValueType[\"Both\"] = 3] = \"Both\";\r\n})(NumericValueType || (NumericValueType = {}));\n\nvar IpVersion;\r\n(function (IpVersion) {\r\n    IpVersion[IpVersion[\"V4\"] = 1] = \"V4\";\r\n    IpVersion[IpVersion[\"V6\"] = 2] = \"V6\";\r\n    IpVersion[IpVersion[\"AnyOne\"] = 3] = \"AnyOne\";\r\n})(IpVersion || (IpVersion = {}));\n\nvar ErrorMessageBindingStrategy;\r\n(function (ErrorMessageBindingStrategy) {\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"None\"] = 0] = \"None\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnSubmit\"] = 1] = \"OnSubmit\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirty\"] = 2] = \"OnDirty\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouched\"] = 3] = \"OnTouched\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrTouched\"] = 4] = \"OnDirtyOrTouched\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrSubmit\"] = 5] = \"OnDirtyOrSubmit\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouchedOrSubmit\"] = 6] = \"OnTouchedOrSubmit\";\r\n})(ErrorMessageBindingStrategy || (ErrorMessageBindingStrategy = {}));\n\nvar ResetFormType;\r\n(function (ResetFormType) {\r\n    ResetFormType[ResetFormType[\"ControlsOnly\"] = 1] = \"ControlsOnly\";\r\n    ResetFormType[ResetFormType[\"FormGroupsOnly\"] = 2] = \"FormGroupsOnly\";\r\n    ResetFormType[ResetFormType[\"FormArraysOnly\"] = 3] = \"FormArraysOnly\";\r\n    ResetFormType[ResetFormType[\"ControlsAndFormGroupsOnly\"] = 4] = \"ControlsAndFormGroupsOnly\";\r\n    ResetFormType[ResetFormType[\"DefinedPropsOnly\"] = 5] = \"DefinedPropsOnly\";\r\n    ResetFormType[ResetFormType[\"All\"] = 6] = \"All\";\r\n})(ResetFormType || (ResetFormType = {}));\n\nconst MODEL_INSTANCE_VALUE = \"modelInstanceValue\";\r\nclass ApplicationUtil {\r\n    static getParentObjectValue(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent.value;\r\n        }\r\n        return {};\r\n    }\r\n    static getParentModelInstanceValue(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent[MODEL_INSTANCE_VALUE];\r\n        }\r\n        return {};\r\n    }\r\n    static getRootFormGroup(control) {\r\n        if (control.parent) {\r\n            return this.getRootFormGroup(control.parent);\r\n        }\r\n        return control;\r\n    }\r\n    static getParentControl(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent;\r\n        }\r\n        return control;\r\n    }\r\n    static getFormControlName(control) {\r\n        let controlName = '';\r\n        if (control.parent) {\r\n            for (var formControlName in control.parent.controls) {\r\n                if (control.parent.controls[formControlName] == control) {\r\n                    controlName = formControlName;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return controlName;\r\n    }\r\n    static getParentFormArray(control) {\r\n        if (control.parent && !(control.parent instanceof FormArray || control.parent instanceof RxFormArray)) {\r\n            let parent = this.getParentFormArray(control.parent);\r\n            return parent;\r\n        }\r\n        return control.parent;\r\n    }\r\n    static toLower(value) {\r\n        if (value)\r\n            return String(value).toLowerCase();\r\n        return value;\r\n    }\r\n    static getControl(fieldName, formGroup) {\r\n        let splitText = fieldName.split('.');\r\n        if (splitText.length > 1) {\r\n            var formControl = formGroup;\r\n            splitText.forEach((name, index) => { formControl = formControl.controls[name]; });\r\n            return formControl;\r\n        }\r\n        else\r\n            return formGroup.controls[fieldName];\r\n    }\r\n    static getFormControl(fieldName, control) {\r\n        let splitText = fieldName.split('.');\r\n        if (splitText.length > 1 && control.parent) {\r\n            var formControl = this.getParentControl(control);\r\n            splitText.forEach((name, index) => { formControl = formControl.controls[name]; });\r\n            return formControl;\r\n        }\r\n        return (control.parent) ? control.parent.get([fieldName]) : undefined;\r\n    }\r\n    static parentObjectValue(control) {\r\n        if (!control.parent)\r\n            return control;\r\n        else\r\n            control = this.parentObjectValue(control.parent);\r\n        return control;\r\n    }\r\n    static isNumeric(value) {\r\n        return (value - parseFloat(value) + 1) >= 0;\r\n    }\r\n    static notEqualTo(primaryValue, secondaryValue) {\r\n        let firstValue = (primaryValue === undefined || primaryValue === null) ? \"\" : primaryValue;\r\n        let secondValue = (secondaryValue === undefined || secondaryValue === null) ? \"\" : secondaryValue;\r\n        if (firstValue instanceof Date && secondValue instanceof Date)\r\n            return +firstValue != +secondValue;\r\n        return (firstValue != secondValue);\r\n    }\r\n    static numericValidation(allowDecimal, acceptValue) {\r\n        let decimalSymbol;\r\n        if (ReactiveFormConfig && ReactiveFormConfig.number) {\r\n            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\r\n        }\r\n        else {\r\n            decimalSymbol = \".\";\r\n        }\r\n        acceptValue = (acceptValue == undefined) ? NumericValueType.PositiveNumber : acceptValue;\r\n        let regex = /^[0-9]+$/;\r\n        switch (acceptValue) {\r\n            case NumericValueType.PositiveNumber:\r\n                regex = (!allowDecimal) ? /^[0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[0-9\\.]+$/ : /^[0-9\\,]+$/;\r\n                break;\r\n            case NumericValueType.NegativeNumber:\r\n                regex = (!allowDecimal) ? /^[-][0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[-][0-9\\.]+$/ : /^[-][0-9\\,]+$/;\r\n                break;\r\n            case NumericValueType.Both:\r\n                regex = (!allowDecimal) ? /^[-|+]?[0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[-|+]?[0-9\\.]+$/ : /^[-|+]?[0-9\\,]+$/;\r\n                break;\r\n        }\r\n        return regex;\r\n    }\r\n    static configureControl(control, config, type) {\r\n        if (!control.validatorConfig) {\r\n            let jObject = {};\r\n            jObject[type] = config;\r\n            Object.assign(control, { validatorConfig: jObject });\r\n        }\r\n        else\r\n            control.validatorConfig[type] = config;\r\n    }\r\n    static lowerCaseWithTrim(value) {\r\n        return typeof value === \"string\" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();\r\n    }\r\n    /** Check if a value is an object */\r\n    static isObject(value) {\r\n        return Object.prototype.toString.call(value) === '[object Object]';\r\n    }\r\n    /** Check if a value is an object */\r\n    static isArray(value) {\r\n        return Array.isArray(value);\r\n    }\r\n    static cloneValue(value) {\r\n        return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? [...value] : Object.assign({}, value) : value;\r\n    }\r\n}\n\nconst ISO_DATE_REGEX = /^(\\d{4}-\\d{1,2}-\\d{1,2})$/;\r\nclass DateProvider {\r\n    isDate(value) {\r\n        return value instanceof Date && !isNaN(value.valueOf());\r\n    }\r\n    getRegex(dateFormat) {\r\n        var regExp;\r\n        switch (dateFormat) {\r\n            case 'ymd':\r\n                regExp = \"^(?:[0-9]{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$\";\r\n                break;\r\n            case 'dmy':\r\n                regExp = \"^(3[01]|[12][0-9]|0?[1-9])-(1[0-2]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\r\n                break;\r\n            case 'mdy':\r\n                regExp = \"^(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\r\n                break;\r\n        }\r\n        return new RegExp(regExp);\r\n    }\r\n    regex() {\r\n        var regExp;\r\n        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator)\r\n            regExp = this.getRegex(ReactiveFormConfig.json.internationalization.dateFormat);\r\n        else\r\n            regExp = (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat) ? this.getRegex(ReactiveFormConfig.json.baseConfig.dateFormat) : this.getRegex(\"mdy\");\r\n        return regExp;\r\n    }\r\n    getDate(value, isBaseFormat = false) {\r\n        let year, month, day;\r\n        if (!this.isDate(value)) {\r\n            let seperator;\r\n            let dateFormat;\r\n            if (ISO_DATE_REGEX.test(value)) {\r\n                seperator = \"-\";\r\n                dateFormat = \"ymd\";\r\n            }\r\n            else {\r\n                seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\r\n                dateFormat = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\r\n            }\r\n            if (!isBaseFormat && ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\r\n                seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n                dateFormat = ReactiveFormConfig.json.internationalization.dateFormat;\r\n            }\r\n            switch (dateFormat) {\r\n                case 'ymd':\r\n                    [year, month, day] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n                case 'dmy':\r\n                    [day, month, year] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n                case 'mdy':\r\n                    [month, day, year] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n            }\r\n            return new Date(year, month - 1, day);\r\n        }\r\n        else\r\n            return value;\r\n    }\r\n    isValid(value, config) {\r\n        if (typeof value == \"string\") {\r\n            // Fixed issue : https://github.com/rxweb/rxweb/issues/280 & feature request : https://github.com/rxweb/rxweb/issues/295\r\n            if (config && config.allowISODate && ISO_DATE_REGEX.test(value))\r\n                return true;\r\n            let seperator = '/';\r\n            if (ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.seperator)\r\n                seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n            value = value.replace(seperator, '-').replace(seperator, '-');\r\n            return this.regex().test(value);\r\n        }\r\n        else\r\n            return this.isDate(value);\r\n    }\r\n    getConfigDateValue(config) {\r\n        let date = config.value;\r\n        if (config.value && typeof config.value == \"string\") {\r\n            date = this.getDate(config.value, true);\r\n        }\r\n        return date;\r\n    }\r\n    getCompareDate(config, control) {\r\n        let date = this.getConfigDateValue(config);\r\n        if (config.fieldName) {\r\n            let checkControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n            if (checkControl && checkControl.value) {\r\n                date = this.getDate(checkControl.value);\r\n            }\r\n        }\r\n        return date;\r\n    }\r\n}\n\nfunction isNotBlank(value) {\r\n    return (value !== undefined && value !== null && value !== \"\");\r\n}\r\nfunction trim(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.trim();\r\n    return value;\r\n}\r\nfunction ltrim(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(/^\\s+/g, '');\r\n    return value;\r\n}\r\nfunction rtrim(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(/\\s+$/g, '');\r\n    return value;\r\n}\r\nfunction blacklist(value, chars) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(new RegExp('[$' + chars + ']+', 'g'), '');\r\n    return value;\r\n}\r\nfunction stripLow(value, keepNewLines) {\r\n    let chars = keepNewLines === true ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';\r\n    return blacklist(value, chars);\r\n}\r\nfunction toBoolean(value, strict) {\r\n    if (isNotBlank(value)) {\r\n        if (strict) {\r\n            return value === '1' || value === 'true';\r\n        }\r\n        return value !== '0' && value !== 'false' && value !== '';\r\n    }\r\n    return value;\r\n}\r\nfunction toFloat(value) {\r\n    if (isNotBlank(value)) {\r\n        var decimalSymbol = '.';\r\n        if (ReactiveFormConfig && ReactiveFormConfig.number) {\r\n            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\r\n        }\r\n        if (decimalSymbol == ',' && typeof value == \"string\")\r\n            value = value.replace(',', '.');\r\n        if (ApplicationUtil.isNumeric(value))\r\n            return parseFloat(value);\r\n    }\r\n    return null;\r\n}\r\nfunction toDouble(value) {\r\n    return toFloat(value);\r\n}\r\nfunction toInt(value, radix) {\r\n    if (isNotBlank(value))\r\n        if (ApplicationUtil.isNumeric(value))\r\n            return parseInt(value, radix || 10);\r\n    return null;\r\n}\r\nfunction toString(value, radix) {\r\n    if (isNotBlank(value))\r\n        return String(value);\r\n    return value;\r\n}\r\nfunction whitelist(value, chars) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(new RegExp(`[^${chars}]+`, 'g'), '');\r\n    return value;\r\n}\r\nfunction toDate(value) {\r\n    var dateProvider = new DateProvider();\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\" && dateProvider.isValid(value, {})) {\r\n            value = dateProvider.getDate(value);\r\n            return value;\r\n        }\r\n    return null;\r\n}\r\nfunction escape(value) {\r\n    if (isNotBlank(value))\r\n        return (value.replace(/&/g, '&amp;')\r\n            .replace(/\"/g, '&quot;')\r\n            .replace(/'/g, '&#x27;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\//g, '&#x2F;')\r\n            .replace(/\\\\/g, '&#x5C;')\r\n            .replace(/`/g, '&#96;'));\r\n    return value;\r\n}\r\nfunction prefix(value, text) {\r\n    if (isNotBlank(value))\r\n        return `${text}${value}`;\r\n    return value;\r\n}\r\nfunction suffix(value, text) {\r\n    if (isNotBlank(value))\r\n        return `${value}${text}`;\r\n    return value;\r\n}\r\nfunction sanitize(value, config) {\r\n    return config.custom(value);\r\n}\r\nconst SANITIZERS = {\r\n    trim: trim,\r\n    ltrim: ltrim,\r\n    rtrim: rtrim,\r\n    blacklist: blacklist,\r\n    stripLow: stripLow,\r\n    toBoolean: toBoolean,\r\n    toDouble: toDouble,\r\n    toFloat: toFloat,\r\n    toInt: toInt,\r\n    'toString': toString,\r\n    whitelist: whitelist,\r\n    toDate: toDate,\r\n    escape: escape,\r\n    prefix: prefix,\r\n    suffix: suffix,\r\n    sanitize: sanitize\r\n};\n\nfunction instanceProvider(instanceFunc, entityObject) {\r\n    let instance = defaultContainer.get(instanceFunc);\r\n    let prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;\r\n    if (prototype.__proto__) {\r\n        let isLoop = false;\r\n        do {\r\n            isLoop = prototype.__proto__.constructor != Object;\r\n            if (isLoop) {\r\n                let extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);\r\n                instance = merge(clone(instance), clone(extendClassInstance));\r\n                prototype = prototype.__proto__;\r\n            }\r\n        } while (isLoop);\r\n    }\r\n    return instance;\r\n}\r\nfunction getInstance(model, objectArguments) {\r\n    let classInstance = Object.create(model.prototype);\r\n    try {\r\n        model.apply(classInstance, objectArguments);\r\n    }\r\n    catch (ex) {\r\n        ///resolution of issue https://github.com/rxweb/rxweb/issues/188\r\n        classInstance = Reflect.construct(model, objectArguments);\r\n    }\r\n    return classInstance;\r\n}\n\nclass BaseFormBuilder {\r\n    constructor() {\r\n    }\r\n    createInstance() {\r\n        let instance = {};\r\n        defaultContainer.modelIncrementCount = defaultContainer.modelIncrementCount + 1;\r\n        let modelName = `RxWebModel${defaultContainer.modelIncrementCount}`;\r\n        instance.constructor = Function(`\"use strict\";return(function ${modelName}(){ })`)();\r\n        return instance;\r\n    }\r\n    createClassObject(model, formBuilderConfiguration, classInstance) {\r\n        let instanceContainer = defaultContainer.get(model);\r\n        let autoInstanceConfig = formBuilderConfiguration ? formBuilderConfiguration.autoInstanceConfig : undefined;\r\n        if (!autoInstanceConfig) {\r\n            return classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, []);\r\n        }\r\n        else {\r\n            classInstance = classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, autoInstanceConfig.arguments || []);\r\n            if (autoInstanceConfig.objectPropInstanceConfig && autoInstanceConfig.objectPropInstanceConfig.length > 0) {\r\n                autoInstanceConfig.objectPropInstanceConfig.forEach(t => {\r\n                    let objectProperty = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == OBJECT_PROPERTY)[0];\r\n                    if (objectProperty) {\r\n                        let data = classInstance[t.propertyName];\r\n                        classInstance[t.propertyName] = getInstance(objectProperty.entity, t.arguments || []);\r\n                        if (data)\r\n                            this.setObjectValue(data, classInstance[t.propertyName]);\r\n                    }\r\n                });\r\n            }\r\n            if (autoInstanceConfig.arrayPropInstanceConfig && autoInstanceConfig.arrayPropInstanceConfig.length > 0) {\r\n                autoInstanceConfig.arrayPropInstanceConfig.forEach(t => {\r\n                    let property = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == ARRAY_PROPERTY)[0];\r\n                    if (property) {\r\n                        let data = classInstance[t.propertyName];\r\n                        classInstance[t.propertyName] = [];\r\n                        for (var i = 0; i < t.rowItems; i++) {\r\n                            let instance = getInstance(property.entity, t.arguments || []);\r\n                            if (data && data[i])\r\n                                this.setObjectValue(data[i], instance);\r\n                            classInstance[t.propertyName].push(instance);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return classInstance;\r\n        }\r\n    }\r\n    updateObject(model, entityObject, formBuilderConfiguration) {\r\n        let instanceContainer = instanceProvider(model);\r\n        let classInstance = getInstance(model, []);\r\n        if (instanceContainer) {\r\n            instanceContainer.properties.forEach(t => {\r\n                let entity = ((t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY) && t.entity) ? t.entity : (formBuilderConfiguration && formBuilderConfiguration.genericEntities) ? formBuilderConfiguration.genericEntities[t.name] : undefined;\r\n                if (!entity && t.entityProvider)\r\n                    entity = t.entityProvider.call(entityObject);\r\n                switch (t.propertyType) {\r\n                    case PROPERTY:\r\n                        classInstance[t.name] = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        break;\r\n                    case OBJECT_PROPERTY:\r\n                        let objectValue = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        if (objectValue)\r\n                            classInstance[t.name] = this.updateObject(entity, objectValue, formBuilderConfiguration);\r\n                        break;\r\n                    case ARRAY_PROPERTY:\r\n                        let arrayObjectValue = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        if (arrayObjectValue && Array.isArray(arrayObjectValue)) {\r\n                            classInstance[t.name] = [];\r\n                            for (let row of arrayObjectValue) {\r\n                                let instanceObject = this.updateObject(entity, row, formBuilderConfiguration);\r\n                                classInstance[t.name].push(instanceObject);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return classInstance;\r\n    }\r\n    instaceProvider(instanceFunc, entityObject) {\r\n        return instanceProvider(instanceFunc, entityObject);\r\n    }\r\n    getDefaultValue(propertyInfo, value, formBuilderConfiguration) {\r\n        let defaultValue = (formBuilderConfiguration && formBuilderConfiguration.propsConfig && formBuilderConfiguration.propsConfig[propertyInfo.name] && formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue && !RegexValidator.isNotBlank(value)) ? formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue : (propertyInfo.defaultValue != undefined && !RegexValidator.isNotBlank(value)) ?\r\n            propertyInfo.defaultValue :\r\n            value;\r\n        return defaultValue;\r\n    }\r\n    sanitizeValue(instanceContainer, propertyName, value, entityObject, baseObject) {\r\n        if (instanceContainer.sanitizers && instanceContainer.sanitizers[propertyName]) {\r\n            for (let sanitizer of instanceContainer.sanitizers[propertyName])\r\n                value = SANITIZERS[sanitizer.name](value, sanitizer.config);\r\n        }\r\n        if (entityObject[propertyName] !== undefined && entityObject[propertyName] !== value)\r\n            entityObject[propertyName] = value;\r\n        if (baseObject[propertyName] !== undefined && baseObject[propertyName] !== value)\r\n            baseObject[propertyName] = value;\r\n        return value;\r\n    }\r\n    getValue(entityObject, propertyInfo, formBuilderConfiguration) {\r\n        let propValue = (propertyInfo.dataPropertyName) ? entityObject[propertyInfo.dataPropertyName] : entityObject[propertyInfo.name];\r\n        return this.getDefaultValue(propertyInfo, propValue, formBuilderConfiguration);\r\n    }\r\n    setObjectValue(entityObject, classInstance) {\r\n        for (var column in entityObject) {\r\n            classInstance[column] = entityObject[column];\r\n        }\r\n    }\r\n}\n\nclass FormBuilderConfiguration {\r\n    constructor(formBuilderConfiguration) {\r\n        if (formBuilderConfiguration)\r\n            for (var column in formBuilderConfiguration)\r\n                this[column] = formBuilderConfiguration[column];\r\n    }\r\n}\n\nclass DisableProvider {\r\n    constructor(decoratorType, entityObject) {\r\n        this.decoratorType = decoratorType;\r\n        this.entityObject = entityObject;\r\n    }\r\n    getFormGroupName(currentFormGroup) {\r\n        let keyName = '';\r\n        if (currentFormGroup.parent)\r\n            for (var controlName of Object.keys(currentFormGroup.parent.controls))\r\n                if (currentFormGroup.parent.controls[controlName] == currentFormGroup) {\r\n                    keyName = controlName;\r\n                    break;\r\n                }\r\n        return keyName;\r\n    }\r\n    zeroArgumentProcess(control, columnName) {\r\n        let disabledColumns = [];\r\n        this.getDisabledColumns(control.parent, `${columnName}${RXCODE}0`, false).forEach(t => disabledColumns.push(t));\r\n        let path = this.topControlPath(control, columnName);\r\n        let splitPath = path.split(\".\");\r\n        if (splitPath.length > 1) {\r\n            let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n            this.getDisabledColumns(rootFormGroup, `${path}${RXCODE}0`, true).forEach(t => disabledColumns.push(t));\r\n            let controlPath = '';\r\n            for (var i = 0; i < splitPath.length - 2; i++) {\r\n                let controlName = splitPath[i];\r\n                controlPath = `${path.replace(`${controlName}.`, '')}${RXCODE}-0`;\r\n                if (rootFormGroup.controls[controlName]) {\r\n                    this.getDisabledColumns(rootFormGroup.controls[controlName], controlPath, true, controlName).forEach(t => disabledColumns.push(t));\r\n                    rootFormGroup = rootFormGroup.controls[controlName];\r\n                }\r\n            }\r\n        }\r\n        return disabledColumns;\r\n    }\r\n    getDisabledColumns(formGroup, columnName, isRoot, pathName = \"\") {\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = instanceProvider(formGroup[MODEL_INSTANCE].constructor, this.entityObject);\r\n            return this.getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName);\r\n        }\r\n        return [];\r\n    }\r\n    getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName = \"\") {\r\n        let conditionalDisableControls = [];\r\n        let columns = instanceContainer.nonValidationDecorators[this.decoratorType].changeDetection[columnName];\r\n        if (columns) {\r\n            columns.forEach(t => {\r\n                conditionalDisableControls.push({ controlPath: pathName ? `${pathName}.${t}` : t, conditionalExpression: instanceContainer.nonValidationDecorators[this.decoratorType].conditionalExpressions[t], isRoot: isRoot });\r\n            });\r\n        }\r\n        return conditionalDisableControls;\r\n    }\r\n    topControlPath(control, columnName) {\r\n        if (control.parent) {\r\n            let name = this.getFormGroupName(control.parent);\r\n            if (name) {\r\n                columnName = `${name}.${columnName}`;\r\n                return this.topControlPath(control.parent, columnName);\r\n            }\r\n        }\r\n        return columnName;\r\n    }\r\n    childControlDisabledExpression(formGroup, columnName, path = \"\") {\r\n        let disabledColumns = [];\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\r\n            if (instanceContainer) {\r\n                this.getChangeDetectionColumns(instanceContainer, columnName, true, path).forEach(t => disabledColumns.push(t));\r\n                var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY);\r\n                props.forEach(t => {\r\n                    if (formGroup.controls[t.name]) {\r\n                        let columns = this.getDisabledColumns(formGroup.controls[t.name], columnName, true, path ? `${path}.${t.name}` : `${t.name}`);\r\n                        columns.forEach(x => disabledColumns.push(x));\r\n                        this.childControlDisabledExpression(formGroup.controls[t.name], columnName, path ? `${path}.${t.name}` : `${t.name}`).forEach(y => disabledColumns.push(y));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return disabledColumns;\r\n    }\r\n    oneArgumentProcess(control, columnName) {\r\n        let path = this.topControlPath(control, columnName);\r\n        let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n        let childColumns = this.childControlDisabledExpression(rootFormGroup, path);\r\n        return childColumns;\r\n    }\r\n}\n\nconst DIRTY = \"dirty\";\r\nconst TOUCHED = \"touched\";\r\nconst UNTOUCHED = \"untouched\";\r\nconst PRISTINE = \"pristine\";\r\nconst PENDING = \"pending\";\r\nclass RxFormControl extends FormControl {\r\n    constructor(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {\r\n        super(formState, validator, asyncValidator);\r\n        this.entityObject = entityObject;\r\n        this.baseObject = baseObject;\r\n        this._sanitizers = _sanitizers;\r\n        this._errorMessages = [];\r\n        this._childColumns = [];\r\n        this._refDisableControls = [];\r\n        this._refMessageControls = [];\r\n        this._refClassNameControls = [];\r\n        this._isPassedExpression = false;\r\n        this._dirty = false;\r\n        this._baseValue = formState === undefined ? null : this.getFormState(formState);\r\n        this._isModified = false;\r\n        this.keyName = controlName;\r\n        this._errorMessageBindingStrategy = ReactiveFormConfig.get(\"reactiveForm.errorMessageBindingStrategy\");\r\n        if (this._sanitizers) {\r\n            var floatSanitizer = this._sanitizers.filter(t => t.name == \"toFloat\")[0];\r\n            if (floatSanitizer && this._baseValue && ReactiveFormConfig.number && ReactiveFormConfig.number.decimalSymbol == \",\") {\r\n                let baseValue = String(this._baseValue);\r\n                if (baseValue.indexOf('.') != -1) {\r\n                    this._baseValue = baseValue.replace(\".\", ReactiveFormConfig.number.decimalSymbol);\r\n                    super.setValue(this._baseValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get errors() {\r\n        return this._errors;\r\n    }\r\n    set errors(value) {\r\n        this._errors = value;\r\n    }\r\n    get errorMessages() {\r\n        if (!this._messageExpression) {\r\n            if (this._errorMessages.length == 0 && this.errors)\r\n                this.setControlErrorMessages();\r\n        }\r\n        else if (this._messageExpression && !this._isPassedExpression)\r\n            return [];\r\n        if (!this.errors && this._errorMessages.length > 0)\r\n            this.setControlErrorMessages();\r\n        return this._errorMessages;\r\n    }\r\n    get errorMessage() {\r\n        if (!this._messageExpression) {\r\n            if (this._errorMessage == undefined && this.errors)\r\n                this.setControlErrorMessages();\r\n        }\r\n        else if (this._messageExpression && !this._isPassedExpression)\r\n            return undefined;\r\n        if (!this.errors && this._errorMessage)\r\n            this.setControlErrorMessages();\r\n        return this._errorMessage;\r\n    }\r\n    getFormState(value) {\r\n        let baseValue = value;\r\n        if (Array.isArray(value)) {\r\n            baseValue = [];\r\n            value.forEach(t => baseValue.push(t));\r\n        }\r\n        return baseValue;\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    get dirty() {\r\n        return this._dirty;\r\n    }\r\n    set dirty(value) {\r\n        this._dirty = value;\r\n    }\r\n    setValue(value, options) {\r\n        let parsedValue = this.getSanitizedValue(value);\r\n        if (options && options.dirty)\r\n            this.baseObject[this.keyName] = value;\r\n        this.entityObject[this.keyName] = parsedValue;\r\n        super.setValue(value, options);\r\n        this.bindError();\r\n        this.bindClassName();\r\n        this.executeExpressions();\r\n        this.callPatch();\r\n        if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {\r\n            this.root[VALUE_CHANGED_SYNC]();\r\n        }\r\n    }\r\n    getControlValue() {\r\n        return this.getSanitizedValue(this.value);\r\n    }\r\n    bindError() {\r\n        if (this._messageExpression)\r\n            this._isPassedExpression = this.executeExpression(this._messageExpression, this);\r\n        this.setControlErrorMessages();\r\n        this.errors = this.errors;\r\n    }\r\n    bindClassName() {\r\n        if (this.updateOnElementClass && typeof this.updateOnElementClass === \"function\") {\r\n            let className = this.executeExpression(this._classNameExpression, this);\r\n            let updateElement = this.updateOnElementClass;\r\n            updateElement(className);\r\n        }\r\n    }\r\n    markAsTouched(opts) {\r\n        let currentState = this.touched;\r\n        super.markAsTouched(opts);\r\n        if (currentState != this.touched)\r\n            this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);\r\n    }\r\n    markAsUntouched(opts) {\r\n        let currentState = this.untouched;\r\n        super.markAsUntouched(opts);\r\n        if (currentState != this.untouched)\r\n            this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);\r\n    }\r\n    markAsDirty(opts) {\r\n        let currentState = this.dirty;\r\n        super.markAsDirty(opts);\r\n        this.dirty = true;\r\n        if (currentState != this.dirty)\r\n            this.runControlPropChangeExpression([DIRTY]);\r\n    }\r\n    markAsPristine(opts) {\r\n        let currentState = this.pristine;\r\n        super.markAsDirty(opts);\r\n        if (currentState != this.pristine)\r\n            this.runControlPropChangeExpression([PRISTINE]);\r\n    }\r\n    markAsPending(opts) {\r\n        let currentState = this.pending;\r\n        super.markAsDirty(opts);\r\n        if (currentState != this.pending)\r\n            this.runControlPropChangeExpression([PENDING]);\r\n    }\r\n    runControlPropChangeExpression(propNames) {\r\n        propNames.forEach(name => {\r\n            if ((this._controlProp && this._messageExpression && this._controlProp[name]) || (!this._messageExpression && this.checkErrorMessageStrategy()))\r\n                this.bindError();\r\n            if (this._classNameControlProp && this._classNameControlProp[name])\r\n                this.bindClassName();\r\n        });\r\n    }\r\n    refresh() {\r\n        this.getMessageExpression(this.parent, this.keyName);\r\n        this.bindConditionalControls(DECORATORS.disabled, \"_refDisableControls\");\r\n        this.bindConditionalControls(DECORATORS.error, \"_refMessageControls\");\r\n        this.bindConditionalControls(DECORATORS.elementClass, \"_refClassNameControls\");\r\n        this.executeExpressions();\r\n        this.bindError();\r\n    }\r\n    reset(value) {\r\n        if (value !== undefined)\r\n            this.setValue(value);\r\n        else\r\n            this.setValue(this.getFormState(this._baseValue));\r\n        this.dirty = false;\r\n    }\r\n    commit() {\r\n        this._baseValue = this.value;\r\n        this.callPatch();\r\n    }\r\n    callPatch() {\r\n        this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);\r\n        if (this.parent && this.parent[PATCH])\r\n            this.parent[PATCH](this.keyName);\r\n    }\r\n    checkErrorMessageStrategy() {\r\n        let isBind = true;\r\n        switch (this._errorMessageBindingStrategy) {\r\n            case ErrorMessageBindingStrategy.OnSubmit:\r\n                isBind = this.parent.submitted;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirty:\r\n                isBind = this.dirty;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnTouched:\r\n                isBind = this.touched;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirtyOrTouched:\r\n                isBind = this.dirty || this.touched;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirtyOrSubmit:\r\n                isBind = this.dirty || this.parent.submitted;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnTouchedOrSubmit:\r\n                isBind = this.touched || this.parent.submitted;\r\n                break;\r\n            default:\r\n                isBind = true;\r\n        }\r\n        return isBind;\r\n    }\r\n    executeExpressions() {\r\n        this.processExpression(\"_refDisableControls\", \"disabled\");\r\n        this.processExpression(\"_refMessageControls\", \"bindError\");\r\n        this.processExpression(\"_refClassNameControls\", \"bindClassName\");\r\n    }\r\n    getMessageExpression(formGroup, keyName) {\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\r\n            if (instanceContainer) {\r\n                this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];\r\n                this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];\r\n                this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];\r\n                this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];\r\n                if (this._classNameExpression)\r\n                    this.updateOnElementClass = true;\r\n            }\r\n        }\r\n    }\r\n    getSanitizedValue(value) {\r\n        if (this._sanitizers) {\r\n            for (let sanitizer of this._sanitizers) {\r\n                value = SANITIZERS[sanitizer.name](value, sanitizer.config);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    bindConditionalControls(decoratorType, refName) {\r\n        this._disableProvider = new DisableProvider(decoratorType, this.entityObject);\r\n        this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);\r\n        this._disableProvider.oneArgumentProcess(this, `${this.keyName}${RXCODE}1`).forEach(t => this[refName].push(t));\r\n    }\r\n    setControlErrorMessages() {\r\n        if ((!this._messageExpression && this.checkErrorMessageStrategy()) || this._isPassedExpression) {\r\n            this._errorMessages = [];\r\n            if (this.errors) {\r\n                Object.keys(this.errors).forEach(t => {\r\n                    if (this.parent) {\r\n                        this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(this.errors, t);\r\n                        if (!this._errorMessage) {\r\n                            let errorObject = ObjectMaker.toJson(t, undefined, [this.errors[t][t]]);\r\n                            this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(errorObject, t);\r\n                        }\r\n                    }\r\n                    else\r\n                        this._errorMessage = this.getErrorMessage(this.errors, t);\r\n                    this._errorMessages.push(this._errorMessage);\r\n                });\r\n            }\r\n            else {\r\n                this._errorMessage = undefined;\r\n                if (this.parent) {\r\n                    this.parent[CONTROLS_ERROR][this.keyName] = undefined;\r\n                    delete this.parent[CONTROLS_ERROR][this.keyName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._errorMessages = [];\r\n            this._errorMessage = undefined;\r\n        }\r\n    }\r\n    getErrorMessage(errorObject, keyName) {\r\n        if (errorObject[keyName][MESSAGE])\r\n            return errorObject[keyName][MESSAGE];\r\n        return;\r\n    }\r\n    processExpression(propName, operationType) {\r\n        if (this[propName])\r\n            for (var controlInfo of this[propName]) {\r\n                let control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);\r\n                if (control) {\r\n                    if (operationType == \"disabled\") {\r\n                        let result = this.executeExpression(controlInfo.conditionalExpression, control);\r\n                        if (result)\r\n                            control.disable();\r\n                        else\r\n                            control.enable();\r\n                    }\r\n                    else if (operationType == \"bindError\")\r\n                        control.bindError();\r\n                    else if (operationType == \"bindClassName\")\r\n                        control.bindClassName();\r\n                }\r\n            }\r\n    }\r\n    executeExpression(expression, control) {\r\n        return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);\r\n    }\r\n    getValue(value) {\r\n        return value !== undefined && value !== null && value !== \"\" ? value : \"\";\r\n    }\r\n}\n\nconst OBJECT = \"object\";\r\nconst BOOLEAN$1 = \"boolean\";\r\nclass FormDataProvider {\r\n    convertToFormData(jObject) {\r\n        return this.convertFormData(jObject);\r\n    }\r\n    convertFormData(jObject, currentFormData, parentKey) {\r\n        let formData = currentFormData || new FormData();\r\n        let propName = '';\r\n        for (var columnName in jObject) {\r\n            propName = !parentKey ? columnName : `${parentKey}[${columnName}]`;\r\n            if (Array.isArray(jObject[columnName])) {\r\n                jObject[columnName].forEach((row, index) => {\r\n                    propName = `${columnName}[${index}]`;\r\n                    if (typeof row === OBJECT)\r\n                        this.convertFormData(row, formData, propName);\r\n                    else\r\n                        this.nonObjectValueBind(row, formData, propName);\r\n                });\r\n            }\r\n            else if (jObject[columnName] !== null && !(jObject[columnName] instanceof Date) && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {\r\n                this.convertFormData(jObject[columnName], formData, propName);\r\n            }\r\n            else {\r\n                this.nonObjectValueBind(jObject[columnName], formData, propName);\r\n            }\r\n        }\r\n        return formData;\r\n    }\r\n    nonObjectValueBind(value, formData, propName) {\r\n        if (typeof value === BOOLEAN$1) {\r\n            let formValue = value ? true : false;\r\n            formData.append(propName, formValue);\r\n        }\r\n        else if (value instanceof FileList) {\r\n            for (var i = 0; i < value.length; i++) {\r\n                formData.append(`${propName}[${i}]`, value.item(i));\r\n            }\r\n        }\r\n        else {\r\n            if (RegexValidator.isNotBlank(value))\r\n                formData.append(propName, value);\r\n        }\r\n    }\r\n}\n\nfunction isResetControl(controlName, control, options) {\r\n    let isReset = true;\r\n    if (options) {\r\n        isReset = false;\r\n        if (options.resetType)\r\n            switch (options.resetType) {\r\n                case ResetFormType.ControlsOnly:\r\n                    isReset = control instanceof FormControl;\r\n                    break;\r\n                case ResetFormType.ControlsAndFormGroupsOnly:\r\n                    isReset = control instanceof FormControl || control instanceof FormGroup;\r\n                    break;\r\n                case ResetFormType.FormGroupsOnly:\r\n                    isReset = control instanceof FormGroup;\r\n                    break;\r\n                case ResetFormType.FormArraysOnly:\r\n                    isReset = control instanceof FormArray;\r\n                    break;\r\n                case ResetFormType.DefinedPropsOnly:\r\n                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;\r\n                    break;\r\n                default:\r\n                    isReset = true;\r\n                    break;\r\n            }\r\n        if (!isReset && options.with)\r\n            isReset = options.with.filter(x => x.split('.')[0] == controlName.split('.')[0])[0] !== undefined;\r\n        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))\r\n            isReset = true;\r\n    }\r\n    return isReset;\r\n}\r\nfunction getNestedOptions(controlName, options) {\r\n    if (options) {\r\n        let jObjectOptions = {};\r\n        if (options.resetType)\r\n            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;\r\n        if (options.with) {\r\n            let nestedControls = options.with.filter(t => t.split('.')[0] == controlName);\r\n            let controlNames = nestedControls.map(x => {\r\n                let splitControls = x.split('.');\r\n                splitControls.splice(0, 1);\r\n                return splitControls.join('.');\r\n            });\r\n            jObjectOptions.with = controlNames;\r\n        }\r\n        if (options.value && options.value[controlName])\r\n            jObjectOptions.value = options.value[controlName];\r\n        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;\r\n        return jObjectOptions;\r\n    }\r\n    return undefined;\r\n}\n\nclass RxFormGroup extends FormGroup {\r\n    constructor(model, entityObject, controls, validatorOrOpts, asyncValidator) {\r\n        super(controls, validatorOrOpts, asyncValidator);\r\n        this.model = model;\r\n        this.entityObject = entityObject;\r\n        this._modified = {};\r\n        this._isModified = false;\r\n        this.baseObject = {};\r\n        for (var column in this.entityObject)\r\n            this.baseObject[column] = this.entityObject[column];\r\n        this.formDataProvider = new FormDataProvider();\r\n    }\r\n    bindPrimaryKey(modelInstance, jObject) {\r\n        let instanceContainer = defaultContainer.get(modelInstance.constructor);\r\n        if (instanceContainer) {\r\n            let primaryKeyProp = instanceContainer.properties.filter(x => x.isPrimaryKey)[0];\r\n            if (primaryKeyProp && this.modelInstance[primaryKeyProp.name])\r\n                jObject[primaryKeyProp.name] = this.modelInstance[primaryKeyProp.name];\r\n        }\r\n    }\r\n    get modifiedValue() {\r\n        let jObject = {};\r\n        if (Object.keys(this._modified).length > 0) {\r\n            this.bindPrimaryKey(this.modelInstance, jObject);\r\n            for (var columnName in this._modified) {\r\n                if (this.controls[columnName] instanceof RxFormGroup)\r\n                    jObject[columnName] = this.controls[columnName].modifiedValue;\r\n                else if (this.controls[columnName] instanceof FormArray) {\r\n                    let formArray = this.controls[columnName];\r\n                    jObject[columnName] = [];\r\n                    for (var i = 0; i < this._modified[columnName].length; i++) {\r\n                        let modifiedValue = formArray.controls[i].modifiedValue;\r\n                        if (Object.keys(modifiedValue).length > 0)\r\n                            jObject[columnName].push(modifiedValue);\r\n                    }\r\n                    if (jObject[columnName].length == 0)\r\n                        delete jObject[columnName];\r\n                }\r\n                else\r\n                    jObject[columnName] = this._modified[columnName];\r\n            }\r\n            return jObject;\r\n        }\r\n        return this._modified;\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    patch(controlName) {\r\n        if (controlName) {\r\n            let control = this.controls[controlName];\r\n            this.processModified(controlName, control);\r\n        }\r\n        else {\r\n            this.nestedFormsModification();\r\n        }\r\n        this._isModified = Object.keys(this._modified).length > 0;\r\n        if (!this._isModified)\r\n            this.nestedArrayIsModified();\r\n        if (this.parent && this.parent.patch)\r\n            this.parent.patch();\r\n    }\r\n    isDirty() {\r\n        let isDirty = false;\r\n        for (let name in this.value) {\r\n            let currentValue = this.modelInstance[name];\r\n            if (!(this.controls[name] instanceof FormGroup || this.controls[name] instanceof FormArray)) {\r\n                isDirty = ApplicationUtil.notEqualTo(this.baseObject[name], currentValue);\r\n            }\r\n            else if (this.controls[name] instanceof RxFormGroup)\r\n                isDirty = this.controls[name].isDirty();\r\n            else if (this.controls[name] instanceof FormArray) {\r\n                for (let formGroup of this.controls[name].controls) {\r\n                    isDirty = formGroup.isDirty();\r\n                }\r\n            }\r\n            if (isDirty)\r\n                break;\r\n        }\r\n        return isDirty;\r\n    }\r\n    ;\r\n    resetForm(options) {\r\n        for (let name in this.controls) {\r\n            if (isResetControl(name, this.controls[name], options)) {\r\n                if (this.controls[name] instanceof FormGroup)\r\n                    this.controls[name].resetForm(getNestedOptions(name, options));\r\n                else if (this.controls[name] instanceof FormArray) {\r\n                    this.controls[name].resetForm(options && options.value ? options.value[name] : undefined);\r\n                }\r\n                else {\r\n                    if (options && options.value && RegexValidator.isNotBlank(options.value[name]))\r\n                        this.controls[name].reset(options.value[name]);\r\n                    else\r\n                        this.controls[name].reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    commit() {\r\n        for (let name in this.controls) {\r\n            if (this.controls[name] instanceof FormGroup)\r\n                this.controls[name].commit();\r\n            else if (this.controls[name] instanceof FormArray) {\r\n                this.controls[name].commit();\r\n            }\r\n            else {\r\n                this.controls[name].commit();\r\n            }\r\n        }\r\n    }\r\n    patchModelValue(value, options) {\r\n        if (value) {\r\n            for (let name in this.controls) {\r\n                if (this.controls[name] instanceof RxFormGroup && value[name])\r\n                    this.controls[name].patchModelValue(value[name], options);\r\n                else if (this.controls[name] instanceof FormArray && Array.isArray(value[name])) {\r\n                    let index = 0;\r\n                    for (let formGroup of this.controls[name].controls) {\r\n                        if (value[name][index])\r\n                            formGroup.patchModelValue(value[name][index], options);\r\n                        index = index + 1;\r\n                    }\r\n                }\r\n                else if (value[name] !== undefined)\r\n                    this.controls[name].patchValue(value[name], options);\r\n            }\r\n        }\r\n    }\r\n    getErrorSummary(onlyMessage) {\r\n        let jObject = {};\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (this.controls[columnName] instanceof FormGroup) {\r\n                let error = this.controls[columnName].getErrorSummary(false);\r\n                if (Object.keys(error).length > 0)\r\n                    jObject[columnName] = error;\r\n            }\r\n            else if (this.controls[columnName] instanceof FormArray) {\r\n                let index = 0;\r\n                for (let formGroup of this.controls[columnName].controls) {\r\n                    let error = formGroup.getErrorSummary(false);\r\n                    if (Object.keys(error).length > 0) {\r\n                        error.index = index;\r\n                        if (!jObject[columnName])\r\n                            jObject[columnName] = [];\r\n                        jObject[columnName].push(error);\r\n                    }\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                if (this.controls[columnName].errors) {\r\n                    let error = this.controls[columnName].errors;\r\n                    if (onlyMessage)\r\n                        for (let validationName in error)\r\n                            jObject[columnName] = error[validationName].message;\r\n                    else\r\n                        jObject[columnName] = error;\r\n                }\r\n            }\r\n        });\r\n        return jObject;\r\n    }\r\n    valueChangedSync() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup) && !(this.entityObject[columnName] instanceof FormControl || this.entityObject[columnName] instanceof RxFormControl) && ApplicationUtil.notEqualTo(this.controls[columnName].getControlValue(), this.entityObject[columnName])) {\r\n                this.controls[columnName].setValue(this.entityObject[columnName], { updateChanged: true });\r\n            }\r\n            else if ((this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray)) {\r\n                for (let formGroup of this.controls[columnName].controls) {\r\n                    formGroup.valueChangedSync();\r\n                }\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].valueChangedSync();\r\n            }\r\n        });\r\n    }\r\n    refreshDisable() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].refresh();\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].refreshDisable();\r\n            }\r\n        });\r\n    }\r\n    bindErrorMessages() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].bindError();\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].bindErrorMessages();\r\n            }\r\n        });\r\n    }\r\n    get submitted() {\r\n        return this._submitted;\r\n    }\r\n    set submitted(value) {\r\n        this._submitted = value;\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (this.controls[columnName] instanceof FormArray) {\r\n                let formArray = this.controls[columnName];\r\n                for (let formGroup of formArray.controls)\r\n                    formGroup.submitted = value;\r\n            }\r\n            else if (this.controls[columnName] instanceof FormGroup) {\r\n                this.controls[columnName].submitted = value;\r\n            }\r\n            else\r\n                this.controls[columnName].bindError();\r\n        });\r\n    }\r\n    get modelInstanceValue() {\r\n        return clone(this.entityObject);\r\n    }\r\n    get modelInstance() {\r\n        return this.entityObject;\r\n    }\r\n    get controlsError() {\r\n        return this.getErrorSummary(true);\r\n    }\r\n    toFormData() {\r\n        return this.formDataProvider.convertToFormData(this.value);\r\n    }\r\n    processModified(controlName, control) {\r\n        if (control.isModified)\r\n            this._modified[controlName] = control.value;\r\n        else\r\n            delete this._modified[controlName];\r\n        this._isModified = Object.keys(this._modified).length > 0;\r\n    }\r\n    nestedArrayIsModified() {\r\n        for (var controlName in this.controls) {\r\n            if (this.controls[controlName] instanceof RxFormArray)\r\n                this._isModified = this.controls[controlName].isModified;\r\n            if (this._isModified)\r\n                break;\r\n        }\r\n    }\r\n    nestedFormsModification() {\r\n        for (var controlName in this.controls) {\r\n            if (this.controls[controlName] instanceof RxFormGroup)\r\n                this.processModified(controlName, this.controls[controlName]);\r\n            else if (this.controls[controlName] instanceof RxFormArray) {\r\n                if (this.controls[controlName].isModified) {\r\n                    let formGroups = this.controls[controlName].controls;\r\n                    this._modified[controlName] = [];\r\n                    for (var formGroup of formGroups) {\r\n                        if (formGroup.isModified) {\r\n                            if (!this._modified[controlName])\r\n                                this._modified[controlName] = [];\r\n                            this._modified[controlName].push(formGroup.modifiedValue);\r\n                        }\r\n                    }\r\n                    if (this._modified[controlName].length == 0)\r\n                        delete this._modified[controlName];\r\n                }\r\n                else if (this._modified[controlName])\r\n                    delete this._modified[controlName];\r\n            }\r\n        }\r\n    }\r\n}\n\nclass FormProvider {\r\n    static ProcessRule(control, config, isDynamicConfig = false) {\r\n        const formGroupValue = ApplicationUtil.getParentObjectValue(control);\r\n        const parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;\r\n        let modelInstance = undefined;\r\n        if (control.parent && control.parent instanceof RxFormGroup)\r\n            modelInstance = control.parent.modelInstance;\r\n        if (parentObject) {\r\n            this.updateFormControlValue(parentObject, control.parent.controls, control, config);\r\n            this.forDisableUpdate(parentObject, config);\r\n        }\r\n        else if (config.conditionalExpression)\r\n            return false;\r\n        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);\r\n    }\r\n    static updateFormControlValue(parentObject, controls, control, config) {\r\n        for (var controlName in parentObject) {\r\n            if (!(parentObject[controlName] instanceof Object))\r\n                if (controls[controlName] === control) {\r\n                    parentObject[controlName] = control.value;\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n    static forDisableUpdate(parentObject, config) {\r\n        if (config.disableConfig)\r\n            Object.keys(config.disableConfig).forEach(column => {\r\n                parentObject[column] = config.disableConfig[column];\r\n            });\r\n    }\r\n}\n\nconst DISABLED_EXPRESSION = \"disableExpression\";\r\nfunction conditionalChangeValidator(conditionalValidationProps) {\r\n    var oldValue = undefined;\r\n    var setTimeOut = (control, config) => {\r\n        if (control[DISABLED_EXPRESSION])\r\n            runDisabledExpression(control, config);\r\n        var timeOut = setTimeout(t => {\r\n            clearTimeout(timeOut);\r\n            control.updateValueAndValidity();\r\n        }, 100);\r\n    };\r\n    return (control) => {\r\n        let value = control.value;\r\n        if (control.parent && oldValue != value) {\r\n            const rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n            const parentFormGroup = control.parent;\r\n            oldValue = value;\r\n            let controlName = ApplicationUtil.getFormControlName(control);\r\n            let disabledConfig = { [controlName]: value };\r\n            conditionalValidationProps.forEach(t => {\r\n                if (t.indexOf(\"[]\") != -1) {\r\n                    var splitText = t.split(\"[]\");\r\n                    var formArray = rootFormGroup.get([splitText[0]]);\r\n                    if (formArray)\r\n                        formArray.controls.forEach(formGroup => {\r\n                            var abstractControl = formGroup.get(splitText[1]);\r\n                            if (abstractControl) {\r\n                                setTimeOut(abstractControl, disabledConfig);\r\n                            }\r\n                        });\r\n                }\r\n                else {\r\n                    let splitText = t.split('.');\r\n                    if (splitText.length > 1) {\r\n                        var control = null;\r\n                        t.split('.').forEach((name, index) => { control = (index == 0) ? rootFormGroup.controls[name] : control.controls[name]; });\r\n                    }\r\n                    else {\r\n                        control = parentFormGroup.controls[t];\r\n                    }\r\n                    if (control) {\r\n                        setTimeOut(control, disabledConfig);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\r\nfunction runDisabledExpression(control, config) {\r\n    let isDisabled = FormProvider.ProcessRule(control, { conditionalExpression: control[DISABLED_EXPRESSION], disableConfig: config });\r\n    if (isDisabled && !control.disabled)\r\n        control.disable();\r\n    else if (control.disabled)\r\n        control.enable();\r\n}\n\nclass ValidatorValueChecker {\r\n    static pass(control, config) {\r\n        if (FormProvider.ProcessRule(control, config))\r\n            return RegexValidator.isNotBlank(control.value);\r\n        else\r\n            return false;\r\n    }\r\n    static passArrayValue(control, config) {\r\n        if (FormProvider.ProcessRule(control, config))\r\n            return control.value instanceof Array;\r\n        else\r\n            return false;\r\n    }\r\n}\n\nconst ARRAY_CONFIG = \"ArrayConfig\";\r\nconst FIELD_CONFIG = \"FieldConfig\";\r\nconst IP_CONFIG = \"IpConfig\";\r\nconst NUMBER_CONFIG = \"NumberConfig\";\r\nconst PASSWORD_CONFIG = \"PasswordConfig\";\r\nconst PATTERN_CONFIG = \"PatternConfig\";\r\nconst RANGE_CONFIG = \"RangeConfig\";\n\nconst CONFIG_REQUIRED_FIELDS = {\r\n    [ARRAY_CONFIG]: [\"matchValues\"],\r\n    [FIELD_CONFIG]: [\"fieldName\"],\r\n    [IP_CONFIG]: [\"version\"],\r\n    [PASSWORD_CONFIG]: [\"validation\"],\r\n    [NUMBER_CONFIG]: [\"value\"],\r\n    [PATTERN_CONFIG]: [\"expression\"],\r\n    [RANGE_CONFIG]: [\"minimumNumber\", \"maximumNumber\"],\r\n};\n\nfunction getConfigObject(config, control, configName = '') {\r\n    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};\r\n}\r\nfunction configProvider(control, config, configName) {\r\n    if (config.dynamicConfig) {\r\n        let currentConfig = FormProvider.ProcessRule(control, clone(config), true);\r\n        if (typeof currentConfig != \"boolean\") {\r\n            currentConfig.conditionalExpression = config.conditionalExpression;\r\n            currentConfig.dynamicConfig = config.dynamicConfig;\r\n            Object.keys(config).forEach(t => {\r\n                if ((t != \"conditionalExpression\" && t != \"dynamicConfig\") || currentConfig[t] === undefined) {\r\n                    currentConfig[t] = config[t];\r\n                }\r\n            });\r\n            return currentConfig;\r\n        }\r\n        else\r\n            return config;\r\n    }\r\n    return checkRequiredProps(config, configName);\r\n}\r\nfunction checkRequiredProps(config, configName) {\r\n    let props = CONFIG_REQUIRED_FIELDS[configName];\r\n    if (configName) {\r\n        props.forEach(prop => {\r\n            if (config[prop] === undefined)\r\n                throw new Error(`Pass the property of '${prop}' with value in the ${configName}, otherwise it won't work.`);\r\n        });\r\n    }\r\n    return config;\r\n}\n\nconst alphabet = {\r\n    'danish': /^[A-ZÆØÅ]+$/,\r\n    'french': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/,\r\n    'german': /^[A-ZÄÖÜß]+$/,\r\n    'greek': /^[Α-ω]+$/,\r\n    'spanish': /^[a-zñáéíóúü]+$/i,\r\n    'russian': /^[А-ЯЁ]+$/,\r\n};\r\nconst alphaWithWhitespace = {\r\n    'danish': /^[A-ZÆØÅ\\s]+$/,\r\n    'french': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]+$/,\r\n    'german': /^[A-ZÄÖÜß\\s]+$/,\r\n    'greek': /^[Α-ω\\s]+$/,\r\n    'spanish': /^[a-zñáéíóúü\\s]+$/i,\r\n    'russian': /^[А-ЯЁ\\s]+$/,\r\n};\r\nconst alphanumeric = {\r\n    'danish': /^[0-9A-ZÆØÅ]+$/,\r\n    'french': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/,\r\n    'german': /^[0-9A-ZÄÖÜß]+$/,\r\n    'spanish': /^[0-9a-zñáéíóúü]+$/i,\r\n    'russian': /^[0-9А-ЯЁ]+$/,\r\n};\r\nconst alphanumericWithWitespace = {\r\n    'danish': /^[0-9A-ZÆØÅ]+$/,\r\n    'french': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/,\r\n    'german': /^[0-9A-ZÄÖÜß]+$/,\r\n    'spanish': /^[0-9a-zñáéíóúü\\s]+$/i,\r\n    'russian': /^[0-9А-ЯЁ]+$/,\r\n};\n\nfunction alphaValidation(configModel, control, regExps, key) {\r\n    let config = getConfigObject(configModel, control);\r\n    if (ValidatorValueChecker.pass(control, config)) {\r\n        regExps = getRegex(key, regExps, config);\r\n        var isValid = (!config || !config.allowWhiteSpace) ?\r\n            RegexValidator.isValid(control.value, regExps[0]) :\r\n            RegexValidator.isValid(control.value, regExps[1]);\r\n        if (!isValid)\r\n            return ObjectMaker.toJson(key, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction getRegex(key, regExps, config) {\r\n    switch (key) {\r\n        case \"alpha\":\r\n            var alphaLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alpha ? ReactiveFormConfig.json.defaultValidationLocale.alpha : \"\";\r\n            return [\r\n                alphaLocale && alphaLocale in alphabet ? alphabet[alphaLocale] : regExps[0],\r\n                alphaLocale && alphaLocale in alphaWithWhitespace ? alphaWithWhitespace[alphaLocale] : regExps[1]\r\n            ];\r\n            break;\r\n        case \"alphaNumeric\":\r\n            var alphaNumericLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric ? ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric : \"\";\r\n            return [\r\n                alphaNumericLocale && alphaNumericLocale in alphanumeric ? alphanumeric[alphaNumericLocale] : regExps[0],\r\n                alphaNumericLocale && alphaNumericLocale in alphanumericWithWitespace ? alphanumericWithWitespace[alphaNumericLocale] : regExps[1]\r\n            ];\r\n            break;\r\n    }\r\n}\n\nfunction alphaValidator(configModel) {\r\n    return (control) => {\r\n        return alphaValidation(configModel, control, [RegExRule.alpha, RegExRule.alphaWithSpace], AnnotationTypes.alpha);\r\n    };\r\n}\n\nfunction alphaNumericValidator(configModel) {\r\n    return (control) => {\r\n        return alphaValidation(configModel, control, [RegExRule.alphaNumeric, RegExRule.alphaNumericWithSpace], AnnotationTypes.alphaNumeric);\r\n    };\r\n}\n\nfunction compareValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, FIELD_CONFIG);\r\n        const compareControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n        const controlValue = control.value;\r\n        const compareControlValue = (compareControl) ? compareControl.value : '';\r\n        if (RegexValidator.isNotBlank(controlValue) || RegexValidator.isNotBlank(compareControlValue)) {\r\n            if (!(compareControl && compareControl.value === controlValue))\r\n                return ObjectMaker.toJson(AnnotationTypes.compare, config, [controlValue, compareControlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction containsValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (control.value.indexOf(config.value) == -1)\r\n                return ObjectMaker.toJson(AnnotationTypes.contains, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction checkLength(length, checks) {\r\n    let isPassed = false;\r\n    for (let check of checks) {\r\n        isPassed = (check == length);\r\n        if (isPassed)\r\n            break;\r\n    }\r\n    return isPassed;\r\n}\n\nfunction calculate(numbers) {\r\n    let numberSum = 0;\r\n    for (var i = 0; i < numbers.length; i++)\r\n        numberSum += parseInt(numbers.substring(i, i + 1));\r\n    let deltas = new Array(0, 1, 2, 3, 4, -4, -3, -2, -1, 0);\r\n    for (var i = numbers.length - 1; i >= 0; i -= 2) {\r\n        numberSum += deltas[parseInt(numbers.substring(i, i + 1))];\r\n    }\r\n    let mod = numberSum % 10;\r\n    mod = 10 - mod;\r\n    if (mod == 10)\r\n        mod = 0;\r\n    return mod;\r\n}\n\nfunction creditCardValidator(configModel) {\r\n    let cardDigits = {\r\n        AmericanExpress: [15],\r\n        DinersClub: [14, 16, 19],\r\n        Discover: [16, 19],\r\n        JCB: [16, 19],\r\n        Maestro: [12, 16, 19],\r\n        MasterCard: [16],\r\n        Visa: [13, 16, 19]\r\n    };\r\n    function validate(creditCardNumber) {\r\n        var digit = parseInt(creditCardNumber.substring(creditCardNumber.length - 1, creditCardNumber.length));\r\n        return calculate(creditCardNumber.substring(0, creditCardNumber.length - 1)) == parseInt(String(digit)) ? !0 : !1;\r\n    }\r\n    function getCardProviderName(cardNumber) {\r\n        var cardProviderName = \"\";\r\n        return /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\\d+$/.test(cardNumber) ? cardProviderName = \"Maestro\" : /^5[1-5]/.test(cardNumber) ? cardProviderName = \"MasterCard\" : /^4/.test(cardNumber) ? cardProviderName = \"Visa\" : /^3[47]/.test(cardNumber) ? cardProviderName = \"AmericanExpress\" : /^(?:2131|1800|35)/.test(cardNumber) ? cardProviderName = \"JCB\" : /^3(?:0[0-5]|[68])/.test(cardNumber) ? cardProviderName = \"DinersClub\" : /^6(?:011|5)/.test(cardNumber) && (cardProviderName = \"Discover\"), cardProviderName;\r\n    }\r\n    return (control) => {\r\n        const controlValue = control.value;\r\n        let config = getConfigObject(configModel, control);\r\n        const parentObject = (control.parent) ? control.parent.value : undefined;\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(controlValue)) {\r\n                let isValid = false;\r\n                let cardTypes = config.fieldName && parentObject[config.fieldName] ? [parentObject[config.fieldName]] : config.creditCardTypes;\r\n                let cardType = '';\r\n                for (let creditCardType of cardTypes) {\r\n                    isValid = checkLength(controlValue.length, cardDigits[creditCardType]) && getCardProviderName(controlValue) == creditCardType && validate(controlValue);\r\n                    cardType = creditCardType;\r\n                    if (isValid)\r\n                        break;\r\n                }\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(AnnotationTypes.creditCard, config, [controlValue, cardType]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction regexValidation(configModel, control, regExp, key) {\r\n    let config = getConfigObject(configModel, control);\r\n    return validate(config, control, regExp, key);\r\n}\r\nfunction validate(config, control, regExp, key) {\r\n    if (ValidatorValueChecker.pass(control, config)) {\r\n        if (!RegexValidator.isValid(control.value, regExp))\r\n            return ObjectMaker.toJson(key, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction digitValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.onlyDigit, AnnotationTypes.digit);\r\n    };\r\n}\n\nfunction emailValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.basicEmail, AnnotationTypes.email);\r\n    };\r\n}\n\nfunction hexColorValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.strictHexColor, AnnotationTypes.hexColor);\r\n    };\r\n}\n\nfunction lowercaseValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value === control.value.toLowerCase()))\r\n                return ObjectMaker.toJson(AnnotationTypes.lowerCase, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst OPERATORS = {\r\n    lessThan: \"<\",\r\n    greaterThan: \">\",\r\n    lessThanEqualTo: \"<=\",\r\n    greaterThanEqualTo: \">=\"\r\n};\n\nfunction runCondition(leftValue, rightValue, operator) {\r\n    let result = false;\r\n    switch (operator) {\r\n        case OPERATORS.lessThan:\r\n        case OPERATORS.greaterThan:\r\n            result = leftValue > rightValue;\r\n            break;\r\n        case OPERATORS.lessThanEqualTo:\r\n        case OPERATORS.greaterThanEqualTo:\r\n            result = leftValue >= rightValue;\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nfunction dateChecker(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    var dateProvider = new DateProvider();\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value, config)) {\r\n                let checkDate = dateProvider.getCompareDate(config, control);\r\n                let currentControlValue = dateProvider.getDate(control.value);\r\n                let isValid = operationType == AnnotationTypes.minDate ? runCondition(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(operationType, config, [control.value]);\r\n            }\r\n            else\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction validateDate(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    var dateProvider = new DateProvider();\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value, config)) {\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n            }\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction maxDateValidator(configModel) {\r\n    return (control) => {\r\n        return dateChecker(control, configModel, AnnotationTypes.maxDate);\r\n    };\r\n}\n\nfunction maxLengthValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value.length <= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.maxLength, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction maxNumberValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(parseFloat(control.value) <= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.maxNumber, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction minDateValidator(configModel) {\r\n    return (control) => {\r\n        return dateChecker(control, configModel, AnnotationTypes.minDate);\r\n    };\r\n}\n\nfunction minLengthValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(String(control.value).length >= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.minLength, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction minNumberValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(parseFloat(control.value) >= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.minNumber, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction passwordValidator(configModel) {\r\n    function getMessageObject(jObject, keyName) {\r\n        if (!jObject.message && !jObject.messageKey) {\r\n            let message = ObjectMaker.getPasswordMessage();\r\n            jObject.message = message && typeof message == \"string\" ? message : ApplicationUtil.isObject(message) ? message[keyName] : \"\";\r\n            if (!jObject.message)\r\n                jObject.message = message[\"password\"];\r\n            jObject.messageKey = \"\";\r\n        }\r\n        return jObject;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, PASSWORD_CONFIG);\r\n        let controlValue = control.value;\r\n        if (RegexValidator.isNotBlank(controlValue)) {\r\n            let validation = RegexValidator.isValidPassword(config.validation, controlValue);\r\n            let jObject = {};\r\n            jObject.message = (config.message && config.message[validation.keyName]) ? config.message[validation.keyName] : typeof config.message == \"string\" ? config.message : '';\r\n            jObject.messageKey = (config.messageKey && config.messageKey[validation.keyName]) ? config.messageKey[validation.keyName] : typeof config.messageKey == \"string\" ? config.messageKey : \"\";\r\n            jObject = getMessageObject(jObject, validation.keyName);\r\n            if (!validation.isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.password, jObject, [controlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction rangeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, RANGE_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value && parseFloat(control.value) >= config.minimumNumber && parseFloat(control.value) <= config.maximumNumber))\r\n                return ObjectMaker.toJson(AnnotationTypes.range, config, [control.value, config.minimumNumber, config.maximumNumber]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction uppercaseValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value === control.value.toUpperCase()))\r\n                return ObjectMaker.toJson(AnnotationTypes.upperCase, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction requiredValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (!RegexValidator.isNotBlank(control.value)) {\r\n                return ObjectMaker.toJson(AnnotationTypes.required, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction patternValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, PATTERN_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            for (var pattern in config.expression)\r\n                if (!(RegexValidator.isValid(control.value, config.expression[pattern])))\r\n                    return ObjectMaker.toJson(pattern, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction timeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let isValid = config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.time, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction urlValidation(configModel, control) {\r\n    var regex = RegExRule.url;\r\n    let config = getConfigObject(configModel, control);\r\n    if (config && config.urlValidationType) {\r\n        switch (config.urlValidationType) {\r\n            case 1:\r\n                regex = RegExRule.url;\r\n                break;\r\n            case 2:\r\n                regex = RegExRule.localhostUrl;\r\n                break;\r\n            case 3:\r\n                regex = RegExRule.interanetUrl;\r\n                break;\r\n        }\r\n    }\r\n    return validate(config, control, regex, AnnotationTypes.url);\r\n}\r\nfunction urlValidator(configModel) {\r\n    return (control) => {\r\n        return urlValidation(configModel, control);\r\n    };\r\n}\n\nfunction jsonValidator(configModel) {\r\n    function process(value) {\r\n        var result = false;\r\n        try {\r\n            var json = JSON.parse(value);\r\n            result = !!json && typeof json === 'object';\r\n        }\r\n        catch (ex) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!process(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.json, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst operatorOpposite = {\r\n    [AnnotationTypes.greaterThan]: AnnotationTypes.lessThan,\r\n    [AnnotationTypes.lessThan]: AnnotationTypes.greaterThan,\r\n    [AnnotationTypes.greaterThanEqualTo]: AnnotationTypes.lessThanEqualTo,\r\n    [AnnotationTypes.lessThanEqualTo]: AnnotationTypes.greaterThanEqualTo,\r\n};\r\nfunction relationalCheck(control, config, relationalOperatorName) {\r\n    config = getConfigObject(config, control);\r\n    const matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n    const matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (config.isArrayControl)\r\n            return arrayControlValidation(control, config, relationalOperatorName);\r\n        if (isValid(control, matchControlValue, relationalOperatorName) === false)\r\n            return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction isValid(control, matchControlValue, relationalOperatorName) {\r\n    if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {\r\n        let isValid = false;\r\n        switch (relationalOperatorName) {\r\n            case AnnotationTypes.greaterThan:\r\n                isValid = parseFloat(control.value) > parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.lessThan:\r\n                isValid = parseFloat(control.value) < parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.greaterThanEqualTo:\r\n                isValid = parseFloat(control.value) >= parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.lessThanEqualTo:\r\n                isValid = parseFloat(control.value) <= parseFloat(matchControlValue);\r\n                break;\r\n        }\r\n        return isValid;\r\n    }\r\n    return null;\r\n}\r\nfunction setTimeFunc(invalidateControls) {\r\n    let timeOut = setTimeout(() => {\r\n        invalidateControls.forEach(t => {\r\n            t.updateValueAndValidity();\r\n        });\r\n        clearTimeout(timeOut);\r\n    }, 200);\r\n}\r\nfunction arrayControlValidation(control, config, relationalOperatorName) {\r\n    let formArray = ApplicationUtil.getParentFormArray(control);\r\n    let parentFormGroup = control.parent ? control.parent : undefined;\r\n    let oppositeOperator = operatorOpposite[relationalOperatorName];\r\n    let updateValidityControls = [];\r\n    if (formArray && parentFormGroup && formArray.controls.length > 1) {\r\n        let indexOf = formArray.controls.indexOf(parentFormGroup);\r\n        let fieldName = ApplicationUtil.getFormControlName(control);\r\n        let valid = true;\r\n        if (indexOf > 0)\r\n            valid = validateControl(formArray, control, indexOf - 1, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls);\r\n        if (valid && formArray.controls.length > indexOf + 1)\r\n            valid = validateControl(formArray, control, indexOf + 1, fieldName, relationalOperatorName, relationalOperatorName, updateValidityControls);\r\n        if (updateValidityControls.length > 0)\r\n            setTimeFunc(updateValidityControls);\r\n        if (valid === false)\r\n            return ObjectMaker.toJson(relationalOperatorName, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction validateControl(formArray, control, indexOf, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls) {\r\n    let valid = false;\r\n    let formGroup = formArray.controls[indexOf];\r\n    if (formGroup && formGroup.controls) {\r\n        let formControl = formGroup.controls[fieldName];\r\n        valid = isValid(control, formControl.value, oppositeOperator);\r\n        if (valid && formControl.errors && formControl.errors[relationalOperatorName])\r\n            updateValidityControls.push(formControl);\r\n    }\r\n    return valid;\r\n}\n\nfunction greaterThanValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.greaterThan);\r\n    };\r\n}\n\nfunction greaterThanEqualToValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.greaterThanEqualTo);\r\n    };\r\n}\n\nfunction lessThanEqualToValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.lessThanEqualTo);\r\n    };\r\n}\n\nfunction lessThanValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.lessThan);\r\n    };\r\n}\n\nfunction choiceValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (control.value instanceof Array) {\r\n                config.minLength = (config.minLength == undefined) ? 0 : config.minLength;\r\n                config.maxLength = (config.maxLength == undefined) ? 0 : config.maxLength;\r\n                if ((((control.value.length) < config.minLength) || (config.maxLength !== 0 && control.value.length > config.maxLength)))\r\n                    return ObjectMaker.toJson(AnnotationTypes.choice, config, [control.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction differentValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, FIELD_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            const differentControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n            const differentControlValue = (differentControl) ? differentControl.value : '';\r\n            if (!(differentControl && differentControl.value != control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.different, config, [control.value, differentControlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction numericValidator(configModel) {\r\n    return (control) => {\r\n        if (configModel && (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.numeric]))\r\n            ApplicationUtil.configureControl(control, configModel, AnnotationTypes.numeric);\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!RegexValidator.isValid(control.value, ApplicationUtil.numericValidation(config.allowDecimal, config.acceptValue)))\r\n                return ObjectMaker.toJson(AnnotationTypes.numeric, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction evenValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value % 2 == 0))\r\n                return ObjectMaker.toJson(AnnotationTypes.even, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction oddValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(!(control.value % 2 == 0)) || !ApplicationUtil.isNumeric(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.odd, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction factorValidator(configModel) {\r\n    function positiveFactors(dividend, value) {\r\n        let isPositive = false;\r\n        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {\r\n            if (dividend % index === 0) {\r\n                if (index == value)\r\n                    isPositive = true;\r\n                if (dividend / index !== index)\r\n                    if ((dividend / index) == value)\r\n                        isPositive = true;\r\n                if (isPositive)\r\n                    break;\r\n            }\r\n        }\r\n        return isPositive;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        const dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n        const dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {\r\n                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))\r\n                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction leapYearValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var isValid = (control.value % 100 === 0) ? (control.value % 400 === 0) : (control.value % 4 === 0);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.leapYear, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction allOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (ValidatorValueChecker.passArrayValue(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                testResult = control.value.some((y) => y == value);\r\n                if (!testResult)\r\n                    break;\r\n            }\r\n            if (!testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.allOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction oneOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (ValidatorValueChecker.passArrayValue(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                testResult = control.value.some((y) => y == value);\r\n                if (testResult)\r\n                    break;\r\n            }\r\n            if (!testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.oneOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction noneOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\r\n                testResult = Array.isArray(control.value) ? control.value.some((y) => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\r\n                if (testResult)\r\n                    break;\r\n            }\r\n            if (testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.noneOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction macValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.macId, AnnotationTypes.mac);\r\n    };\r\n}\n\nfunction asciiValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.ascii, AnnotationTypes.ascii);\r\n    };\r\n}\n\nfunction dataUriValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.dataUri, AnnotationTypes.dataUri);\r\n    };\r\n}\n\nfunction portValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let isValid = RegexValidator.isValid(control.value, RegExRule.onlyDigit) && (control.value >= 0 && control.value <= 65535);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.port, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction latLongValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let splitText = control.value.split(',');\r\n            if (!(splitText.length > 1 && RegexValidator.isValid(splitText[0], RegExRule.lat) && RegexValidator.isValid(splitText[1], RegExRule.long)))\r\n                return ObjectMaker.toJson(AnnotationTypes.latLong, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction extensionValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.extension])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.extension);\r\n        if (files && FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let testResult = true;\r\n                let extension = '';\r\n                for (var i = 0; i < files.length; i++) {\r\n                    let file = files.item(i);\r\n                    let splitText = file.name.split(\".\");\r\n                    extension = splitText[splitText.length - 1];\r\n                    let result = config.extensions.filter(t => { return extension.toLowerCase() == t.toLowerCase(); })[0];\r\n                    if (!result) {\r\n                        testResult = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!testResult)\r\n                    return ObjectMaker.toJson(AnnotationTypes.extension, config, [extension, config.extensions.join(\",\")]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction fileSizeValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.fileSize])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.fileSize);\r\n        if (files && FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let minFileSize = config.minSize ? config.minSize : 0;\r\n                let testResult = false;\r\n                let fileSize = 0;\r\n                for (var i = 0; i < files.length; i++) {\r\n                    let file = files.item(i);\r\n                    fileSize = file.size;\r\n                    testResult = (!(fileSize >= minFileSize && fileSize <= config.maxSize));\r\n                    if (testResult)\r\n                        break;\r\n                }\r\n                if (testResult)\r\n                    return ObjectMaker.toJson(AnnotationTypes.fileSize, config, [fileSize, config.maxSize]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction endsWithValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var endString = String(control.value).substr(control.value.length - config.value.length, config.value.length);\r\n            if (endString != config.value)\r\n                return ObjectMaker.toJson(AnnotationTypes.endsWith, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction startsWithValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var startString = String(control.value).substr(0, config.value.length);\r\n            if ((config.isRestrict && String(startString).toLowerCase() == String(config.value).toLowerCase()) || (!config.isRestrict && startString != config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.startsWith, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction primeNumberValidator(configModel) {\r\n    function isPrime(value) {\r\n        let isPrimeNumber = value != 1;\r\n        for (var i = 2; i < value; i++) {\r\n            if (value % i == 0) {\r\n                isPrimeNumber = false;\r\n                break;\r\n            }\r\n        }\r\n        return isPrimeNumber;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!ApplicationUtil.isNumeric(control.value) || !isPrime(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.primeNumber, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction latitudeValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.lat, AnnotationTypes.latitude);\r\n    };\r\n}\n\nfunction longitudeValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.long, AnnotationTypes.longitude);\r\n    };\r\n}\n\nfunction composeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (config.validators) {\r\n                let result = undefined;\r\n                for (let validator of config.validators) {\r\n                    result = validator(control);\r\n                    if (result)\r\n                        break;\r\n                }\r\n                if (result)\r\n                    return (config.messageKey || config.message) ? ObjectMaker.toJson(config.messageKey || AnnotationTypes.compose, config, [control.value]) : result;\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction ruleValidator(configModel, entity) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            let result = null;\r\n            for (let rule of config.customRules) {\r\n                result = rule(entity);\r\n                if (result)\r\n                    break;\r\n            }\r\n            if (result)\r\n                return result;\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction fileValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.file])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.file);\r\n        if (files) {\r\n            if (FormProvider.ProcessRule(control, config)) {\r\n                if (RegexValidator.isNotBlank(control.value)) {\r\n                    let minFiles = config.minFiles ? config.minFiles : 0;\r\n                    let maxFiles = config.maxFiles ? config.maxFiles : files.length;\r\n                    if (!(files.length > 0 && files[0] instanceof File && files.length >= minFiles && files.length <= maxFiles))\r\n                        return ObjectMaker.toJson(AnnotationTypes.file, config, [files.length, minFiles, maxFiles]);\r\n                }\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction customValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            const formGroupValue = ApplicationUtil.getParentObjectValue(control);\r\n            const parentObject = (control.parent) ? control.parent.value : undefined;\r\n            let result = null;\r\n            for (let rule of config.customRules) {\r\n                result = rule(formGroupValue, parentObject, config.additionalValue);\r\n                if (result)\r\n                    break;\r\n            }\r\n            if (result)\r\n                return result;\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction uniqueValidator(configModel) {\r\n    var setTimeoutFunc = (invalidateControls, controlValues) => {\r\n        let timeOut = setTimeout(() => {\r\n            invalidateControls.forEach(t => {\r\n                let isMatched = controlValues.filter(x => x == t.value)[0];\r\n                if (!isMatched)\r\n                    t.updateValueAndValidity();\r\n            });\r\n            clearTimeout(timeOut);\r\n        }, 200);\r\n    };\r\n    var additionalValidation = (config, fieldName, formGroup, formArray, currentValue) => {\r\n        let indexOf = formArray.controls.indexOf(formGroup);\r\n        let formArrayValue = [];\r\n        if (indexOf != -1) {\r\n            formArray.value.forEach((t, i) => {\r\n                if (indexOf != i)\r\n                    formArrayValue.push(t);\r\n            });\r\n            return config.additionalValidation(currentValue, indexOf, fieldName, formGroup.value, formArrayValue);\r\n        }\r\n        return false;\r\n    };\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let formArray = ApplicationUtil.getParentFormArray(control);\r\n                let parentFormGroup = control.parent ? control.parent : undefined;\r\n                let invalidateControls = [];\r\n                let controlValues = [];\r\n                if (formArray && parentFormGroup) {\r\n                    let currentValue = control.value;\r\n                    let fieldName = ApplicationUtil.getFormControlName(control);\r\n                    let isMatched = false;\r\n                    for (let formGroup of formArray.controls) {\r\n                        if (formGroup != parentFormGroup) {\r\n                            isMatched = (ApplicationUtil.toLower(formGroup.controls[fieldName].value) == ApplicationUtil.toLower(currentValue) && !(formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]));\r\n                            if (formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]) {\r\n                                var matchedControl = formArray.controls.filter(t => t.controls[fieldName] != formGroup.controls[fieldName] && ApplicationUtil.toLower(t.controls[fieldName].value) == ApplicationUtil.toLower(formGroup.controls[fieldName].value))[0];\r\n                                if (!matchedControl)\r\n                                    invalidateControls.push(formGroup.controls[fieldName]);\r\n                            }\r\n                            else\r\n                                controlValues.push(formGroup.controls[fieldName].value);\r\n                        }\r\n                        if (isMatched)\r\n                            break;\r\n                    }\r\n                    if (invalidateControls.length > 0)\r\n                        setTimeoutFunc(invalidateControls, controlValues);\r\n                    let validation = false;\r\n                    if (config.additionalValidation) {\r\n                        validation = additionalValidation(config, fieldName, parentFormGroup, formArray, currentValue);\r\n                    }\r\n                    if (isMatched && !validation)\r\n                        return ObjectMaker.toJson(AnnotationTypes.unique, config, [control.value]);\r\n                }\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction imageValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.image])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.image);\r\n        if (!files)\r\n            return ObjectMaker.null();\r\n        return new Promise((resolve, reject) => {\r\n            if (FormProvider.ProcessRule(control, config)) {\r\n                if (RegexValidator.isNotBlank(control.value)) {\r\n                    let testResult = false;\r\n                    for (var i = 0; i < files.length; i++) {\r\n                        let file = files.item(i);\r\n                        let type = file.type ? file.type.split('/') : [];\r\n                        testResult = type.length > 1 && type[0] == \"image\";\r\n                        if (!testResult)\r\n                            break;\r\n                        let image = new Image();\r\n                        config.minWidth = config.minWidth ? config.minWidth : 0;\r\n                        config.minHeight = config.minHeight ? config.minHeight : 0;\r\n                        image.onload = () => {\r\n                            testResult = (image.width >= config.minWidth && image.height >= config.minHeight) && (image.width <= config.maxWidth && image.height <= config.maxHeight);\r\n                            if (!testResult)\r\n                                resolve(ObjectMaker.toJson(AnnotationTypes.image, config, [image.width, image.height]));\r\n                            else\r\n                                resolve(ObjectMaker.null());\r\n                        };\r\n                        image.onerror = () => {\r\n                            resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\r\n                        };\r\n                        image.src = URL.createObjectURL(file);\r\n                    }\r\n                    if (!testResult)\r\n                        resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\r\n                }\r\n            }\r\n            return ObjectMaker.null();\r\n        });\r\n    };\r\n}\n\nfunction notEmptyValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (!RegexValidator.isNotBlank(control.value, true)) {\r\n                return ObjectMaker.toJson(AnnotationTypes.notEmpty, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction checkIpV4(value) {\r\n    let isValid = RegexValidator.isValid(value, RegExRule.ipV4);\r\n    if (isValid) {\r\n        const splitDots = value.split('.');\r\n        for (let ipNum of splitDots) {\r\n            isValid = ipNum <= 255;\r\n            if (!isValid)\r\n                break;\r\n        }\r\n    }\r\n    return isValid;\r\n}\r\nfunction checkIpV6(value) {\r\n    return RegexValidator.isValid(value, RegExRule.ipV6);\r\n}\n\nfunction ipValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, IP_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let values = config.isCidr ? control.value.split('/') : [control.value];\r\n            var isValid = (config.version == IpVersion.V4) ?\r\n                checkIpV4(values[0]) :\r\n                (config.version == IpVersion.V6) ?\r\n                    checkIpV6(values[0]) :\r\n                    (checkIpV4(values[0]) || checkIpV6(values[0]));\r\n            if (config.isCidr && isValid) {\r\n                isValid = (values.length > 1) ?\r\n                    config.version == IpVersion.V4 ?\r\n                        RegexValidator.isValid(values[1], RegExRule.cidrV4) :\r\n                        config.version == IpVersion.V6 ?\r\n                            RegexValidator.isValid(values[1], RegExRule.cidrV6) :\r\n                            (RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6)) :\r\n                    false;\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction cusipValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var controlValue = control.value.toUpperCase();\r\n            let isValid = RegexValidator.isValid(controlValue, RegExRule.cusip);\r\n            if (isValid) {\r\n                let numericValues = controlValue.split(\"\").map((value) => {\r\n                    var charCode = value.charCodeAt(0);\r\n                    return charCode >= \"A\".charCodeAt(0) && charCode <= \"Z\".charCodeAt(0) ? charCode - \"A\".charCodeAt(0) + 10 : value;\r\n                });\r\n                let totalCount = 0;\r\n                for (var i = 0; i < numericValues.length - 1; i++) {\r\n                    var numericValue = parseInt(numericValues[i], 10);\r\n                    if (i % 2 !== 0) {\r\n                        numericValue *= 2;\r\n                    }\r\n                    if (numericValue > 9) {\r\n                        numericValue -= 9;\r\n                    }\r\n                    totalCount += numericValue;\r\n                }\r\n                totalCount = (10 - (totalCount % 10)) % 10;\r\n                isValid = totalCount == numericValues[numericValues.length - 1];\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.cusip, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction gridValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let controlValue = control.value.toUpperCase();\r\n            var isValid = RegexValidator.isValid(controlValue, RegExRule.grid);\r\n            if (isValid) {\r\n                controlValue = controlValue.replace(/\\s/g, '').replace(/-/g, '');\r\n                if ('GRID:' === controlValue.substr(0, 5)) {\r\n                    controlValue = controlValue.substr(5);\r\n                }\r\n                let alphaNums = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n                var alphaNumLength = alphaNums.length, length = controlValue.length, check = Math.floor(alphaNumLength / 2);\r\n                for (var i = 0; i < length; i++) {\r\n                    check = (((check || alphaNumLength) * 2) % (alphaNumLength + 1) + alphaNums.indexOf(controlValue.charAt(i))) % alphaNumLength;\r\n                }\r\n                isValid = (check === 1);\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.grid, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction dateValidator(configModel) {\r\n    return (control) => {\r\n        return validateDate(control, configModel, AnnotationTypes.date);\r\n    };\r\n}\n\nfunction runCondition$1(leftValue, rightValue, operator) {\r\n    let result = false;\r\n    switch (operator) {\r\n        case OPERATORS.lessThan:\r\n        case OPERATORS.greaterThan:\r\n            result = leftValue > rightValue;\r\n            break;\r\n        case OPERATORS.lessThanEqualTo:\r\n        case OPERATORS.greaterThanEqualTo:\r\n            result = leftValue >= rightValue;\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nfunction isValid$1(control, config) {\r\n    return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\r\n}\r\nfunction getTime(value) {\r\n    let splitTime = (value) ? value.split(':') : [];\r\n    return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();\r\n}\r\nfunction timeChecker(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (isValid$1(control, config)) {\r\n                let crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n                let crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);\r\n                let currentControlValue = getTime(control.value);\r\n                let isValid = operationType == AnnotationTypes.minTime ? runCondition$1(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition$1(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(operationType, config, [control.value]);\r\n            }\r\n            else\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction minTimeValidator(configModel) {\r\n    return (control) => {\r\n        return timeChecker(control, configModel, AnnotationTypes.minTime);\r\n    };\r\n}\n\nfunction maxTimeValidator(configModel) {\r\n    return (control) => {\r\n        return timeChecker(control, configModel, AnnotationTypes.maxTime);\r\n    };\r\n}\n\nfunction requiredTrueValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (control.value !== true) {\r\n                return ObjectMaker.toJson(AnnotationTypes.requiredTrue, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction maskValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.mask])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.mask);\r\n        return null;\r\n    };\r\n}\n\nconst APP_VALIDATORS = {\r\n    \"alphaNumeric\": alphaNumericValidator,\r\n    \"alpha\": alphaValidator,\r\n    \"compare\": compareValidator,\r\n    \"email\": emailValidator,\r\n    \"hexColor\": hexColorValidator,\r\n    \"lowerCase\": lowercaseValidator,\r\n    \"maxDate\": maxDateValidator,\r\n    \"maxNumber\": maxNumberValidator,\r\n    \"minDate\": minDateValidator,\r\n    \"minNumber\": minNumberValidator,\r\n    \"contains\": containsValidator,\r\n    \"upperCase\": uppercaseValidator,\r\n    \"maxLength\": maxLengthValidator,\r\n    \"minLength\": minLengthValidator,\r\n    \"password\": passwordValidator,\r\n    \"range\": rangeValidator,\r\n    \"required\": requiredValidator,\r\n    \"creditCard\": creditCardValidator,\r\n    \"digit\": digitValidator,\r\n    \"pattern\": patternValidator,\r\n    \"time\": timeValidator,\r\n    \"url\": urlValidator,\r\n    \"json\": jsonValidator,\r\n    \"greaterThan\": greaterThanValidator,\r\n    \"greaterThanEqualTo\": greaterThanEqualToValidator,\r\n    \"lessThan\": lessThanValidator,\r\n    \"lessThanEqualTo\": lessThanEqualToValidator,\r\n    \"choice\": choiceValidator,\r\n    \"different\": differentValidator,\r\n    \"numeric\": numericValidator,\r\n    \"even\": evenValidator,\r\n    \"odd\": oddValidator,\r\n    \"factor\": factorValidator,\r\n    \"leapYear\": leapYearValidator,\r\n    \"allOf\": allOfValidator,\r\n    \"oneOf\": oneOfValidator,\r\n    \"noneOf\": noneOfValidator,\r\n    \"mac\": macValidator,\r\n    \"ascii\": asciiValidator,\r\n    \"dataUri\": dataUriValidator,\r\n    \"port\": portValidator,\r\n    \"latLong\": latLongValidator,\r\n    \"extension\": extensionValidator,\r\n    \"fileSize\": fileSizeValidator,\r\n    \"endsWith\": endsWithValidator,\r\n    \"startsWith\": startsWithValidator,\r\n    \"primeNumber\": primeNumberValidator,\r\n    \"latitude\": latitudeValidator,\r\n    \"longitude\": longitudeValidator,\r\n    \"compose\": composeValidator,\r\n    \"rule\": ruleValidator,\r\n    \"file\": fileValidator,\r\n    \"unique\": uniqueValidator,\r\n    \"image\": imageValidator,\r\n    \"notEmpty\": notEmptyValidator,\r\n    \"ip\": ipValidator,\r\n    \"cusip\": cusipValidator,\r\n    \"grid\": gridValidator,\r\n    \"date\": dateValidator,\r\n    \"minTime\": minTimeValidator,\r\n    \"maxTime\": maxTimeValidator,\r\n    \"requiredTrue\": requiredTrueValidator,\r\n    \"mask\": maskValidator\r\n};\n\nfunction andValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.and, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction orValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.or, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction notValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (!failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.not, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst LOGICAL_VALIDATORS = { and: andValidator, or: orValidator, not: notValidator };\r\nconst ASYNC = \"async\";\r\nconst ENTITY_OBJECT = \"entityObject\";\r\nlet RxFormBuilder = class RxFormBuilder extends BaseFormBuilder {\r\n    constructor() {\r\n        super();\r\n        this.conditionalObjectProps = [];\r\n        this.conditionalValidationInstance = {};\r\n        this.builderConfigurationConditionalObjectProps = [];\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = {};\r\n        this.isNested = false;\r\n        this.isGroupCalled = false;\r\n        this.isNestedBinding = false;\r\n    }\r\n    getInstanceContainer(instanceFunc, entityObject) {\r\n        return this.instaceProvider(instanceFunc, entityObject);\r\n    }\r\n    setValue(formGroup, object) {\r\n        for (var col in object) {\r\n            var control = formGroup.get([col]);\r\n            control.setValue(object[col]);\r\n            control.updateValueAndValidity();\r\n        }\r\n    }\r\n    extractExpressions(fomrBuilderConfiguration) {\r\n        if (fomrBuilderConfiguration && fomrBuilderConfiguration.dynamicValidation) {\r\n            for (var property in fomrBuilderConfiguration.dynamicValidation) {\r\n                for (var decorator in fomrBuilderConfiguration.dynamicValidation[property]) {\r\n                    if (fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression) {\r\n                        let columns = Linq.expressionColumns(fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression);\r\n                        defaultContainer.addChangeValidation(this.conditionalValidationInstance, property, columns);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    addAsyncValidation(property, propertyValidators, propValidationConfig) {\r\n        let asyncValidators = [];\r\n        if (propertyValidators) {\r\n            for (let propertyValidator of propertyValidators) {\r\n                if (propertyValidator.isAsync)\r\n                    propertyValidator.config.forEach(t => { asyncValidators.push(t); });\r\n            }\r\n        }\r\n        if (propValidationConfig && propValidationConfig[ASYNC]) {\r\n            propValidationConfig[ASYNC].forEach(t => { asyncValidators.push(t); });\r\n        }\r\n        return asyncValidators;\r\n    }\r\n    addFormControl(property, propertyValidators, propValidationConfig, instance, entity) {\r\n        let validators = [];\r\n        let columns = [];\r\n        if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]) || (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])) {\r\n            let props = [];\r\n            if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]))\r\n                instance.conditionalValidationProps[property.name].forEach(t => props.push(t));\r\n            if (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])\r\n                this.conditionalValidationInstance.conditionalValidationProps[property.name].forEach(t => props.push(t));\r\n            validators.push(conditionalChangeValidator(props));\r\n        }\r\n        if (this.conditionalObjectProps.length > 0 || this.builderConfigurationConditionalObjectProps.length > 0) {\r\n            let propConditions = [];\r\n            if (this.conditionalObjectProps)\r\n                propConditions = this.conditionalObjectProps.filter(t => t.propName == property.name);\r\n            if (this.builderConfigurationConditionalObjectProps)\r\n                this.builderConfigurationConditionalObjectProps.filter(t => t.propName == property.name).forEach(t => propConditions.push(t));\r\n            propConditions.forEach(t => {\r\n                if (t.referencePropName && columns.indexOf(t.referencePropName) == -1)\r\n                    columns.push(t.referencePropName);\r\n            });\r\n            if (columns.length > 0)\r\n                validators.push(conditionalChangeValidator(columns));\r\n        }\r\n        for (let propertyValidator of propertyValidators) {\r\n            if (!propertyValidator.isAsync)\r\n                switch (propertyValidator.annotationType) {\r\n                    case AnnotationTypes.rule:\r\n                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](propertyValidator.config, entity));\r\n                        break;\r\n                    case AnnotationTypes.and:\r\n                    case AnnotationTypes.or:\r\n                    case AnnotationTypes.not:\r\n                        validators.push(LOGICAL_VALIDATORS[propertyValidator.annotationType](propertyValidator.config));\r\n                        break;\r\n                    default:\r\n                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](propertyValidator.config));\r\n                        break;\r\n                }\r\n        }\r\n        if (propValidationConfig)\r\n            this.additionalValidation(validators, propValidationConfig);\r\n        if (this.currentFormGroupPropOtherValidator[property.name])\r\n            this.currentFormGroupPropOtherValidator[property.name].forEach(t => { validators.push(t); });\r\n        return validators;\r\n    }\r\n    additionalValidation(validations, propValidationConfig) {\r\n        for (var col in AnnotationTypes) {\r\n            if (propValidationConfig[AnnotationTypes[col]] && col != \"custom\") {\r\n                validations.push(APP_VALIDATORS[AnnotationTypes[col]](propValidationConfig[AnnotationTypes[col]]));\r\n            }\r\n            else if (col == AnnotationTypes.custom && propValidationConfig[AnnotationTypes[col]])\r\n                validations.push(propValidationConfig[col]);\r\n        }\r\n    }\r\n    getEntity(object, formBuilderConfiguration, propertyName, isSameObjectConstructor = false) {\r\n        if (formBuilderConfiguration && formBuilderConfiguration.genericEntities && formBuilderConfiguration.genericEntities[propertyName])\r\n            return formBuilderConfiguration.genericEntities[propertyName];\r\n        return isSameObjectConstructor ? object.constructor : undefined;\r\n    }\r\n    getObjectPropertyInstance(object, propertyInfo, formBuilderConfiguration) {\r\n        if (propertyInfo.propertyType == OBJECT_PROPERTY && object[propertyInfo.name])\r\n            return object[propertyInfo.name].constructor;\r\n        else if (propertyInfo.propertyType == ARRAY_PROPERTY && object[propertyInfo.name] && object[propertyInfo.name].length > 0)\r\n            return object[propertyInfo.name][0].constructor;\r\n        return this.getEntity(object, formBuilderConfiguration, propertyInfo.name);\r\n    }\r\n    checkObjectPropAdditionalValidation(instanceContainer, object, formBuilderConfiguration) {\r\n        var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY);\r\n        props.forEach(t => {\r\n            let entity = t.entity;\r\n            if (!t.entity)\r\n                entity = this.getObjectPropertyInstance(object, t, formBuilderConfiguration);\r\n            if (entity) {\r\n                let instance = this.getInstanceContainer(entity, null);\r\n                if (instance && instance.conditionalValidationProps) {\r\n                    for (var key in instance.conditionalValidationProps) {\r\n                        var prop = instanceContainer.properties.filter(t => t.name == key)[0];\r\n                        if (prop) {\r\n                            if (!instanceContainer.conditionalValidationProps)\r\n                                instanceContainer.conditionalValidationProps = {};\r\n                            if (!instanceContainer.conditionalValidationProps[key])\r\n                                instanceContainer.conditionalValidationProps[key] = [];\r\n                            instance.conditionalValidationProps[key].forEach(x => {\r\n                                if (t.propertyType != ARRAY_PROPERTY)\r\n                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('.'));\r\n                                else\r\n                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('[]'));\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getObject(model, entityObject, formBuilderConfiguration) {\r\n        let json = {};\r\n        if (typeof model == FUNCTION_STRING)\r\n            json.model = model;\r\n        if (typeof model == FUNCTION_STRING && (entityObject instanceof FormBuilderConfiguration)) {\r\n            json.entityObject = this.createClassObject(json.model, entityObject);\r\n        }\r\n        if (entityObject && !(entityObject instanceof FormBuilderConfiguration))\r\n            json.entityObject = entityObject;\r\n        if (entityObject instanceof FormBuilderConfiguration && !formBuilderConfiguration)\r\n            json.formBuilderConfiguration = entityObject;\r\n        else if (!(entityObject instanceof FormBuilderConfiguration) && formBuilderConfiguration) {\r\n            json.formBuilderConfiguration = formBuilderConfiguration;\r\n            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, json.entityObject);\r\n        }\r\n        if (!entityObject) {\r\n            if (typeof model == OBJECT_STRING)\r\n                json.model = model.constructor;\r\n            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, model);\r\n        }\r\n        else if (model && (entityObject instanceof FormBuilderConfiguration) && (typeof model == OBJECT_STRING)) {\r\n            json[MODEL] = model.constructor;\r\n            json[ENTITY_OBJECT] = this.createClassObject(json.model, json.formBuilderConfiguration, model);\r\n        }\r\n        return json;\r\n    }\r\n    control(value, validators, asyncValidators) {\r\n        return new RxFormControl(value, validators, asyncValidators, {}, {}, '', []);\r\n    }\r\n    array(values, validatorConfig) {\r\n        let formArray = this.group({ temp: values }, validatorConfig).get(\"temp\");\r\n        var formBuilder = new FormBuilder();\r\n        return formBuilder.array(formArray.controls);\r\n    }\r\n    group(groupObject, validatorConfig) {\r\n        let modelInstance = super.createInstance();\r\n        let entityObject = {};\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig);\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.isGroupCalled = true;\r\n        let formGroup = this.formGroup(modelInstance.constructor, entityObject, validatorConfig);\r\n        this.isGroupCalled = false;\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.formGroupPropOtherValidator = {};\r\n        return formGroup;\r\n    }\r\n    applyAllPropValidator(propName, validatorConfig, modelInstance) {\r\n        if (validatorConfig && validatorConfig.applyAllProps) {\r\n            if (!(validatorConfig.excludeProps && validatorConfig.excludeProps.length > 0 && validatorConfig.excludeProps.indexOf(propName) == -1)) {\r\n                validatorConfig.applyAllProps.forEach((t) => {\r\n                    if (t.name == RX_WEB_VALIDATOR) {\r\n                        t(propName, modelInstance);\r\n                    }\r\n                    else {\r\n                        if (!this.currentFormGroupPropOtherValidator[propName])\r\n                            this.currentFormGroupPropOtherValidator[propName] = [];\r\n                        this.currentFormGroupPropOtherValidator[propName].push(t);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    dynamicValidationPropCheck(propName, validatorConfig) {\r\n        return (validatorConfig == undefined) ? true : (!validatorConfig.dynamicValidationConfigurationPropertyName) ? true : validatorConfig.dynamicValidationConfigurationPropertyName == propName ? false : true;\r\n    }\r\n    isNotObject(value) {\r\n        return value instanceof Date || value === null || typeof value != OBJECT_STRING;\r\n    }\r\n    createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig) {\r\n        for (var propName in groupObject) {\r\n            var prop = groupObject[propName];\r\n            if (prop instanceof Array && prop.length > 0 && this.isNotObject(prop[0])) {\r\n                let propValidators = (prop.length > 1 && prop[1] instanceof Array) ? prop[1] : (prop.length == 2) ? [prop[1]] : [];\r\n                let propertyAdded = false;\r\n                for (var i = 0; i < propValidators.length; i++) {\r\n                    if (propValidators[i].name == RX_WEB_VALIDATOR) {\r\n                        propValidators[i](propName, modelInstance);\r\n                        propertyAdded = true;\r\n                    }\r\n                    else {\r\n                        if (!this.currentFormGroupPropOtherValidator[propName])\r\n                            this.currentFormGroupPropOtherValidator[propName] = [];\r\n                        this.currentFormGroupPropOtherValidator[propName].push(propValidators[i]);\r\n                    }\r\n                }\r\n                if (!propertyAdded)\r\n                    defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });\r\n                this.applyAllPropValidator(propName, validatorConfig, modelInstance);\r\n            }\r\n            else if (prop === null || prop === undefined || typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN || prop instanceof Date) {\r\n                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });\r\n                this.applyAllPropValidator(propName, validatorConfig, modelInstance);\r\n            }\r\n            else if (prop instanceof Array) {\r\n                if (prop instanceof FormArray) {\r\n                    entityObject[propName] = prop;\r\n                }\r\n                else {\r\n                    let propModelInstance = super.createInstance();\r\n                    if (typeof modelInstance == \"function\")\r\n                        modelInstance.constructor = modelInstance;\r\n                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, propModelInstance.constructor, modelInstance);\r\n                    entityObject[propName] = [];\r\n                    for (let row of prop) {\r\n                        let jObject = {};\r\n                        entityObject[propName].push(jObject);\r\n                        this.createValidatorFormGroup(row, jObject, propModelInstance.constructor, validatorConfig);\r\n                    }\r\n                }\r\n            }\r\n            else if (typeof prop == OBJECT_STRING && !(prop instanceof FormControl || prop instanceof RxFormControl)) {\r\n                let formGroup = (prop instanceof FormArray) ? prop.controls[0] : prop;\r\n                if (!formGroup.model && (prop instanceof FormGroup || prop instanceof RxFormGroup)) {\r\n                    formGroup = this.group(formGroup.controls);\r\n                }\r\n                if (prop instanceof FormGroup || prop instanceof RxFormGroup) {\r\n                    entityObject[propName] = prop;\r\n                    defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, formGroup.model, modelInstance);\r\n                }\r\n                else if (prop instanceof FormArray) {\r\n                    entityObject[propName] = prop;\r\n                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, formGroup.model, modelInstance);\r\n                }\r\n                else {\r\n                    if (this.dynamicValidationPropCheck(propName, validatorConfig)) {\r\n                        this.formGroupPropOtherValidator[propName] = {};\r\n                        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[propName];\r\n                        let propModelInstance = super.createInstance();\r\n                        entityObject[propName] = {};\r\n                        entityObject[propName].constructor = propModelInstance.constructor;\r\n                        defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, entityObject[propName].constructor, modelInstance.constructor == Function ? { constructor: modelInstance } : modelInstance);\r\n                        let objectValidationConfig = this.getValidatorConfig(validatorConfig, groupObject, propName + \".\");\r\n                        this.createValidatorFormGroup(groupObject[propName], entityObject[propName], entityObject[propName].constructor, objectValidationConfig);\r\n                    }\r\n                    else\r\n                        entityObject[propName] = groupObject[propName];\r\n                }\r\n            }\r\n            if (typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN || prop instanceof Date) {\r\n                entityObject[propName] = prop;\r\n            }\r\n            else if ((prop && prop.length > 0 && this.isNotObject(prop[0]) && !(prop instanceof FormControl || prop instanceof RxFormControl) && !(prop instanceof FormArray))) {\r\n                entityObject[propName] = prop[0];\r\n            }\r\n            else if (prop instanceof FormArray) {\r\n                entityObject[propName] = prop;\r\n            }\r\n            else if (prop instanceof FormControl || prop instanceof RxFormControl) {\r\n                entityObject[propName] = prop;\r\n                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, modelInstance.constructor ? modelInstance : { constructor: modelInstance });\r\n            }\r\n        }\r\n    }\r\n    getValidatorConfig(validatorConfig, entityObject, rootPropertyName, arrayPropertyName) {\r\n        let validationProps = {};\r\n        let excludeProps = [];\r\n        let includeProps = [];\r\n        let ignoreUndefinedProps = [];\r\n        if (validatorConfig) {\r\n            for (var propName in validatorConfig.dynamicValidation) {\r\n                if (propName.indexOf(rootPropertyName) != -1 || (arrayPropertyName && propName.indexOf(arrayPropertyName) != -1)) {\r\n                    let splitProp = propName.split(\".\")[1];\r\n                    if (splitProp)\r\n                        validationProps[splitProp] = validatorConfig.dynamicValidation[propName];\r\n                }\r\n            }\r\n            if (validatorConfig.excludeProps)\r\n                excludeProps = this.getProps(validatorConfig.excludeProps, rootPropertyName);\r\n            if (validatorConfig.includeProps)\r\n                includeProps = this.getProps(validatorConfig.includeProps, rootPropertyName);\r\n            if (validatorConfig.ignoreUndefinedProps)\r\n                ignoreUndefinedProps = this.getProps(validatorConfig.ignoreUndefinedProps, rootPropertyName, true);\r\n            return { ignoreUndefinedProps: ignoreUndefinedProps, includeProps: includeProps, dynamicValidation: (validatorConfig.dynamicValidationConfigurationPropertyName && entityObject[validatorConfig.dynamicValidationConfigurationPropertyName]) ? entityObject[validatorConfig.dynamicValidationConfigurationPropertyName] : validationProps, excludeProps: excludeProps };\r\n        }\r\n        return {};\r\n    }\r\n    getProps(properties, rootPropertyName, isIgnoreProp = false) {\r\n        let props = [];\r\n        for (let prop of properties) {\r\n            if (prop.indexOf(rootPropertyName) != -1) {\r\n                let splitProps = prop.split(\".\");\r\n                if (splitProps.length == 2) {\r\n                    props.push(splitProps[1]);\r\n                }\r\n                else if (splitProps.length > 2) {\r\n                    splitProps.splice(0, 1);\r\n                    props.push(splitProps.join(\".\"));\r\n                }\r\n            }\r\n        }\r\n        if (isIgnoreProp && properties.filter(x => x == rootPropertyName.replace('.', '')).length == 1)\r\n            props.push(':self:');\r\n        return props;\r\n    }\r\n    formGroup(model, entityObject, formBuilderConfiguration) {\r\n        let json = this.getObject(model, entityObject, formBuilderConfiguration);\r\n        model = json.model;\r\n        entityObject = json.entityObject;\r\n        if (entityObject.constructor != model && !this.isGroupCalled) {\r\n            entityObject = json.entityObject = this.updateObject(model, json.entityObject, formBuilderConfiguration);\r\n        }\r\n        formBuilderConfiguration = json.formBuilderConfiguration;\r\n        if (formBuilderConfiguration)\r\n            this.extractExpressions(formBuilderConfiguration);\r\n        let instanceContainer = this.getInstanceContainer(model, entityObject);\r\n        this.checkObjectPropAdditionalValidation(instanceContainer, entityObject, formBuilderConfiguration);\r\n        let formGroupObject = {};\r\n        var additionalValidations = {};\r\n        instanceContainer.properties.forEach(property => {\r\n            let isIncludeProp = true;\r\n            if (formBuilderConfiguration) {\r\n                if (formBuilderConfiguration.excludeProps && formBuilderConfiguration.excludeProps.length > 0)\r\n                    isIncludeProp = formBuilderConfiguration.excludeProps.indexOf(property.name) == -1;\r\n                if (formBuilderConfiguration.dynamicValidation)\r\n                    additionalValidations = formBuilderConfiguration.dynamicValidation;\r\n                if (formBuilderConfiguration.includeProps && formBuilderConfiguration.includeProps.length > 0)\r\n                    isIncludeProp = formBuilderConfiguration.includeProps.indexOf(property.name) != -1;\r\n                if (formBuilderConfiguration.ignoreUndefinedProps && formBuilderConfiguration.ignoreUndefinedProps.length > 0) {\r\n                    isIncludeProp = !(property.propertyType == PROPERTY && !RegexValidator.isNotBlank(json.entityObject[property.name]) && (formBuilderConfiguration.ignoreUndefinedProps.indexOf(property.name) !== -1 || formBuilderConfiguration.ignoreUndefinedProps.indexOf(\":self:\") !== -1));\r\n                }\r\n            }\r\n            if (property.ignore)\r\n                isIncludeProp = !property.ignore.call(json.entityObject, json.entityObject);\r\n            if (isIncludeProp) {\r\n                switch (property.propertyType) {\r\n                    case PROPERTY:\r\n                        if (!(entityObject[property.name] instanceof FormControl || entityObject[property.name] instanceof RxFormControl)) {\r\n                            var propertyValidators = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name);\r\n                            let sanitizeValue = super.sanitizeValue(instanceContainer, property.name, super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration), json.entityObject, Object.assign({}, json.entityObject));\r\n                            if (entityObject[property.name] === undefined && sanitizeValue)\r\n                                entityObject[property.name] = sanitizeValue;\r\n                            let validators = this.addFormControl(property, propertyValidators, additionalValidations[property.name], instanceContainer, entityObject);\r\n                            let abstractControlOptions = { validators: validators, asyncValidators: this.addAsyncValidation(property, propertyValidators, additionalValidations[property.name]) };\r\n                            if (formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions[property.name])\r\n                                abstractControlOptions.updateOn = formBuilderConfiguration.abstractControlOptions[property.name];\r\n                            formGroupObject[property.name] = new RxFormControl(sanitizeValue, abstractControlOptions, [], json.entityObject, Object.assign({}, json.entityObject), property.name, instanceContainer.sanitizers[property.name]);\r\n                            this.isNested = false;\r\n                        }\r\n                        else\r\n                            formGroupObject[property.name] = super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration);\r\n                        break;\r\n                    case OBJECT_PROPERTY:\r\n                        let objectValue = entityObject[property.name];\r\n                        if (objectValue && objectValue instanceof Object && !(objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)) {\r\n                            this.isNestedBinding = this.isNested = true;\r\n                            if (instanceContainer && instanceContainer.conditionalObjectProps)\r\n                                this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name);\r\n                            if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps)\r\n                                this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name);\r\n                            if (this.formGroupPropOtherValidator[property.name])\r\n                                this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\r\n                            let objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, objectValue, `${property.name}.`);\r\n                            let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\r\n                            formGroupObject[property.name] = this.formGroup(entity || property.entity || this.getEntity(objectValue, formBuilderConfiguration, property.name, true), objectValue, objectValidationConfig);\r\n                            this.conditionalObjectProps = [];\r\n                            this.builderConfigurationConditionalObjectProps = [];\r\n                            this.isNestedBinding = this.isNested = false;\r\n                        }\r\n                        else if (objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)\r\n                            formGroupObject[property.name] = objectValue;\r\n                        break;\r\n                    case ARRAY_PROPERTY:\r\n                        let arrayObjectValue = entityObject[property.name];\r\n                        if (arrayObjectValue && arrayObjectValue instanceof Array && !(arrayObjectValue instanceof FormArray)) {\r\n                            this.isNestedBinding = this.isNested = true;\r\n                            var formArrayGroup = [];\r\n                            let index = 0;\r\n                            let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\r\n                            let objectValidationConfig = null;\r\n                            for (let subObject of arrayObjectValue) {\r\n                                if (instanceContainer && instanceContainer.conditionalObjectProps)\r\n                                    this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\r\n                                if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps)\r\n                                    this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\r\n                                if (this.formGroupPropOtherValidator[property.name])\r\n                                    this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\r\n                                objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, subObject, `${property.name}.`, `${property.name}[${index}].`);\r\n                                formArrayGroup.push(this.formGroup(entity || property.entity || this.getEntity(subObject, formBuilderConfiguration, property.name, true), subObject, objectValidationConfig));\r\n                                index++;\r\n                                this.conditionalObjectProps = [];\r\n                                this.builderConfigurationConditionalObjectProps = [];\r\n                            }\r\n                            formGroupObject[property.name] = new RxFormArray(arrayObjectValue, formArrayGroup, null, null, property.arrayConfig);\r\n                            if (ReactiveFormConfig.autoInstancePush) {\r\n                                arrayObjectValue.push = (instance) => { let formGroup = this.formGroup(instance.constructor, instance, objectValidationConfig); formGroupObject[property.name].push(formGroup, true); return 0; };\r\n                                arrayObjectValue.splice = (start, deleteCount) => {\r\n                                    let end = start + deleteCount;\r\n                                    for (var i = start; i <= end; i++) {\r\n                                        formGroupObject[property.name].removeAt(i, true);\r\n                                    }\r\n                                    return [];\r\n                                };\r\n                            }\r\n                            this.isNestedBinding = this.isNested = false;\r\n                        }\r\n                        else if (arrayObjectValue instanceof FormArray)\r\n                            formGroupObject[property.name] = arrayObjectValue;\r\n                        else if (property.arrayConfig && property.arrayConfig.createBlank)\r\n                            formGroupObject[property.name] = new RxFormArray([], [], null, null, property.arrayConfig);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        if (!this.isNested) {\r\n            this.conditionalValidationInstance = {};\r\n            this.builderConfigurationConditionalObjectProps = [];\r\n        }\r\n        let formGroup = new RxFormGroup(json.model, json.entityObject, formGroupObject, undefined);\r\n        if (!this.isNestedBinding && !this.isGroupCalled)\r\n            formGroup.refreshDisable();\r\n        return formGroup;\r\n    }\r\n};\r\nRxFormBuilder = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [])\r\n], RxFormBuilder);\n\nclass BaseDirective {\r\n    applyValidations(controls, model = null) {\r\n        if (this.model) {\r\n            let modelConfig = defaultContainer.get(model || this.model.constructor);\r\n            if (modelConfig) {\r\n                modelConfig.properties.forEach(property => {\r\n                    if (controls[property.name]) {\r\n                        switch (property.propertyType) {\r\n                            case PROPERTY:\r\n                                this.setValidatorConfig(controls[property.name], modelConfig, property);\r\n                                break;\r\n                            case OBJECT_PROPERTY:\r\n                                this.applyValidations(controls[property.name].controls, property.entity);\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    setValidatorConfig(control, modelConfig, property) {\r\n        let annotations = modelConfig.propertyAnnotations.filter(t => t.propertyName == property.name);\r\n        annotations.forEach(annotation => {\r\n            if (!control[TEMPLATE_VALIDATION_CONFIG])\r\n                control[TEMPLATE_VALIDATION_CONFIG] = {};\r\n            ApplicationUtil.configureControl(control, annotation.config ? annotation.config : \"\", annotation.annotationType);\r\n        });\r\n    }\r\n}\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], BaseDirective.prototype, \"model\", void 0);\n\nlet RxwebFormDirective = class RxwebFormDirective extends BaseDirective {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.clearTimeoutNumber = 0;\r\n        this.validationRule = {};\r\n    }\r\n    ngAfterContentInit() {\r\n        if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent == null) {\r\n            this.expressionProcessor(this.formGroup.controls);\r\n            this.setConditionalValidator(this.formGroup.controls);\r\n        }\r\n        else if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent instanceof FormArray) {\r\n            this.expressionProcessor(this.formGroup.controls);\r\n            this.setConditionalValidator(this.formGroup.controls);\r\n        }\r\n        else if (this.ngForm) {\r\n            this.configureModelValidations();\r\n        }\r\n    }\r\n    configureModelValidations() {\r\n        this.clearTimeoutNumber = setTimeout(() => {\r\n            clearTimeout(this.clearTimeoutNumber);\r\n            this.applyValidations(this.ngForm.form.controls);\r\n            this.expressionProcessor(this.ngForm.form.controls);\r\n            this.setConditionalValidator(this.ngForm.form.controls);\r\n            this.updateValueAndValidity(this.ngForm.form.controls);\r\n        }, 500);\r\n    }\r\n    updateValueAndValidity(controls) {\r\n        Object.keys(controls).forEach(key => {\r\n            if (controls[key] instanceof FormGroup)\r\n                this.updateValueAndValidity(controls[key].controls);\r\n            else if (controls[key] instanceof FormArray)\r\n                this.updateValueAndValidity(controls[key].controls);\r\n            else\r\n                controls[key].updateValueAndValidity();\r\n        });\r\n    }\r\n    expressionProcessor(controls, rootFieldName = \"\") {\r\n        Object.keys(controls).forEach(fieldName => {\r\n            let formControl = controls[fieldName];\r\n            if (formControl.validatorConfig) {\r\n                Object.keys(AnnotationTypes).forEach(validatorName => {\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].disableExpression) {\r\n                        formControl[\"disableExpression\"] = formControl.validatorConfig[validatorName].disableExpression;\r\n                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].disableExpression);\r\n                        defaultContainer.addChangeValidation(this.validationRule, rootFieldName + fieldName, columns);\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].conditionalExpression) {\r\n                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].conditionalExpression);\r\n                        defaultContainer.addChangeValidation(this.validationRule, rootFieldName + fieldName, columns);\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].dynamicConfig) {\r\n                        let columns = Linq.dynamicConfigParser(formControl.validatorConfig[validatorName].dynamicConfig, fieldName);\r\n                        defaultContainer.addChangeValidation(this.validationRule, rootFieldName + fieldName, columns);\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.and || validatorName == AnnotationTypes.or || validatorName == AnnotationTypes.not)) {\r\n                        Object.keys(formControl.validatorConfig[validatorName].validation).forEach(t => {\r\n                            if (typeof formControl.validatorConfig[validatorName].validation[t] !== \"boolean\")\r\n                                defaultContainer.setLogicalConditional(this.validationRule, t, formControl.validatorConfig[validatorName].validation[t].fieldName, fieldName);\r\n                        });\r\n                    }\r\n                    else if (formControl.validatorConfig[validatorName] && ((validatorName == AnnotationTypes.compare || validatorName == AnnotationTypes.greaterThan || validatorName == AnnotationTypes.greaterThanEqualTo || validatorName == AnnotationTypes.lessThan || validatorName == AnnotationTypes.lessThanEqualTo || validatorName == AnnotationTypes.different || validatorName == AnnotationTypes.factor || validatorName == AnnotationTypes.minTime || validatorName == AnnotationTypes.maxTime) || (validatorName == AnnotationTypes.creditCard && formControl.validatorConfig[validatorName].fieldName) || ((validatorName == AnnotationTypes.minDate || validatorName == AnnotationTypes.maxDate) && formControl.validatorConfig[validatorName].fieldName))) {\r\n                        defaultContainer.setConditionalValueProp(this.validationRule, formControl.validatorConfig[validatorName].fieldName, fieldName);\r\n                    }\r\n                });\r\n            }\r\n            else if (formControl instanceof FormGroup) {\r\n                this.expressionProcessor(formControl.controls, `${fieldName}.`);\r\n            }\r\n            else if (formControl instanceof FormArray) {\r\n                if (formControl.controls)\r\n                    formControl.controls.forEach((t, i) => {\r\n                        if (t.controls)\r\n                            this.expressionProcessor(t.controls, `${fieldName}[]`);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n    setConditionalValidator(controls) {\r\n        Object.keys(controls).forEach(fieldName => {\r\n            if (this.validationRule.conditionalValidationProps && this.validationRule.conditionalValidationProps[fieldName]) {\r\n                controls[fieldName][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(this.validationRule.conditionalValidationProps[fieldName]);\r\n            }\r\n            else if (controls[fieldName] instanceof FormGroup && this.validationRule.conditionalObjectProps) {\r\n                var fields = this.validationRule.conditionalObjectProps.filter(t => t.objectPropName == fieldName);\r\n                let nestedFormGroup = controls[fieldName];\r\n                let propWiseConditionalControls = {};\r\n                fields.forEach(x => {\r\n                    if (!propWiseConditionalControls[x.propName])\r\n                        propWiseConditionalControls[x.propName] = [];\r\n                    propWiseConditionalControls[x.propName].push(x.referencePropName);\r\n                });\r\n                Object.keys(propWiseConditionalControls).forEach(key => {\r\n                    nestedFormGroup.controls[key][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(propWiseConditionalControls[key]);\r\n                });\r\n            }\r\n            else if (controls[fieldName] instanceof FormArray) {\r\n                //fix https://github.com/rxweb/rxweb/issues/274\r\n                controls[fieldName].controls.forEach((t, i) => {\r\n                    if (t.controls == undefined)\r\n                        this.setConditionalValidator({ [i]: t });\r\n                    else\r\n                        this.setConditionalValidator(t.controls);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", FormGroup)\r\n], RxwebFormDirective.prototype, \"formGroup\", void 0);\r\n__decorate([\r\n    Input('rxwebForm'),\r\n    __metadata(\"design:type\", Object)\r\n], RxwebFormDirective.prototype, \"ngForm\", void 0);\r\nRxwebFormDirective = __decorate([\r\n    Directive({\r\n        selector: '[formGroup],[rxwebForm]',\r\n    })\r\n], RxwebFormDirective);\n\nlet DecimalProvider = class DecimalProvider {\r\n    constructor(decimalPipe, localeId) {\r\n        this.decimalPipe = decimalPipe;\r\n        this.localeId = localeId;\r\n        this.decimalSeperator = \".\";\r\n        this.groupSeperator = \",\";\r\n        this.isSetConfig = false;\r\n        this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);\r\n        this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);\r\n        this.setSymbolInConfig();\r\n    }\r\n    replacer(value) {\r\n        value = String(value);\r\n        if (!this.isSetConfig)\r\n            this.bindConfig();\r\n        value = value.split(this.groupSeperator).join(BLANK);\r\n        if (this.allowDecimalSymbol)\r\n            value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);\r\n        var splitValue = value.split(this.decimalSeperator);\r\n        value = (splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1])) ? splitValue[0] : value;\r\n        return value;\r\n    }\r\n    transFormDecimal(value, digitsInfo) {\r\n        value = String(value);\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, \"\").replace(this.decimalSeperator, \".\"), digitsInfo, this.localeId);\r\n    }\r\n    setSymbolInConfig() {\r\n        ReactiveFormConfig.number = { decimalSymbol: this.decimalSeperator, groupSymbol: this.groupSeperator };\r\n    }\r\n    bindConfig() {\r\n        if (ReactiveFormConfig.json) {\r\n            if (ReactiveFormConfig.json.localeId)\r\n                this.localeId = ReactiveFormConfig.json.localeId;\r\n            if (ReactiveFormConfig.json.allowDecimalSymbol)\r\n                this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;\r\n        }\r\n        this.isSetConfig = true;\r\n    }\r\n};\r\nDecimalProvider = __decorate([\r\n    Injectable(),\r\n    __param(1, Inject(LOCALE_ID)),\r\n    __metadata(\"design:paramtypes\", [DecimalPipe, String])\r\n], DecimalProvider);\n\nlet HtmlControlTemplateDirective = class HtmlControlTemplateDirective {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    ;\r\n};\r\n__decorate([\r\n    Input('htmlControlTemplate'),\r\n    __metadata(\"design:type\", String)\r\n], HtmlControlTemplateDirective.prototype, \"type\", void 0);\r\nHtmlControlTemplateDirective = __decorate([\r\n    Directive({\r\n        selector: '[htmlControlTemplate]'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [TemplateRef])\r\n], HtmlControlTemplateDirective);\n\nlet ControlHostDirective = class ControlHostDirective {\r\n    constructor(viewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    set portal(context) {\r\n        if (context.templateRef) {\r\n            if (this.view) {\r\n                this.view.destroy();\r\n                this.view = undefined;\r\n            }\r\n            this.view = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.view)\r\n            this.view.destroy();\r\n        if (this.viewContainerRef)\r\n            this.viewContainerRef.clear();\r\n    }\r\n};\r\n__decorate([\r\n    Input('controlHost'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], ControlHostDirective.prototype, \"portal\", null);\r\nControlHostDirective = __decorate([\r\n    Directive({\r\n        selector: '[controlHost]'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ViewContainerRef])\r\n], ControlHostDirective);\n\nclass ControlExpressionProcess {\r\n    constructor() {\r\n        this.controlConfig = {};\r\n        this.isProcessed = false;\r\n    }\r\n    setModelConfig(control) {\r\n        this.isProcessed = true;\r\n        if (this.controlConfig && this.controlConfig.validatorConfig) {\r\n            control[VALIDATOR_CONFIG] = this.controlConfig.validatorConfig;\r\n            this.controlConfig = undefined;\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], ControlExpressionProcess.prototype, \"name\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], ControlExpressionProcess.prototype, \"formControlName\", void 0);\n\nclass BaseValidator extends ControlExpressionProcess {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.validators = [];\r\n    }\r\n    validation(control) {\r\n        let result = null;\r\n        for (let validator of this.validators) {\r\n            result = validator(control);\r\n            if (result)\r\n                break;\r\n        }\r\n        if (!result && this.maskProvider)\r\n            result = this.maskProvider.validate();\r\n        return result;\r\n    }\r\n    setEventName() {\r\n        var eventName = '';\r\n        switch (this.element.tagName) {\r\n            case INPUT:\r\n            case TEXTAREA:\r\n                eventName = (this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE) ? CHANGE : INPUT;\r\n                break;\r\n            case SELECT:\r\n                eventName = CHANGE;\r\n                break;\r\n        }\r\n        this.eventName = eventName.toLowerCase();\r\n    }\r\n}\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], BaseValidator.prototype, \"formControl\", void 0);\n\nclass MaskProvider {\r\n    constructor(input, mask, renderer, formControl, config) {\r\n        this.input = input;\r\n        this.mask = mask;\r\n        this.renderer = renderer;\r\n        this.formControl = formControl;\r\n        this.config = config;\r\n        this.eventListeners = [];\r\n        this.type = 'text';\r\n        this.slotChar = '_';\r\n        this.autoClear = false;\r\n        this.isInvalid = false;\r\n        this.internalProcess = false;\r\n        this.bind();\r\n    }\r\n    bind() {\r\n        if (RegexValidator.isNotBlank(this.formControl.value))\r\n            this.input.value = this.formControl.value;\r\n        this.tests = [];\r\n        this.partialPosition = this.mask.length;\r\n        this.len = this.mask.length;\r\n        this.firstNonMaskPos = null;\r\n        this.defs = {\r\n            '9': '[0-9]',\r\n            'a': '[A-Za-z]',\r\n            '*': '[A-Za-z0-9]'\r\n        };\r\n        this.androidChrome = false;\r\n        let maskTokens = this.mask.split('');\r\n        for (let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c == '?') {\r\n                this.len--;\r\n                this.partialPosition = i;\r\n            }\r\n            else if (this.defs[c]) {\r\n                this.tests.push(new RegExp(this.defs[c]));\r\n                if (this.firstNonMaskPos === null) {\r\n                    this.firstNonMaskPos = this.tests.length - 1;\r\n                }\r\n                if (i < this.partialPosition) {\r\n                    this.lastRequiredNonMaskPos = this.tests.length - 1;\r\n                }\r\n            }\r\n            else {\r\n                this.tests.push(null);\r\n            }\r\n        }\r\n        this.buffer = [];\r\n        for (let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c != '?') {\r\n                if (this.defs[c])\r\n                    this.buffer.push(this.getPlaceholder(i));\r\n                else\r\n                    this.buffer.push(c);\r\n            }\r\n        }\r\n        this.defaultBuffer = this.buffer.join('');\r\n        this.focusText = this.input.value;\r\n        this.bindEvents();\r\n        this.checkVal();\r\n    }\r\n    bindEvents() {\r\n        this.eventListeners.push(this.renderer.listen(this.input, FOCUS, this.onFocus.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, BLUR, this.onBlur.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, KEY_DOWN, this.onKeyDown.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, KEY_PRESS, this.onKeyPress.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, \"input\", this.onInput.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, PASTE, this.handleInputChange.bind(this)));\r\n    }\r\n    validate() {\r\n        let config = getConfigObject(this.config, this.formControl);\r\n        if (RegexValidator.isNotBlank(this.getUnmaskedValue()) && FormProvider.ProcessRule(this.formControl, config)) {\r\n            if (this.isInvalid) {\r\n                return ObjectMaker.toJson(AnnotationTypes.mask, config, [this.formControl.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    }\r\n    writeValue(value) {\r\n        this.value = value;\r\n        if (this.input) {\r\n            if (this.value == undefined || this.value == null) {\r\n                this.input.value = '';\r\n            }\r\n            this.checkVal();\r\n        }\r\n        this.updateFilledState();\r\n    }\r\n    caret(first, last) {\r\n        let range, begin, end;\r\n        if (!this.input.offsetParent || this.input !== document.activeElement) {\r\n            return;\r\n        }\r\n        if (typeof first == 'number') {\r\n            begin = first;\r\n            end = (typeof last === 'number') ? last : begin;\r\n            if (this.input.setSelectionRange) {\r\n                this.input.setSelectionRange(begin, end);\r\n            }\r\n            else if (this.input['createTextRange']) {\r\n                range = this.input['createTextRange']();\r\n                range.collapse(true);\r\n                range.moveEnd('character', end);\r\n                range.moveStart('character', begin);\r\n                range.select();\r\n            }\r\n        }\r\n        else {\r\n            if (this.input.setSelectionRange) {\r\n                begin = this.input.selectionStart;\r\n                end = this.input.selectionEnd;\r\n            }\r\n            else if (document['selection'] && document['selection'].createRange) {\r\n                range = document['selection'].createRange();\r\n                begin = 0 - range.duplicate().moveStart('character', -100000);\r\n                end = begin + range.text.length;\r\n            }\r\n            return { begin: begin, end: end };\r\n        }\r\n    }\r\n    isCompleted() {\r\n        for (let i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\r\n            if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        this.isInvalid = false;\r\n        this.formControl.updateValueAndValidity();\r\n        return true;\r\n    }\r\n    getPlaceholder(i) {\r\n        if (i < this.slotChar.length) {\r\n            return this.slotChar.charAt(i);\r\n        }\r\n        return this.slotChar.charAt(0);\r\n    }\r\n    seekNext(pos) {\r\n        while (++pos < this.len && !this.tests[pos])\r\n            ;\r\n        return pos;\r\n    }\r\n    seekPrev(pos) {\r\n        while (--pos >= 0 && !this.tests[pos])\r\n            ;\r\n        return pos;\r\n    }\r\n    shiftL(begin, end) {\r\n        let i, j;\r\n        if (begin < 0) {\r\n            return;\r\n        }\r\n        for (i = begin, j = this.seekNext(end); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                if (j < this.len && this.tests[i].test(this.buffer[j])) {\r\n                    this.buffer[i] = this.buffer[j];\r\n                    this.buffer[j] = this.getPlaceholder(j);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                j = this.seekNext(j);\r\n            }\r\n        }\r\n        this.writeBuffer();\r\n        this.caret(Math.max(this.firstNonMaskPos, begin));\r\n    }\r\n    shiftR(pos) {\r\n        let i, c, j, t;\r\n        for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                j = this.seekNext(i);\r\n                t = this.buffer[i];\r\n                this.buffer[i] = c;\r\n                if (j < this.len && this.tests[j].test(t)) {\r\n                    c = t;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleAndroidInput(e) {\r\n        var curVal = this.input.value;\r\n        var pos = this.caret();\r\n        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\r\n            this.checkVal(true);\r\n            while (pos.begin > 0 && !this.tests[pos.begin - 1])\r\n                pos.begin--;\r\n            if (pos.begin === 0) {\r\n                while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin])\r\n                    pos.begin++;\r\n            }\r\n            this.caret(pos.begin, pos.begin);\r\n        }\r\n        else {\r\n            var pos2 = this.checkVal(true);\r\n            while (pos.begin < this.len && !this.tests[pos.begin])\r\n                pos.begin++;\r\n            this.caret(pos.begin, pos.begin);\r\n        }\r\n        if (this.isCompleted()) {\r\n            this.isInvalid = false;\r\n        }\r\n        else {\r\n            this.isInvalid = true;\r\n            this.formControl.updateValueAndValidity();\r\n        }\r\n    }\r\n    onBlur(e) {\r\n        this.focus = false;\r\n        this.checkVal();\r\n        this.updateModel(e);\r\n        this.updateFilledState();\r\n        if (this.input.value != this.focusText) {\r\n            let event = document.createEvent('HTMLEvents');\r\n            event.initEvent('change', true, false);\r\n            this.input.dispatchEvent(event);\r\n            let maskedValue = this.input.value;\r\n            this.formControl.setValue(this.getUnmaskedValue());\r\n            this.input.value = maskedValue;\r\n        }\r\n    }\r\n    onKeyDown(e) {\r\n        let k = e.which || e.keyCode, pos, begin, end;\r\n        let iPhone = false;\r\n        this.oldVal = this.input.value;\r\n        if (k === 8 || k === 46 || (iPhone )) {\r\n            pos = this.caret();\r\n            begin = pos.begin;\r\n            end = pos.end;\r\n            if (end - begin === 0) {\r\n                begin = k !== 46 ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));\r\n                end = k === 46 ? this.seekNext(end) : end;\r\n            }\r\n            this.clearBuffer(begin, end);\r\n            this.shiftL(begin, end - 1);\r\n            this.setControlValue(e, false);\r\n            this.updateModel(e);\r\n            e.preventDefault();\r\n        }\r\n        else if (k === 13) {\r\n            this.onBlur(e);\r\n            this.setControlValue(e, false);\r\n            this.updateModel(e);\r\n        }\r\n        else if (k === 27) {\r\n            this.input.value = this.focusText;\r\n            this.caret(0, this.checkVal());\r\n            this.updateModel(e);\r\n            this.setControlValue(e, false);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    onKeyPress(e) {\r\n        var k = e.which || e.keyCode, pos = this.caret(), p, c, next, completed;\r\n        if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\r\n            return;\r\n        }\r\n        else if (k && k !== 13) {\r\n            if (pos.end - pos.begin !== 0) {\r\n                this.clearBuffer(pos.begin, pos.end);\r\n                this.shiftL(pos.begin, pos.end - 1);\r\n            }\r\n            p = this.seekNext(pos.begin - 1);\r\n            if (p < this.len) {\r\n                c = String.fromCharCode(k);\r\n                if (this.tests[p].test(c)) {\r\n                    this.shiftR(p);\r\n                    this.buffer[p] = c;\r\n                    this.writeBuffer();\r\n                    next = this.seekNext(p);\r\n                    this.caret(next);\r\n                    if (pos.begin <= this.lastRequiredNonMaskPos) {\r\n                        completed = this.isCompleted();\r\n                    }\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        }\r\n        this.updateModel(e);\r\n        if (completed === undefined)\r\n            completed = this.isCompleted();\r\n        this.setControlValue(e, completed);\r\n    }\r\n    clearBuffer(start, end) {\r\n        let i;\r\n        for (i = start; i < end && i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n            }\r\n        }\r\n    }\r\n    writeBuffer() {\r\n        this.input.value = this.buffer.join('');\r\n    }\r\n    checkVal(allow) {\r\n        let test = this.input.value, lastMatch = -1, i, c, pos;\r\n        for (i = 0, pos = 0; i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n                while (pos++ < test.length) {\r\n                    c = test.charAt(pos - 1);\r\n                    if (this.tests[i].test(c)) {\r\n                        this.buffer[i] = c;\r\n                        lastMatch = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pos > test.length) {\r\n                    this.clearBuffer(i + 1, this.len);\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (this.buffer[i] === test.charAt(pos)) {\r\n                    pos++;\r\n                }\r\n                if (i < this.partialPosition) {\r\n                    lastMatch = i;\r\n                }\r\n            }\r\n        }\r\n        if (allow) {\r\n            this.writeBuffer();\r\n        }\r\n        else if (lastMatch + 1 < this.partialPosition) {\r\n            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\r\n                this.isInvalid = true;\r\n            }\r\n            else {\r\n                this.isInvalid = true;\r\n                this.writeBuffer();\r\n            }\r\n        }\r\n        else {\r\n            this.writeBuffer();\r\n            this.input.value = this.input.value.substring(0, lastMatch + 1);\r\n        }\r\n        return (this.partialPosition ? i : this.firstNonMaskPos);\r\n    }\r\n    onFocus(event) {\r\n        this.focus = true;\r\n        clearTimeout(this.caretTimeoutId);\r\n        let pos;\r\n        this.focusText = this.input.value;\r\n        pos = this.checkVal();\r\n        this.caretTimeoutId = setTimeout(() => {\r\n            if (this.input !== document.activeElement) {\r\n                return;\r\n            }\r\n            this.writeBuffer();\r\n            if (pos == this.mask.replace(\"?\", \"\").length) {\r\n                this.caret(0, pos);\r\n            }\r\n            else {\r\n                this.caret(pos);\r\n            }\r\n            this.updateFilledState();\r\n        }, 10);\r\n    }\r\n    onInput(event) {\r\n        if (this.androidChrome)\r\n            this.handleAndroidInput(event);\r\n        else\r\n            this.handleInputChange(event);\r\n    }\r\n    setControlValue(e, isValid) {\r\n        this.isInvalid = !isValid;\r\n        let value = this.input.value;\r\n        let controlValue = '';\r\n        if (!this.isInvalid)\r\n            controlValue = this.getUnmaskedValue();\r\n        this.formControl.setValue(controlValue);\r\n        this.input.value = value;\r\n        if (!isValid)\r\n            this.onFocus(e);\r\n    }\r\n    handleInputChange(event) {\r\n        setTimeout(() => {\r\n            var pos = this.checkVal(true);\r\n            this.caret(pos);\r\n            this.updateModel(event);\r\n            this.setControlValue(event, this.isCompleted());\r\n        }, 0);\r\n    }\r\n    getUnmaskedValue() {\r\n        let unmaskedBuffer = [];\r\n        for (let i = 0; i < this.buffer.length; i++) {\r\n            let c = this.buffer[i];\r\n            if (this.tests[i] && c != this.getPlaceholder(i)) {\r\n                unmaskedBuffer.push(c);\r\n            }\r\n        }\r\n        return unmaskedBuffer.join('');\r\n    }\r\n    updateModel(e) {\r\n    }\r\n    updateFilledState() {\r\n        this.filled = this.input && this.input.value != '';\r\n    }\r\n    onDestroy() {\r\n        let eventCount = this.eventListeners.length;\r\n        for (var i = 0; i < eventCount; i++) {\r\n            this.eventListeners[0]();\r\n            this.eventListeners.splice(0, 1);\r\n        }\r\n        this.eventListeners = [];\r\n    }\r\n}\n\nconst NGMODEL_BINDING = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => RxFormControlDirective),\r\n    multi: true\r\n};\r\nconst ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];\r\nconst NUMERIC = \"numeric\";\r\nconst IS_FORMAT = \"isFormat\";\r\nconst DIGITS_INFO = \"digitsInfo\";\r\nlet RxFormControlDirective = class RxFormControlDirective extends BaseValidator {\r\n    constructor(elementRef, renderer, decimalProvider) {\r\n        super();\r\n        this.elementRef = elementRef;\r\n        this.renderer = renderer;\r\n        this.decimalProvider = decimalProvider;\r\n        this.eventListeners = [];\r\n        this.isNumericSubscribed = false;\r\n        this.isFocusCalled = false;\r\n        this.isMasked = false;\r\n        this.element = elementRef.nativeElement;\r\n        this.setEventName();\r\n    }\r\n    set validationControls(value) {\r\n        this.controls = value;\r\n    }\r\n    get validationControls() {\r\n        return this.controls;\r\n    }\r\n    ngOnInit() {\r\n        let validators = [];\r\n        Object.keys(APP_VALIDATORS).forEach(validatorName => {\r\n            if ((this[`rx${validatorName}`]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && this[`rx${validatorName}`] == BLANK)) {\r\n                validators.push(APP_VALIDATORS[validatorName](this[`rx${validatorName}`]));\r\n                if (this.name && !(this.formControlName && this.formControl)) {\r\n                    ApplicationUtil.configureControl(this.controlConfig, this[`rx${validatorName}`], validatorName);\r\n                }\r\n            }\r\n        });\r\n        if (validators.length > 0)\r\n            this.validators = validators;\r\n        if (this.rxnumeric && (this.rxnumeric.isFormat || this.rxnumeric.digitsInfo)) {\r\n            this.bindNumericElementEvent();\r\n        }\r\n    }\r\n    blurEvent() {\r\n        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {\r\n            if (this.formControl.value !== null && this.formControl.value !== undefined) {\r\n                let value = this.decimalProvider.transFormDecimal(this.formControl.value, this.rxnumeric.digitsInfo);\r\n                value = (!this.rxnumeric.isFormat) ? this.decimalProvider.replacer(value) : value;\r\n                this.setValueOnElement(value);\r\n            }\r\n            this.isFocusCalled = false;\r\n        }\r\n    }\r\n    bindNumericElementEvent(config) {\r\n        if (config)\r\n            this.rxnumeric = config;\r\n        let listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));\r\n        this.eventListeners.push(listener);\r\n        listener = this.renderer.listen(this.element, FOCUS, (event) => {\r\n            this.isFocusCalled = true;\r\n            if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric) && this.formControl.value != null) {\r\n                let value = this.decimalProvider.replacer(this.element.value);\r\n                this.setValueOnElement(value);\r\n            }\r\n        });\r\n        this.eventListeners.push(listener);\r\n    }\r\n    bindValueChangeEvent() {\r\n        if (this.eventName != BLANK) {\r\n            let listener = this.renderer.listen(this.element, this.eventName, () => {\r\n                Object.keys(this.validationControls).forEach(fieldName => {\r\n                    this.validationControls[fieldName].updateValueAndValidity();\r\n                });\r\n            });\r\n            this.eventListeners.push(listener);\r\n        }\r\n    }\r\n    subscribeNumericFormatter() {\r\n        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG][NUMERIC] && (this.formControl[VALIDATOR_CONFIG][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG][NUMERIC][DIGITS_INFO])) {\r\n            if (!this.isNumericSubscribed) {\r\n                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG][NUMERIC]);\r\n                this.isNumericSubscribed = true;\r\n            }\r\n            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {\r\n                this.blurEvent();\r\n            }\r\n        }\r\n    }\r\n    subscribeMaskValidator() {\r\n        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG][\"mask\"] && !this.isMasked) {\r\n            let config = this.formControl[VALIDATOR_CONFIG][\"mask\"];\r\n            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);\r\n            this.isMasked = true;\r\n        }\r\n    }\r\n    setValueOnElement(value) {\r\n        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);\r\n    }\r\n    setTemplateValidators(control) {\r\n        for (let validatorName in control[VALIDATOR_CONFIG]) {\r\n            this[validatorName] = control[VALIDATOR_CONFIG][validatorName];\r\n        }\r\n        delete control[TEMPLATE_VALIDATION_CONFIG];\r\n        delete control[VALIDATOR_CONFIG];\r\n        this.ngOnInit();\r\n    }\r\n    updateOnElementClass(element) {\r\n        var previousClassName = '';\r\n        return function (className) {\r\n            if (previousClassName)\r\n                element.classList.remove(previousClassName);\r\n            if (className)\r\n                element.classList.add(className);\r\n            previousClassName = className;\r\n        };\r\n    }\r\n    setValidatorConfig(control) {\r\n        if (!this.formControl) {\r\n            this.formControl = control;\r\n            let rxFormControl = this.formControl;\r\n            if (rxFormControl.updateOnElementClass)\r\n                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);\r\n        }\r\n        this.subscribeMaskValidator();\r\n        this.subscribeNumericFormatter();\r\n        if (control[TEMPLATE_VALIDATION_CONFIG])\r\n            this.setTemplateValidators(control);\r\n        if (control[CONDITIONAL_VALIDATOR]) {\r\n            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];\r\n            delete control[CONDITIONAL_VALIDATOR];\r\n        }\r\n    }\r\n    validate(control) {\r\n        this.setValidatorConfig(control);\r\n        if (this.conditionalValidator)\r\n            this.conditionalValidator(control);\r\n        if (!this.isProcessed)\r\n            this.setModelConfig(control);\r\n        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;\r\n    }\r\n    ngOnDestroy() {\r\n        this.controls = undefined;\r\n        let eventCount = this.eventListeners.length;\r\n        for (var i = 0; i < eventCount; i++) {\r\n            this.eventListeners[0]();\r\n            this.eventListeners.splice(0, 1);\r\n        }\r\n        this.eventListeners = [];\r\n        if (this.maskProvider)\r\n            this.maskProvider.onDestroy();\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxalpha\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxalphaNumeric\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxascii\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxcompare\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxcompose\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxcontains\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxcreditCard\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxdataUri\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxdifferent\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxdigit\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxemail\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxendsWith\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxeven\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxextension\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxfactor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxfileSize\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxgreaterThanEqualTo\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxgreaterThan\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxhexColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxjson\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxlatitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxlatLong\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxleapYear\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxlessThan\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxlessThanEqualTo\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxlongitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxlowerCase\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxmac\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxmaxDate\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxmaxLength\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxmaxNumber\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxminDate\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxminLength\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxminNumber\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxnumeric\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxodd\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxpassword\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxport\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxprimeNumber\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxrequired\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxrange\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxrule\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxstartsWith\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxtime\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxupperCase\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxurl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxunique\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxnotEmpty\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxcusip\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxgrid\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], RxFormControlDirective.prototype, \"rxdate\", void 0);\r\nRxFormControlDirective = __decorate([\r\n    Directive({\r\n        selector: '[ngModel],[formControlName],[formControl]',\r\n        providers: [NGMODEL_BINDING],\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef,\r\n        Renderer2, DecimalProvider])\r\n], RxFormControlDirective);\n\nvar FileControlDirective_1;\r\nconst VALIDATOR_CONFIG$1 = \"validatorConfig\";\r\nconst FILE_VALIDATOR_NAMES = [\"extension\", \"fileSize\", \"file\"];\r\nlet FileControlDirective = FileControlDirective_1 = class FileControlDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.isProcessed = false;\r\n        this.validators = [];\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    onChangeCall(element) {\r\n        let files = element.files;\r\n        if (this.writeFile)\r\n            this.onChange(files);\r\n        else {\r\n            if (files.length > 0)\r\n                this.onChange(element.value);\r\n            else\r\n                this.onChange(undefined);\r\n        }\r\n    }\r\n    writeValue(value) { }\r\n    registerOnChange(invocation) { this.onChange = invocation; }\r\n    registerOnTouched(invocation) { this.onTouched = invocation; }\r\n    set extension(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);\r\n    }\r\n    set fileSize(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);\r\n    }\r\n    set file(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);\r\n    }\r\n    setConfig(control) {\r\n        FILE_VALIDATOR_NAMES.forEach(t => {\r\n            if (!this[t] && control[VALIDATOR_CONFIG$1] && control[VALIDATOR_CONFIG$1][t])\r\n                this[t] = control[VALIDATOR_CONFIG$1][t];\r\n        });\r\n        this.isProcessed = true;\r\n    }\r\n    pushValidator(validatorName, config) {\r\n        if (config)\r\n            this.validators.push(APP_VALIDATORS[validatorName](config));\r\n    }\r\n    validate(control) {\r\n        if (!this.isProcessed)\r\n            this.setConfig(control);\r\n        var result = null;\r\n        for (var validator of this.validators) {\r\n            result = validator(control, this.element.files);\r\n            if (result)\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], FileControlDirective.prototype, \"writeFile\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], FileControlDirective.prototype, \"extension\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], FileControlDirective.prototype, \"fileSize\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], FileControlDirective.prototype, \"file\", null);\r\nFileControlDirective = FileControlDirective_1 = __decorate([\r\n    Directive({\r\n        selector: \"input[type=file]\",\r\n        host: {\r\n            \"(change)\": \"onChangeCall($event.target)\",\r\n            \"(blur)\": \"onTouched()\"\r\n        },\r\n        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective_1, multi: true }, {\r\n                provide: NG_VALIDATORS,\r\n                useExisting: forwardRef(() => FileControlDirective_1),\r\n                multi: true\r\n            }]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], FileControlDirective);\n\nvar ImageFileControlDirective_1;\r\nconst VALIDATOR_CONFIG$2 = \"validatorConfig\";\r\nlet ImageFileControlDirective = ImageFileControlDirective_1 = class ImageFileControlDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.isProcessed = false;\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    set image(config) {\r\n        this.imageValidation = APP_VALIDATORS.image(config);\r\n    }\r\n    setConfig(control) {\r\n        let image = \"image\";\r\n        if (!this[image] && control[VALIDATOR_CONFIG$2] && control[VALIDATOR_CONFIG$2][image])\r\n            this[image] = control[VALIDATOR_CONFIG$2][image];\r\n        this.isProcessed = true;\r\n    }\r\n    validate(control) {\r\n        if (!this.isProcessed)\r\n            this.setConfig(control);\r\n        if (this.imageValidation) {\r\n            return this.imageValidation(control, this.element.files);\r\n        }\r\n        return new Promise((resolve, reject) => { resolve(null); });\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], ImageFileControlDirective.prototype, \"image\", null);\r\nImageFileControlDirective = ImageFileControlDirective_1 = __decorate([\r\n    Directive({\r\n        selector: \"input[type=file]\",\r\n        providers: [{\r\n                provide: NG_ASYNC_VALIDATORS,\r\n                useExisting: forwardRef(() => ImageFileControlDirective_1),\r\n                multi: true\r\n            }]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], ImageFileControlDirective);\n\nvar AsyncValidationDirective_1;\r\nlet AsyncValidationDirective = AsyncValidationDirective_1 = class AsyncValidationDirective {\r\n    validate(control) {\r\n        if (this.async)\r\n            return this.async(control);\r\n        return new Promise((resolve, reject) => { resolve(null); });\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AsyncValidationDirective.prototype, \"async\", void 0);\r\nAsyncValidationDirective = AsyncValidationDirective_1 = __decorate([\r\n    Directive({\r\n        selector: '[ngModel],[formControlName],[formControl]',\r\n        providers: [{\r\n                provide: NG_ASYNC_VALIDATORS,\r\n                useExisting: forwardRef(() => AsyncValidationDirective_1),\r\n                multi: true\r\n            }]\r\n    })\r\n], AsyncValidationDirective);\n\nvar RxReactiveFormsModule_1;\r\nlet RxReactiveFormsModule = RxReactiveFormsModule_1 = class RxReactiveFormsModule {\r\n    static forRoot() { return { ngModule: RxReactiveFormsModule_1, providers: [] }; }\r\n};\r\nRxReactiveFormsModule = RxReactiveFormsModule_1 = __decorate([\r\n    NgModule({\r\n        declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],\r\n        imports: [CommonModule, FormsModule, ReactiveFormsModule],\r\n        providers: [RxFormBuilder, DecimalProvider, DecimalPipe],\r\n        exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]\r\n    })\r\n], RxReactiveFormsModule);\n\nfunction baseDecoratorFunction(annotationType, config, isAsync = false) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.init(target, parameterIndex, propertyKey, annotationType, config, isAsync);\r\n    };\r\n}\n\nfunction alpha(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alpha, config);\r\n}\n\nfunction alphaNumeric(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alphaNumeric, config);\r\n}\n\nfunction compare(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.compare, config);\r\n}\n\nfunction contains(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.contains, config);\r\n}\n\nfunction creditCard(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.creditCard, config);\r\n}\n\nfunction digit(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.digit, config);\r\n}\n\nfunction email(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.email, config);\r\n}\n\nfunction hexColor(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.hexColor, config);\r\n}\n\nfunction lowerCase(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lowerCase, config);\r\n}\n\nfunction maxDate(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxDate, config);\r\n}\n\nfunction maxLength(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxLength, config);\r\n}\n\nfunction minDate(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minDate, config);\r\n}\n\nfunction maxNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxNumber, config);\r\n}\n\nfunction minLength(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minLength, config);\r\n}\n\nfunction minNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minNumber, config);\r\n}\n\nfunction password(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.password, config);\r\n}\n\nfunction pattern(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.pattern, config);\r\n}\n\nfunction propArray(entity, config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        var propertyInfo = {\r\n            name: propertyKey,\r\n            propertyType: ARRAY_PROPERTY,\r\n            entity: entity,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            entityProvider: config ? config.entityProvider : undefined,\r\n            arrayConfig: config ? {\r\n                allowMaxIndex: config.allowMaxIndex, messageKey: config.messageKey, createBlank: config.createBlank\r\n            } : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    };\r\n}\n\nfunction propObject(entity, config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.initPropertyObject(propertyKey, OBJECT_PROPERTY, entity, target, config);\r\n    };\r\n}\n\nfunction prop(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        var propertyInfo = {\r\n            name: propertyKey,\r\n            propertyType: PROPERTY,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            defaultValue: config ? config.defaultValue : undefined,\r\n            ignore: config ? config.ignore : undefined,\r\n            isPrimaryKey: config ? config.isPrimaryKey : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    };\r\n}\n\nfunction range(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.range, config);\r\n}\n\nfunction required(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.required, config);\r\n}\n\nfunction upperCase(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.upperCase, config);\r\n}\n\nfunction time(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.time, config);\r\n}\n\nfunction url(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.url, config);\r\n}\n\nfunction json(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.json, config);\r\n}\n\nfunction greaterThan(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThan, config);\r\n}\n\nfunction greaterThanEqualTo(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, config);\r\n}\n\nfunction lessThanEqualTo(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, config);\r\n}\n\nfunction lessThan(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThan, config);\r\n}\n\nfunction choice(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.choice, config);\r\n}\n\nfunction different(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.different, config);\r\n}\n\nfunction numeric(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.numeric, config);\r\n}\n\nfunction even(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.even, config);\r\n}\n\nfunction odd(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.odd, config);\r\n}\n\nfunction factor(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.factor, config);\r\n}\n\nfunction leapYear(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.leapYear, config);\r\n}\n\nfunction allOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.allOf, config);\r\n}\n\nfunction oneOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.oneOf, config);\r\n}\n\nfunction noneOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.noneOf, config);\r\n}\n\nfunction mac(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.mac, config);\r\n}\n\nfunction ascii(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.ascii, config);\r\n}\n\nfunction dataUri(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.dataUri, config);\r\n}\n\nfunction port(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.port, config);\r\n}\n\nfunction latLong(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.latLong, config);\r\n}\n\nfunction extension(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.extension, config);\r\n}\n\nfunction fileSize(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.fileSize, config);\r\n}\n\nfunction endsWith(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.endsWith, config);\r\n}\n\nfunction startsWith(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.startsWith, config);\r\n}\n\nfunction primeNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.primeNumber, config);\r\n}\n\nfunction latitude(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.latitude, config);\r\n}\n\nfunction longitude(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.longitude, config);\r\n}\n\nfunction rule(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.rule, config);\r\n}\n\nfunction file(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.file, config);\r\n}\n\nfunction custom(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.custom, config);\r\n}\n\nfunction unique(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.unique, config);\r\n}\n\nfunction image(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.image, config);\r\n}\n\nfunction notEmpty(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.notEmpty, config);\r\n}\n\nfunction async(validators) {\r\n    return baseDecoratorFunction(AnnotationTypes.async, validators, true);\r\n}\n\nfunction cusip(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.cusip, config);\r\n}\n\nfunction grid(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.grid, config);\r\n}\n\nfunction date(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.date, config);\r\n}\n\nfunction disable(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.disabled);\r\n    };\r\n}\n\nfunction error(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.error);\r\n    };\r\n}\n\nfunction and(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.and, config);\r\n}\n\nfunction or(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.or, config);\r\n}\n\nfunction not(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.not, config);\r\n}\n\nfunction trim$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.trim);\r\n    };\r\n}\n\nfunction ltrim$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.ltrim);\r\n    };\r\n}\n\nfunction rtrim$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.rtrim);\r\n    };\r\n}\n\nfunction blacklist$1(chars) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.blacklist, chars);\r\n    };\r\n}\n\nfunction stripLow$1(keepNewLines) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.stripLow, keepNewLines);\r\n    };\r\n}\n\nfunction toBoolean$1(strict) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toBoolean, strict);\r\n    };\r\n}\n\nfunction toDouble$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDouble);\r\n    };\r\n}\n\nfunction toFloat$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toFloat);\r\n    };\r\n}\n\nfunction toInt$1(radix) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toInt, radix);\r\n    };\r\n}\n\nfunction toString$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.string);\r\n    };\r\n}\n\nfunction whitelist$1(chars) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.whitelist, chars);\r\n    };\r\n}\n\nfunction toDate$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDate);\r\n    };\r\n}\n\nfunction escape$1() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.escape);\r\n    };\r\n}\n\nfunction prefix$1(text) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.prefix, text);\r\n    };\r\n}\n\nfunction suffix$1(text) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.suffix, text);\r\n    };\r\n}\n\nfunction model(config) {\r\n    return function (target) {\r\n        defaultContainer.addPropsConfig(target, config);\r\n    };\r\n}\n\nfunction sanitize$1(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.sanitize, config);\r\n    };\r\n}\n\nfunction elementClass(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.elementClass);\r\n    };\r\n}\n\nfunction minTime(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minTime, config);\r\n}\n\nfunction maxTime(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxTime, config);\r\n}\n\nfunction compose(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.compose, config);\r\n}\n\nfunction requiredTrue(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.requiredTrue, config);\r\n}\n\nfunction mask(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.mask, config);\r\n}\n\nfunction baseValidator(config, type, validator) {\r\n    var rxwebValidator = (control, target) => {\r\n        if (typeof control == STRING)\r\n            defaultContainer.init(target, 0, control, type, config, false);\r\n        else {\r\n            if (config && (!control.validatorConfig || !control.validatorConfig[type]))\r\n                ApplicationUtil.configureControl(control, config, type);\r\n            return validator(control);\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(rxwebValidator, \"name\", { value: RX_WEB_VALIDATOR });\r\n    return rxwebValidator;\r\n}\n\nfunction alphaValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.alpha, alphaValidator(config));\r\n}\n\nfunction allOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.allOf, allOfValidator(config));\r\n}\n\nfunction alphaNumericValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.alphaNumeric, alphaNumericValidator(config));\r\n}\n\nfunction choiceValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.choice, choiceValidator(config));\r\n}\n\nfunction compareValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.compare, compareValidator(config));\r\n}\n\nfunction containsValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.contains, containsValidator(config));\r\n}\n\nfunction creditCardValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.creditCard, creditCardValidator(config));\r\n}\n\nfunction differentValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.different, differentValidator(config));\r\n}\n\nfunction digitValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.digit, digitValidator(config));\r\n}\n\nfunction emailValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.email, emailValidator(config));\r\n}\n\nfunction evenValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.even, evenValidator(config));\r\n}\n\nfunction factorValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.factor, factorValidator(config));\r\n}\n\nfunction greaterThanEqualToValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.greaterThanEqualTo, greaterThanEqualToValidator(config));\r\n}\n\nfunction greaterThanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.greaterThan, greaterThanValidator(config));\r\n}\n\nfunction hexColorValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.hexColor, hexColorValidator(config));\r\n}\n\nfunction jsonValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.json, jsonValidator(config));\r\n}\n\nfunction leapYearValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.leapYear, leapYearValidator(config));\r\n}\n\nfunction lessThanEqualToValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lessThanEqualTo, lessThanEqualToValidator(config));\r\n}\n\nfunction lessThanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lessThan, lessThanValidator(config));\r\n}\n\nfunction lowerCaseValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lowerCase, lowercaseValidator(config));\r\n}\n\nfunction macValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.mac, macValidator(config));\r\n}\n\nfunction maxDateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxDate, maxDateValidator(config));\r\n}\n\nfunction maxLengthValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxLength, maxLengthValidator(config));\r\n}\n\nfunction maxNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxNumber, maxNumberValidator(config));\r\n}\n\nfunction minDateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minDate, minDateValidator(config));\r\n}\n\nfunction minLengthValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minLength, minLengthValidator(config));\r\n}\n\nfunction minNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minNumber, minNumberValidator(config));\r\n}\n\nfunction noneOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.noneOf, noneOfValidator(config));\r\n}\n\nfunction numericValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.numeric, numericValidator(config));\r\n}\n\nfunction oddValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.odd, oddValidator(config));\r\n}\n\nfunction oneOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.oneOf, oneOfValidator(config));\r\n}\n\nfunction passwordcValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.password, passwordValidator(config));\r\n}\n\nfunction patternValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.pattern, patternValidator(config));\r\n}\n\nfunction rangeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.range, rangeValidator(config));\r\n}\n\nfunction requiredValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.required, requiredValidator(config));\r\n}\n\nfunction timeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.time, timeValidator(config));\r\n}\n\nfunction upperCaseValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.upperCase, uppercaseValidator(config));\r\n}\n\nfunction urlValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.url, urlValidator(config));\r\n}\n\nfunction asciiValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.ascii, asciiValidator(config));\r\n}\n\nfunction dataUriValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.dataUri, dataUriValidator(config));\r\n}\n\nfunction portValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.port, portValidator(config));\r\n}\n\nfunction latLongValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.latLong, latLongValidator(config));\r\n}\n\nfunction extensionValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.extension, (control) => { return null; });\r\n}\n\nfunction fileSizeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.fileSize, (control) => { return null; });\r\n}\n\nfunction endsWithValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.endsWith, endsWithValidator(config));\r\n}\n\nfunction startsWithValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.startsWithWith, startsWithValidator(config));\r\n}\n\nfunction primeNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.primeNumber, primeNumberValidator(config));\r\n}\n\nfunction latitudeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.latitude, latitudeValidator(config));\r\n}\n\nfunction longitudeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.longitude, longitudeValidator(config));\r\n}\n\nfunction composeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.compose, composeValidator(config));\r\n}\n\nfunction fileValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.file, (control) => { return null; });\r\n}\n\nfunction customValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.custom, customValidator(config));\r\n}\n\nfunction uniqueValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.unique, uniqueValidator(config));\r\n}\n\nfunction imageValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.image, (control) => { return null; });\r\n}\n\nfunction notEmptyValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.notEmpty, notEmptyValidator(config));\r\n}\n\nfunction ipValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.ip, ipValidator(config));\r\n}\n\nfunction cusipValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.cusip, cusipValidator(config));\r\n}\n\nfunction gridValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.grid, gridValidator(config));\r\n}\n\nfunction dateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.date, dateValidator(config));\r\n}\n\nfunction andValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.and, andValidator(config));\r\n}\n\nfunction orValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.or, orValidator(config));\r\n}\n\nfunction notValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.not, notValidator(config));\r\n}\n\nfunction minTimeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minTime, minTimeValidator(config));\r\n}\n\nfunction maxTimeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxTime, maxTimeValidator(config));\r\n}\n\nfunction requiredTrueValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.requiredTrue, requiredTrueValidator(config));\r\n}\n\nfunction maskValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.mask, maskValidator(config));\r\n}\n\nclass RxwebValidators {\r\n}\r\nRxwebValidators.alpha = alphaValidatorExtension;\r\nRxwebValidators.allOf = allOfValidatorExtension;\r\nRxwebValidators.alphaNumeric = alphaNumericValidatorExtension;\r\nRxwebValidators.choice = choiceValidatorExtension;\r\nRxwebValidators.compare = compareValidatorExtension;\r\nRxwebValidators.contains = containsValidatorExtension;\r\nRxwebValidators.creditCard = creditCardValidatorExtension;\r\nRxwebValidators.different = differentValidatorExtension;\r\nRxwebValidators.digit = digitValidatorExtension;\r\nRxwebValidators.email = emailValidatorExtension;\r\nRxwebValidators.even = evenValidatorExtension;\r\nRxwebValidators.factor = factorValidatorExtension;\r\nRxwebValidators.greaterThanEqualTo = greaterThanEqualToValidatorExtension;\r\nRxwebValidators.greaterThan = greaterThanValidatorExtension;\r\nRxwebValidators.hexColor = hexColorValidatorExtension;\r\nRxwebValidators.json = jsonValidatorExtension;\r\nRxwebValidators.leapYear = leapYearValidatorExtension;\r\nRxwebValidators.lessThanEqualTo = lessThanEqualToValidatorExtension;\r\nRxwebValidators.lessThan = lessThanValidatorExtension;\r\nRxwebValidators.lowerCase = lowerCaseValidatorExtension;\r\nRxwebValidators.mac = macValidatorExtension;\r\nRxwebValidators.maxDate = maxDateValidatorExtension;\r\nRxwebValidators.maxLength = maxLengthValidatorExtension;\r\nRxwebValidators.maxNumber = maxNumberValidatorExtension;\r\nRxwebValidators.minDate = minDateValidatorExtension;\r\nRxwebValidators.minLength = minLengthValidatorExtension;\r\nRxwebValidators.minNumber = minNumberValidatorExtension;\r\nRxwebValidators.noneOf = noneOfValidatorExtension;\r\nRxwebValidators.numeric = numericValidatorExtension;\r\nRxwebValidators.odd = oddValidatorExtension;\r\nRxwebValidators.oneOf = oneOfValidatorExtension;\r\nRxwebValidators.password = passwordcValidatorExtension;\r\nRxwebValidators.pattern = patternValidatorExtension;\r\nRxwebValidators.range = rangeValidatorExtension;\r\nRxwebValidators.required = requiredValidatorExtension;\r\nRxwebValidators.time = timeValidatorExtension;\r\nRxwebValidators.upperCase = upperCaseValidatorExtension;\r\nRxwebValidators.url = urlValidatorExtension;\r\nRxwebValidators.ascii = asciiValidatorExtension;\r\nRxwebValidators.dataUri = dataUriValidatorExtension;\r\nRxwebValidators.port = portValidatorExtension;\r\nRxwebValidators.latLong = latLongValidatorExtension;\r\nRxwebValidators.extension = extensionValidatorExtension;\r\nRxwebValidators.fileSize = fileSizeValidatorExtension;\r\nRxwebValidators.endsWith = endsWithValidatorExtension;\r\nRxwebValidators.startsWith = startsWithValidatorExtension;\r\nRxwebValidators.primeNumber = primeNumberValidatorExtension;\r\nRxwebValidators.latitude = latitudeValidatorExtension;\r\nRxwebValidators.longitude = longitudeValidatorExtension;\r\nRxwebValidators.compose = composeValidatorExtension;\r\nRxwebValidators.file = fileValidatorExtension;\r\nRxwebValidators.custom = customValidatorExtension;\r\nRxwebValidators.unique = uniqueValidatorExtension;\r\nRxwebValidators.image = imageValidatorExtension;\r\nRxwebValidators.notEmpty = notEmptyValidatorExtension;\r\nRxwebValidators.ip = ipValidatorExtension;\r\nRxwebValidators.cusip = cusipValidatorExtension;\r\nRxwebValidators.grid = gridValidatorExtension;\r\nRxwebValidators.date = dateValidatorExtension;\r\nRxwebValidators.and = andValidatorExtension;\r\nRxwebValidators.or = orValidatorExtension;\r\nRxwebValidators.not = notValidatorExtension;\r\nRxwebValidators.minTime = minTimeValidatorExtension;\r\nRxwebValidators.maxTime = maxTimeValidatorExtension;\r\nRxwebValidators.requiredTrue = requiredTrueValidatorExtension;\r\nRxwebValidators.mask = maskValidatorExtension;\n\nclass IAbstractControl extends AbstractControl {\r\n}\n\nexport { ErrorMessageBindingStrategy, FormBuilderConfiguration, IAbstractControl, IpVersion, NumericValueType, ReactiveFormConfig, ResetFormType, RxFormArray, RxFormBuilder, RxFormControl, RxFormGroup, RxReactiveFormsModule, RxwebValidators, ValidationAlphabetLocale, allOf, alpha, alphaNumeric, and, ascii, async, blacklist$1 as blacklist, choice, compare, compose, contains, creditCard, cusip, custom, dataUri, date, different, digit, disable, elementClass, email, endsWith, error, escape$1 as escape, even, extension, factor, file, fileSize, greaterThan, greaterThanEqualTo, grid, hexColor, image, json, latLong, latitude, leapYear, lessThan, lessThanEqualTo, longitude, lowerCase, ltrim$1 as ltrim, mac, mask, maxDate, maxLength, maxNumber, maxTime, minDate, minLength, minNumber, minTime, model, noneOf, not, notEmpty, numeric, odd, oneOf, or, password, pattern, port, prefix$1 as prefix, primeNumber, prop, propArray, propObject, range, required, requiredTrue, rtrim$1 as rtrim, rule, sanitize$1 as sanitize, startsWith, stripLow$1 as stripLow, suffix$1 as suffix, time, toBoolean$1 as toBoolean, toDate$1 as toDate, toDouble$1 as toDouble, toFloat$1 as toFloat, toInt$1 as toInt, toString$1 as toString, trim$1 as trim, unique, upperCase, url, whitelist$1 as whitelist, RxwebFormDirective as ɵa, BaseDirective as ɵb, HtmlControlTemplateDirective as ɵc, ControlHostDirective as ɵd, RxFormControlDirective as ɵe, BaseValidator as ɵf, ControlExpressionProcess as ɵg, DecimalProvider as ɵh, FileControlDirective as ɵi, ImageFileControlDirective as ɵj, AsyncValidationDirective as ɵk, BaseFormBuilder as ɵl };\n//# sourceMappingURL=rxweb-reactive-form-validators.js.map\n","export default \"\\n<ion-content class=\\\"content\\\">\\n  <ion-grid class=\\\"gradient\\\" >\\n    <ion-row >\\n      <ion-col size-sm=\\\"10\\\" offset-sm=\\\"1\\\">\\n        \\n     <!-- LOGO -->\\n  <div class=\\\"mb-2\\\">\\n    <ion-img src=\\\"../assets/img/logo1.png\\\" class=\\\"logo-img\\\"></ion-img>\\n  </div>\\n\\n  <!-- FORM START -->\\n  <form  class=\\\"ion-padding-horizontal\\\" [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit(registerForm)\\\">\\n    <div class=\\\"d-flex column\\\">\\n\\n      <div class=\\\"mb-2\\\">\\n        <input type=\\\"text\\\" \\n        placeholder=\\\"User Name\\\" \\n        class=\\\"form-control\\\" \\n        formControlName=\\\"name\\\"\\n        [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" \\n         >\\n         <div *ngIf=\\\"submitted && registerForm.get('name').hasError('required')\\\"\\n         class=\\\"invalid-feedback\\\">\\n          User name required !</div>\\n      </div>\\n      \\n        \\n    \\n     \\n      <div class=\\\"mb-2\\\">\\n        <input type=\\\"text\\\"\\n         placeholder=\\\"Email Address \\\" \\n         class=\\\"form-control\\\"  \\n         formControlName=\\\"email\\\"\\n         [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\" \\n         >\\n         <div\\n          *ngIf=\\\"submitted && registerForm.get('email').errors\\\"\\n          class=\\\"invalid-feedback\\\">\\n         <div \\n         *ngIf=\\\"registerForm.get('email').hasError('required')\\\">\\n          Email address is required !\\n         </div>\\n         <div \\n         *ngIf=\\\" registerForm.get('email').hasError('email')\\\">\\n          Please enter valid email address !\\n         </div>\\n        </div>\\n      \\n      \\n      </div>\\n\\n      <div class=\\\"mb-2\\\">\\n        <input type=\\\"number\\\"\\n         placeholder=\\\"Mobile\\\"\\n         class=\\\"form-control\\\" \\n         formControlName=\\\"mobile\\\"\\n         [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('mobile').errors }\\\" \\n         >\\n         <div\\n         *ngIf=\\\"submitted && registerForm.get('mobile').errors\\\"\\n         class=\\\"invalid-feedback\\\">\\n        <div \\n        *ngIf=\\\"registerForm.get('mobile').hasError('required')\\\">\\n        Mobile no. is required !\\n        </div>\\n        <div \\n        *ngIf=\\\" registerForm.get('mobile').hasError('pattern')\\\">\\n        Mobile no. must be 10 digits !\\n        </div>\\n       </div>\\n      </div>\\n\\n\\n      <div class=\\\"mb-2\\\">\\n        <input type=\\\"password\\\"\\n         placeholder=\\\"Password\\\"\\n         class=\\\"form-control\\\" \\n         formControlName=\\\"password\\\"\\n         [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\" \\n         >\\n         <div\\n         *ngIf=\\\"submitted && registerForm.get('password').errors\\\"\\n         class=\\\"invalid-feedback\\\">\\n        <div \\n        *ngIf=\\\"registerForm.get('password').hasError('required')\\\">\\n         Password is required !\\n        </div>\\n        <div \\n        *ngIf=\\\" registerForm.get('password').hasError('minlength')\\\">\\n        Password must be at least 6 characters !\\n        </div>\\n       </div>\\n      </div>\\n\\n\\n      <div class=\\\"mb-2\\\">\\n        <input type=\\\"password\\\"\\n         placeholder=\\\"Confirm Password\\\"\\n         class=\\\"form-control\\\" \\n         formControlName=\\\"passwordConfirm\\\"\\n         [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('passwordConfirm').errors }\\\" \\n         >\\n         <div\\n         *ngIf=\\\"submitted && registerForm.get('passwordConfirm').errors\\\"\\n         class=\\\"invalid-feedback\\\">\\n        <div \\n        *ngIf=\\\"registerForm.get('passwordConfirm').hasError('required')\\\">\\n         Confirm password is required !\\n        </div>\\n        <div \\n        *ngIf=\\\" registerForm.get('passwordConfirm').hasError('mustMatch')\\\">\\n        Confirm password must match !\\n        </div>\\n       </div>\\n      </div>\\n\\n      <div class=\\\"mb-2\\\">\\n        <textarea\\n        type=\\\"text\\\"\\n        formControlName=\\\"address\\\"\\n        [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" \\n         placeholder=\\\"Address\\\"\\n         class=\\\"form-control\\\">\\n        </textarea>\\n        <div\\n        *ngIf=\\\"submitted && registerForm.get('address').errors\\\"\\n        class=\\\"invalid-feedback\\\">\\n       <div \\n       *ngIf=\\\"registerForm.get('address').hasError('required')\\\">\\n        Address is required !\\n       </div>\\n      \\n      </div>\\n      </div>\\n\\n\\n      <ion-item lines=\\\"none\\\" class=\\\"mb-2 file\\\">\\n        <ion-label slot=\\\"start\\\" class=\\\"ion-text-wrap text\\\">Select PAN Card</ion-label >\\n          <input\\n          style=\\\"display: none\\\"[writeFile]=\\\"true\\\"\\n          type=\\\"file\\\" (change)=\\\"onFileChanged($event)\\\"\\n          #fileInput>\\n          <div slot=\\\"end\\\">\\n            <ion-icon name=\\\"image-outline\\\" (click)=\\\"fileInput.click()\\\"[ngClass]=\\\"{'icon-color':pancard!==null}\\\"></ion-icon>\\n          </div>\\n  \\n        </ion-item>\\n\\n\\n      <ion-item lines=\\\"none\\\" class=\\\"mb-3 file\\\">\\n        <ion-label slot=\\\"start\\\" class=\\\"text\\\">Select Adhaar Card</ion-label >\\n        <input\\n        style=\\\"display: none\\\"[writeFile]=\\\"true\\\"\\n        type=\\\"file\\\" (change)=\\\"onAdhaar($event)\\\"\\n        #file1Input>\\n        <div slot=\\\"end\\\">\\n          <ion-icon name=\\\"image-outline\\\" (click)=\\\"file1Input.click()\\\" [ngClass]=\\\"{'icon-color':adhaarcard !==null}\\\"></ion-icon>\\n        </div>\\n\\n        </ion-item>\\n  \\n\\n      <!-- SIGNUP BUTTON -->\\n      <button type=\\\"submit\\\" class=\\\"btn btn-block btn-primary\\\">Create New Account</button>\\n  \\n    </div>\\n\\n  </form>\\n   <!-- FORM END-->\\n \\n\\n  \\n   <!-- SIGNIN BUTTON -->\\n   <div class=\\\"d-flex text-white mb-4 mt-5\\\"\\n    style=\\\"justify-content: center; outline: none;\\\"\\n    [routerLink]=\\\"['/','auth','signin']\\\">\\n    <span expand=\\\"block\\\"  class=\\\"ion-padding-horizontal\\\">Sign In</span>\\n    <ion-icon name=\\\"arrow-forward-outline\\\" class=\\\"pt-1 icon-only\\\"></ion-icon>\\n  </div>\\n  \\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SignUpPage } from './sign-up.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignUpPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SignUpPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule} from '@angular/common/http';\nimport { IonicModule } from '@ionic/angular';\n\nimport { SignUpPageRoutingModule } from './sign-up-routing.module';\nimport {  RxReactiveFormsModule } from \"@rxweb/reactive-form-validators\"\nimport { SignUpPage } from './sign-up.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RxReactiveFormsModule ,\n    IonicModule,\n    SignUpPageRoutingModule\n  ],\n  declarations: [SignUpPage]\n})\nexport class SignUpPageModule {}\n","export default \".logo-img {\\n  height: 150px;\\n  margin-top: 20px;\\n}\\n\\n.terms {\\n  font-size: small;\\n}\\n\\n.content {\\n  overflow-y: scroll !important;\\n}\\n\\nion-icon {\\n  font-size: 18px;\\n}\\n\\n.icon-color {\\n  color: var(--ion-color-primary);\\n}\\n\\n.text {\\n  font-size: 12px;\\n}\\n\\n.file {\\n  border-radius: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9zaWduLXVwL0Q6XFx2b3dHb2xkQXBwL3NyY1xcYXBwXFxhdXRoXFxzaWduLXVwXFxzaWduLXVwLnBhZ2Uuc2NzcyIsInNyYy9hcHAvYXV0aC9zaWduLXVwL3NpZ24tdXAucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLGdCQUFBO0FDQ0o7O0FEQ0U7RUFDRSxnQkFBQTtBQ0VKOztBREFFO0VBQ0UsNkJBQUE7QUNHSjs7QURERTtFQUVFLGVBQUE7QUNHSjs7QURERTtFQUNFLCtCQUFBO0FDSUo7O0FERkU7RUFDRSxlQUFBO0FDS0o7O0FESEU7RUFDRSxrQkFBQTtBQ01KIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9zaWduLXVwL3NpZ24tdXAucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ28taW1ne1xyXG4gICAgaGVpZ2h0OiAxNTBweDtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgfVxyXG4gIC50ZXJtc3tcclxuICAgIGZvbnQtc2l6ZTogc21hbGw7XHJcbiAgfVxyXG4gIC5jb250ZW50e1xyXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG4gIGlvbi1pY29uIHtcclxuXHJcbiAgICBmb250LXNpemU6IDE4cHg7XHJcbiAgfVxyXG4gIC5pY29uLWNvbG9ye1xyXG4gICAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1wcmltYXJ5KTtcclxuICB9XHJcbiAgLnRleHR7XHJcbiAgICBmb250LXNpemU6MTJweFxyXG4gIH1cclxuICAuZmlsZXtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICB9IiwiLmxvZ28taW1nIHtcbiAgaGVpZ2h0OiAxNTBweDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbn1cblxuLnRlcm1zIHtcbiAgZm9udC1zaXplOiBzbWFsbDtcbn1cblxuLmNvbnRlbnQge1xuICBvdmVyZmxvdy15OiBzY3JvbGwgIWltcG9ydGFudDtcbn1cblxuaW9uLWljb24ge1xuICBmb250LXNpemU6IDE4cHg7XG59XG5cbi5pY29uLWNvbG9yIHtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1wcmltYXJ5KTtcbn1cblxuLnRleHQge1xuICBmb250LXNpemU6IDEycHg7XG59XG5cbi5maWxlIHtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xufSJdfQ== */\"","import { Component, OnInit} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MustMatch } from '../../services/helper';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Storage } from '@ionic/storage';\nimport { HttpClient } from '@angular/common/http';\nimport { LoadingController } from '@ionic/angular';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nconst TOKEN_KEY = 'access_token';\nconst USER_ROLE = 'access_role';\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.page.html',\n  styleUrls: ['./sign-up.page.scss'],\n})\n\nexport class SignUpPage implements OnInit {\n   registerForm:FormGroup;\n   submitted = false;\n   selectedFile: any;\n   pancard:any = null;\n   adhaarcard:any = null;\n  \n  constructor(\n    private formBuilder: FormBuilder,\n    private auth:AuthService,\n    private http: HttpClient,\n    private storage:Storage,\n    private helper: JwtHelperService,\n    private loading:LoadingController\n    ) { }\n\n  ngOnInit() {\n     this.registerForm = this.formBuilder.group({\n      name:['',[Validators.required]],\n      email:['', [Validators.required,Validators.email]],\n      mobile:['', [Validators.required,Validators.pattern(/^\\d{10}$/)]],\n      password:['',[Validators.required,Validators.minLength(6)]],\n      passwordConfirm:['',[Validators.required]],\n      address:['',[Validators.required]],\n      panCard:['',[Validators.required]],\n      adhaar:['',[Validators.required]]\n    },\n    {\n      validator: MustMatch('password', 'confirmPassword')\n  }\n    );\n  }\n  \n\n  \n\n  onSubmit(form:FormGroup){\n    this.submitted = true;\n    this.loading.create({message:'SignUp...'}).then(el =>{\n        el.present();\n      });\n    const userData = new FormData();\n    userData.append(\"name\",this.registerForm.value.name);\n    userData.append(\"email\",this.registerForm.value.email);\n    userData.append(\"password\", this.registerForm.value.password);\n    userData.append(\"passwordConfirm\", this.registerForm.value.passwordConfirm);\n    userData.append(\"mobile\", this.registerForm.value.mobile);\n    userData.append(\"address\", this.registerForm.value.address);\n    userData.append(\"panCard\", this.registerForm.value.panCard);\n    userData.append(\"adhaar\", this.registerForm.value.adhaar);\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      this.loading.dismiss();\n        return;\n    }\n \n      this.http.post<any>(`${this.auth.url}/api/v1/users/signup`, userData).subscribe(res =>{\n        this.loading.dismiss();\n        this.auth.token = res.token;\n        this.auth.userRole = res.user.role;\n        this.storage.set(TOKEN_KEY, res.token);\n        this.storage.set(USER_ROLE, res.user);\n        this.auth.user = this.helper.decodeToken(res['token']);\n        this.auth.authenticationState.next(true);\n        this.adhaarcard = null;\n        this.pancard = null;\n        this.registerForm.reset();\n      },err=>{\n        this.loading.dismiss();\n        this.auth.showAlert(err);\n        throw new Error(JSON.stringify(err));\n        \n      });\n}\n\n\nonFileChanged(event:Event){\n  const file = (event.target as HTMLInputElement).files[0];\n  this.pancard = file;\n  this.registerForm.patchValue({panCard:file});\n  this.registerForm.get('panCard').updateValueAndValidity();\n\n}\n\nonAdhaar(event:Event){\n\n  const file = (event.target as HTMLInputElement).files[0];\n  this.adhaarcard = file;\n  this.registerForm.patchValue({adhaar:file});\n  this.registerForm.get('adhaar').updateValueAndValidity();\n  \n}\n\n\n\n}\n\n  \n\n"],"sourceRoot":"webpack:///"}